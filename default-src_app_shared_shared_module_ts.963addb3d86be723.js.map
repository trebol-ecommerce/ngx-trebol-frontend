{"version":3,"mappings":"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","names":["ImageFormComponent","constructor","formGroupService","this","onChange","v","onTouched","onValidatorChange","filename","formGroup","get","url","code","ngOnInit","createFormGroupFor","valueChangesSub","valueChanges","pipe","debounceTime","formChangesDebounceTimeMs","tap","subscribe","ngOnDestroy","p","_a","unsubscribe","writeValue","obj","reset","emitEvent","isJavaScriptObject","patchValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disable","enable","validate","control","valid","errors","imageFilename","imageUrl","registerOnValidatorChange","i0","selectors","provide","NG_VALUE_ACCESSOR","multi","useExisting","NG_VALIDATORS","decls","$localize","ProductListFormComponent","name","totalCount","productListCode","productListName","ShipperFormComponent","shipperName","ctx","UserFormComponent","peopleDataApiService","userRolesDataApiService","password","person","role","people$","fetchPage","map","page","items","roles$","userName","userPerson","userRole","API_INJECTION_TOKENS","EntityFormDialogComponent","data","dialog","snackBarService","BehaviorSubject","busySource","asObservable","item","dialogTitle","successMessage","entityType","FormGroup","FormControl","Validators","formSubmissionSub","onSubmit","invalid","markAsTouched","open","COMMON_VALIDATION_ERROR_MESSAGE","COMMON_DISMISS_BUTTON_LABEL","next","apiService","doSubmit","close","value","onCancel","isNewItem","update","create","message","err","COMMON_ERROR_MESSAGE","MAT_DIALOG_DATA","ProductCategoryFormComponent","parent","V","categoryCode","categoryName","defaultThrottleConfig","leading","trailing","duration","scheduler","call","subscriber","source","ThrottleTimeSubscriber","Subscriber","destination","super","_hasTrailingValue","_trailingValue","_next","throttled","add","schedule","dispatchNext","_complete","complete","clearThrottle","remove","arg","ImagesArrayDialogService","imageDataService","ReplaySubject","loadingSource","pageSource","selectedImagesSource","reloadItems","pageIndex","pageSize","sortBy","order","filter","filenameLike","undefined","ignoreElements","finalize","updateSelection","options","selectedImages$","take","selectedImages","Set","selected","values","switchMap","from","unselected","img","matchingIndex","findIndex","img2","splice","factory","ctx_r5","ImagesArrayDialogComponent","service","Subject","W","_","existing","_b","length","selectedImagesSub","filterChangesSub","merge","filterFormControl","async","config","lift","ThrottleTimeOperator","throttleTime","filterChangeNotifier","reload","loading$","options$","page$","image","some","disabled","totalCount$","pageSizeOptions","selectionChangeSub","fetchingSubscription","onSelectionChange","event","o","onPage","ProductFormComponent","dialogService","images","barcode","category","price","description","productBarcode","productName","productPrice","productCategory","productDescription","onClickAddImage","afterClosed","setValue","DialogSwitcherButtonComponent","onClick","sourceDialogRef","targetDialogComponent","targetDialogConfig","GmapComponent","id","environment","HeaderBrandComponent","ctx_r4","ProductCardComponent","Product","EventEmitter","onClickAddProduct","addToCart","emit","onClickViewProduct","view","ctx_r6","ctx_r10","ctx_r14","ctx_r18","ctx_r24","ctx_r28","ctx_r32","ctx_r36","ProductCategoryTreeComponent","snackbarService","sharedDialogService","node","expandable","n","treeControl","FlatTreeControl","level","treeFlattener","MatTreeFlattener","transformer","children","dataSource","MatTreeFlatDataSource","nestedNodeMap","Map","flatNodeMap","dataLoadingSubscription","reloadCategories","dataChangesSubscription","categories$","clear","x","actionSubscription","f","E","_c","selection","onClickAddChildNodeTo","parentNode","editable","requestCategoryData","newNode","expand","error","onClickEditNode","treeNode","result","edit","onClickDeleteNode","requestConfirmation","title","didConfirm","matTree","renderNodeChanges","onClickTreeNode","selectionEnabled","flatNode","ProductCategoryTreeFlatNode","set","withData","Object","assign","width","MatTree","project","concurrent","ExpandSubscriber","SimpleOuterSubscriber","index","active","hasCompleted","Number","POSITIVE_INFINITY","buffer","subscribeToProjection","closed","dispatch","state","e","push","innerSubscribe","SimpleInnerSubscriber","notifyNext","innerValue","notifyComplete","shift","ProductCategoryTreeService","categoriesSource","force","ExpandOperator","loadDescendants","toArray","c","EMPTY","originalNode","delete","MAX_SAFE_INTEGER","parentCode","ProductFiltersPanelComponent","formBuilder","group","nameLike","valueChangesSubscription","formChangesDebouncingTimeMs","distinctUntilChanged","prev","curr","JSON","stringify","filters","filtersChanges","M","onSelectCategory","SellDetailUnitsControlComponent","oneOrLessUnits","units","increase","decrease","onClickIncrease","onClickDecrease","ctx_r21","ctx_r31","SellDetailsTableComponent","sellDetailsSource","sellDetails","onClickIncreaseProductQuantity","increaseUnitsAtIndex","onClickDecreaseProductQuantity","decreaseUnitsAtIndex","onClickRemoveProduct","removeAtIndex","SellInformationComponent","transitionTimeMs","trigger","style","opacity","transition","animate","ctx_r9","ctx_r11","oxw","ctx_r13","ctx_r15","ctx_r25","SlideshowComponent","router","currentIndexSource","startAutoRotation","autoRotateImagesSubscription","navigate","Array","isArray","onClickImage","targetUrl","navigateByUrl","onClickAdd","onClickRemove","onClickSlideBackwards","onClickSlideForwards","nextIndex","cycle","onClickSlideSelector","automaticSlide","timer","autoImageRotationObservable","stopAutoRotation","interval","automaticSlideInterval","fadeInOut","WhatsappButtonComponent","areaCode","phone","ConfirmationDialogComponent","EditProfileFormDialogComponent","profileService","savingSource","profile","loadFormSub","getUserProfile","R","j","sendFormSub","formValue","updateUserProfile","succesfulSaveMessage","ProductCategoryPickerDialogComponent","categoryTreeService","onSelect","option","SharedDialogService","disableClose","EntityFormGroupFactoryService","typeName","createAddressFormGroup","createImageFormGroup","createPersonFormGroup","createProductFormGroup","createProductCategoryFormGroup","createProductListFormGroup","createSellFormGroup","createShipperFormGroup","createUserFormGroup","city","municipality","firstLine","secondLine","notes","firstName","lastName","idNumber","email","phone1","phone2","date","Date","billingType","salesperson","customer","AddressFormComponent","U","addressCity","addressMunicipality","addressFirstLine","addressSecondLine","addressNotes","CompanyFormComponent","q","companyIdNumber","companyName","PersonFormComponent","personFirstName","personLastName","personIdNumber","personEmail","personPhone1","personPhone2","ctx_r1","ProductCategorySelectorFieldComponent","categorySelection","O","productCategoryCode","required","productCategoryName","onClickClearCategory","onClickOpenCategoryPicker","AddressPipe","transform","args","commentLabel","pure","TrustedResourceUrlPipe","domSanitizer","bypassSecurityTrustResourceUrl","Error","MatProgressBarModule","ɵfac","ɵmod","ɵinj","CommonModule","MatCommonModule","MATERIAL_MODULES","MatBadgeModule","MatButtonModule","MatCardModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatPaginatorModule","MatRadioModule","MatSelectModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTreeModule","DATE_PROVIDER_IMPLEMENTATION","MatNativeDateModule","SharedMaterialModule","SharedModule","imports","RouterModule","ReactiveFormsModule","AppMaterialModule","variable","Observable","connect","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","move","detach","viewCacheSize","_viewCache","_insertView","_detachAndCacheView","_moveView","destroy","viewArgsFactory","cachedView","_insertViewFromCache","$implicit","viewArgs","detachedView","_maybeCacheView","indexOf","pop","insert","_multiple","initiallySelectedValues","_emitChanges","_selection","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","_selected","select","_verifyValueAssignment","_emitChangeEvent","deselect","_unmarkSelected","toggle","isSelected","_unmarkAll","has","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","added","removed","UniqueSelectionDispatcher","_listeners","notify","listener","listen","registered","ɵprov","_VIEW_REPEATER_STRATEGY","InjectionToken","mediaQueriesForWebkitCompatibility","mediaQueryStyleNode","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","document","createElement","setAttribute","head","appendChild","sheet","insertRule","console","createEmptyStyleRule","i1","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","_destroySubject","isMatched","queries","coerceArray","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","breakpointStates","response","breakpoints","output","observer","handler","run","startWith","takeUntil","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","inclusive","TakeWhileSubscriber","nextOrComplete","predicateResult","Boolean","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","_document","attach","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","classList","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","element","scrollContainers","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","DOCUMENT","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","key","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","target","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","parentElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","addEventListener","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","subscription","backdrop","removeEventListener","clearTimeout","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","i","container","i1$1","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","origin","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","a","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","nativeElement","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","cssClass","ElementRef","Element","hasOwnProperty","input","parseFloat","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","tt","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","OverlayKeyboardDispatcher","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","type","slice","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","_appRef","ApplicationRef","DomPortalOutlet","i5","i6","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","elementRef","ɵdir","CdkConnectedOverlay","_overlay","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","TemplatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","coerceBooleanProperty","lockPosition","ngOnChanges","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","_getFlexibleConnectedPositionStrategyOrigin","transformOriginSelector","TakeWhileOperator","takeWhile","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","BidiModule","PortalModule","ScrollingModule","_attachedHost","setAttachedHost","Portal","component","injector","componentFactoryResolver","template","attachDomPortal","_attachedPortal","ComponentPortal","attachComponentPortal","attachTemplatePortal","DomPortal","_invokeDisposeFn","setDisposeFn","_disposeFn","BasePortalOutlet","outletElement","_defaultInjector","anchorNode","createComment","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","rootNodes","rootNode","detectChanges","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ref","nodeType","ELEMENT_NODE","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_monitoredElements","monitor","elementOrRef","coerceElement","info","subject","animationName","isAutofilled","unlisten","stopMonitoring","_info","CdkTextareaAutosize","_elementRef","_destroyed","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_textareaElement","minRows","_minRows","coerceNumberProperty","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","resizeToFitContent","placeholder","_cachedPlaceholderHeight","removeAttribute","_cacheTextareaPlaceholderHeight","_cachedLineHeight","ngAfterViewInit","_initialHeight","_getWindow","fromEvent","auditTime","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","visibility","border","padding","overflow","_measureScrollHeight","previousMargin","isFirefox","FIREFOX","needsMarginFiller","measuringClass","ngDoCheck","textarea","_previousValue","_scrollToCaretPosition","_noopInputHandler","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","A","inputs","TextFieldModule","expansionModel","SelectionModel","dataNode","_trackByValue","collapse","isExpanded","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","toBeProcessed","getDescendants","trackBy","getLevel","isExpandable","results","dataNodes","expandAll","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","_node","CdkTreeNodeDef","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","viewChange","end","MAX_VALUE","_dataSource","_switchDataSource","_dataDiffer","find","_nodeOutlet","disconnect","_dataSubscription","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","when","_defaultNodeDef","_observeRenderChanges","dataStream","isDataSource","isObservable","of","dataDiffer","parentData","diff","insertNode","_getNodeDef","first","nodeData","CdkTreeNodeOutletContext","CdkTreeNode","mostRecentTreeNode","ɵcmp","vt","Et","et","directives","encapsulation","_tree","_dataChanges","_role","_data","_setRoleFromData","_parentNodeAriaLevel","nodeElement","isNodeElement","getAttribute","getParentNodeAriaLevel","focus","CdkNestedTreeNode","tree","ngAfterContentInit","childrenNodes","getChildren","updateChildrenNodes","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkTreeNodePadding","_treeNode","_element","indentUnits","_indent","_setPadding","_level","_setLevelInput","indent","_setIndentInput","_paddingIndent","nodeLevel","forceChange","_currentPadding","paddingProp","resetProp","parts","i2","CdkTreeNodeToggle","_recursive","recursive","_toggle","stopPropagation","CdkTreeModule","nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","_ariaDescriber","_renderer","_animationMode","_color","_overlap","_id","color","_setColor","overlap","val","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","removeDescription","badgeElement","activeClass","newContentNormalized","textContent","describe","colorPalette","badges","ANIMATION_MODULE_TYPE","A11yModule","BUTTON_HOST_ATTRIBUTES","_MatButtonBase","mixinColor","mixinDisableRipple","MatButton","_focusMonitor","isRoundButton","_hasHostAttributes","isIconButton","attr","_getHostElement","focusVia","_isRippleDisabled","disableRipple","attributes","attribute","hasAttribute","MatRipple","attrs","MatAnchor","focusMonitor","animationMode","_haltDisabledEvents","stopImmediatePropagation","MatRippleModule","MatCardTitle","MatCardSubtitle","MatCard","d","MatCardHeader","u","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","matDialogAnimations","dialogContainer","animateChild","optional","_MatDialogContainerBase","_focusTrapFactory","_interactivityChecker","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledBy","_initializeWithAttachedContent","_focusTrap","_getFocusedElementPierceShadowDom","_recaptureFocus","_containsFocus","_trapFocus","_forceFocus","isFocusable","tabIndex","callback","_focusByCssSelector","elementToFocus","querySelector","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","_restoreFocus","previousElement","activeElement","MatDialogConfig","viewQuery","Q","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","_onAnimationStart","_startExitAnimation","markForCheck","i3","uniqueId","_containerInstance","_afterOpened","_afterClosed","_beforeClosed","_closeFallbackTimeout","_finishDialogClose","_result","componentInstance","_closeDialogVia","dialogResult","afterOpened","beforeClosed","_getPositionStrategy","getState","interactionType","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","_MatDialogBase","_defaultOptions","_parentDialog","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","defer","openDialogs","_getAfterAllClosed","componentOrTemplateRef","defaultOptions","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","_getOverlayConfig","dialogConfig","providers","useValue","containerPortal","instance","TemplateRef","_createInjector","contentRef","userInjector","Directionality","InjectFlags","previousValue","overlayContainer","siblings","sibling","nodeName","dialogs","MatDialog","location","parentDialog","MatDialogRef","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","_onButtonClick","screenX","screenY","MatDialogTitle","_dialogRef","Promise","resolve","MatDialogContent","MatDialogActions","MatDivider","_vertical","_inset","vertical","inset","CDK_ACCORDION","CdkAccordionItem","accordion","_expansionDispatcher","_openCloseAllSubscription","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","accordionId","expanded","_subscribeToOpenCloseAllActions","_openCloseAllActions","CdkAccordionModule","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","bodyExpansion","MatExpansionPanelContent","_template","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","fromState","hideToggle","togglePosition","_togglePosition","_hasSpacing","displayMode","_getExpandedState","_lazyContent","_portal","_body","focusedElement","bodyElement","Tt","wt","Ct","D","ngContentSelectors","I","changeDetection","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeaderBase","MatExpansionPanelHeader","panel","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","expandedHeight","collapsedHeight","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","_keydown","SPACE","ENTER","_handleHeaderKeydown","_handleHeaderFocus","i2$1","MatExpansionPanelTitle","updateOutlineGap","MAT_ERROR","matFormFieldAnimations","transitionMessages","MatFormFieldControl","nextUniqueId$1","_MAT_HINT","MatHint","align","MatLabel","MatPlaceholder","MAT_PREFIX","MatPrefix","MAT_SUFFIX","MatSuffix","_MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","_appearance","oldValue","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","_validateControlChild","controlType","stateChanges","_validatePlaceholders","_syncDescribedByIds","ngControl","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","_validateHints","ids","userAriaDescribedBy","startHint","hint","endHint","setDescribedByIds","labelEl","outlineStartSelector","outlineGapSelector","gapElements","_isAttachedToDOM","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","offsetWidth","outlineGapPadding","rect","getRootNode","b","X","i4","ObserversModule","headers","normalizedNames","lazyUpdate","lazyInit","line","toLowerCase","maybeSetNormalizedName","init","getAll","append","clone","op","lcName","HttpHeaders","copyFrom","applyUpdate","other","base","toDelete","Ot","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","encodeURIComponent","replace","s","t","updates","cloneFrom","encoder","HttpUrlEncodingCodec","fromString","fromObject","rawParams","codec","param","eqIdx","list","paramParser","res","appendAll","params","_value","toString","eKey","join","HttpParams","valueToString","idx","z","token","defaultValue","ArrayBuffer","Blob","FormData","method","third","fourth","reportProgress","withCredentials","responseType","toUpperCase","HttpContext","urlWithParams","qIdx","serializeBody","isArrayBuffer","isBlob","isFormData","URLSearchParams","isUrlSearchParams","detectContentTypeHeader","setHeaders","setParams","HttpRequest","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","defaultStatus","defaultStatusText","status","statusText","ok","HttpResponse","HttpClient","request","req","events$","concatMap","handle","res$","jsonp","callbackParam","patch","addBody","post","put","HttpHandler","policy","ttWindow","trustedTypes","createPolicy","createHTML","getPolicy","iconName","literal","svgText","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","SvgIconConfig","addSvgIconResolver","resolver","cleanLiteral","sanitize","SecurityContext","getMatIconFailedToSanitizeLiteralError","trustedLiteral","trustedHTMLFromString","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","getMatIconNameNotFoundError","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","errorMessage","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","iconElement","_setSvgAttributes","_toSvgElement","_svgElementFromString","str","div","innerHTML","childNodes","viewBox","iconConfig","getMatIconNoHttpProviderError","inProgressFetch","share","configNamespace","svgElement","isSafeUrlWithOptions","_MatIconBase","MAT_ICON_LOCATION","providedIn","inject","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_inline","_currentIconFetch","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_splitIconName","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","elem","fontSetClass","_previousFontSetClass","_previousFontIconClass","elementsWithFuncIri","elementWithReference","match","rawName","_svgNamespace","_svgName","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","_MatInputBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","autofilled","_type","_readonly","_neverEmptyInputTypes","getSupportedInputTypes","_iOSKeyupListener","el","_inputValueAccessor","_previousNativeValue","_isServer","_isNativeSelect","_isTextarea","_isInFormField","multiple","_d","_required","hasValidator","_validateType","readonly","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","_focusChanged","isFocused","_onInput","_previousPlaceholder","_isNeverEmpty","_isBadInput","validity","badInput","empty","selectElement","firstOption","selectedIndex","label","onContainerClick","_isInlineSelect","L","ErrorStateMatcher","_MatListBase","_MatListItemMixinBase","MAT_LIST","MAT_NAV_LIST","MatNavList","H","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListItem","navList","_isInteractiveList","_getListType","_list","setLines","_lines","at","MatLine","_MatSelectionListBase","_MatListOptionBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","forwardRef","MatSelectionList","MatListOption","_changeDetector","selectionList","selectedChange","checkboxPosition","_inputsInitialized","compareWith","selectedOptions","_setSelected","_reportValueChange","wasSelected","hadFocus","newActiveItem","_removeOptionFromList","getLabel","_text","_handleClick","_handleFocus","_setFocusedOption","_handleBlur","_onTouched","K","_markForCheck","_contentInitialized","selectionChange","_tabIndex","_onChange","_markOptionsForCheck","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","skipPredicate","withAllowedModifierKeys","_setOptionsFromValues","tabOut","_allowFocusEscape","_updateTabIndex","toFocus","setActiveItem","disableRippleChanges","colorChanges","firstChange","_isDestroyed","selectAll","_setAllOptionsSelected","deselectAll","updateActiveItem","optionIndex","_getOptionIndex","activeItemIndex","activeItem","manager","previousFocusIndex","hasModifier","isTyping","_toggleFocusedOption","shouldSelect","onKeydown","UP_ARROW","DOWN_ARROW","shiftKey","_getSelectedOptionValues","MatSelectionListChange","correspondingOption","focusedIndex","_isValidIndex","focusedOption","skipDisabled","isUserInput","changedOptions","MatLineModule","MatPseudoCheckboxModule","delay","delayFor","isNaN","absoluteDelay","now","DelayOperator","DelaySubscriber","queue","errored","time","notification","_schedule","scheduleNotification","DelayMessage","Notification","_error","m","_handleKeydown","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_CONTENT","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_parentMenu","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","icons","_setHighlighted","isHighlighted","T","MAT_MENU_DEFAULT_OPTIONS","overlapTrigger","xPosition","yPosition","menuPanelUid","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","panelId","setPositionClasses","previousPanelClass","_previousPanelClass","_updateDirectDescendants","focusedItem","itemsList","setNextItemActive","_item","LEFT_ARROW","parentMenu","RIGHT_ARROW","setFocusOrigin","focusFirstItem","lazyContent","_focusFirstItem","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","scrollTop","_allItems","notifyOnChanges","contentQueries","ht","MatMenu","changeDetectorRef","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","passiveEventListenerOptions","_MatMenuTriggerBase","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","_parentMaterialMenu","triggersSubmenu","_deprecatedMatMenuTriggerFor","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","_attached","_setIsMenuOpen","_setMenuElevation","isOpen","_subscribeToPositions","originFallbackX","overlayFallbackY","originFallbackY","overlayFallbackX","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","i3$1","hostAttrs","hostVars","MatMenuTrigger","CdkScrollableModule","PANEL_CLASS","passiveListenerOptions","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_viewInitialized","_pointerExitEventsInitialized","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_updatePosition","_tooltipInstance","show","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","String","_isTooltipVisible","_updateTooltipMessage","tooltipClass","_tooltipClass","_setTooltipClass","_touchstartTimeout","_showTimeoutId","_hideTimeoutId","_tooltipComponent","_triggerElement","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","_updateCurrentPositionClass","_handleBodyInteraction","disableTooltipInteractivity","_getOrigin","_getOverlayPosition","_addOffset","main","isLtr","originPosition","_invertPosition","overlayPosition","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","_addListeners","exitListeners","newTarget","relatedTarget","_wheelListener","touchendListener","listeners","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","gestures","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","MatTooltip","scrollDispatcher","platform","ariaDescriber","TooltipComponent","_TooltipComponentBase","_visibility","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_toggleVisibility","_handleMouseLeave","_onShow","_handleAnimationEnd","_showAnimation","_hideAnimation","_finalizeAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","getComputedStyle","getPropertyValue","_breakpointObserver","_isHandset","ut","i7","pipes","MatTooltipModule","_changePageSize","firstPage","lastPage","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","startIndex","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinInitialized","_MatPaginatorBase","_intl","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","hidePageSize","showFirstLastButtons","_pageSize","_updateDisplayedPageSizeOptions","_initialized","_markInitialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","_nextButtonsDisabled","_previousButtonsDisabled","_displayedPageSizeOptions","MatPaginator","intl","formFieldAppearance","_formFieldAppearance","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MAT_RADIO_GROUP","_MatRadioGroupBase","_name","_labelPosition","_controlValueAccessorChangeFn","_updateRadioButtonNames","labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","_touch","_radios","radio","MatRadioChange","Y","MatRadioButton","_MatRadioButtonMixinBase","MatRadioButtonBase","_MatRadioButtonBase","radioGroup","_radioDispatcher","_providerOverride","_uniqueId","_checked","_noopAnimations","newCheckedState","_setDisabled","inputId","_inputElement","focusOrigin","_onInputClick","_onInputInteraction","groupValueChanged","_previousTabIndex","$","changeDetector","radioDispatcher","providerOverride","_panelDoneAnimatingStream","matSelectAnimations","transformPanelWrap","transformPanel","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","_MatSelectMixinBase","MAT_SELECT_TRIGGER","_MatSelectBase","_parentFormField","_liveAnnouncer","_panelOpen","_compareWith","o1","o2","_triggerAriaLabelledBy","_destroy","_valueId","_overlayPanelClass","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","openedChange","_openedStream","_closedStream","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_placeholder","_selectionModel","_initializeSelection","hasAssigned","_assignValue","_panelDoneAnimating","panelOpen","_initKeyManager","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","_previousControl","_canOpen","withHorizontalOrientation","_highlightCorrectOption","triggerValue","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","altKey","previouslySelectedOption","selectedOption","announce","_selectViaInteraction","ctrlKey","hasDeselectedOptions","opt","previouslyFocusedIndex","_onFocus","_onBlur","_onAttached","_overlayDir","_positioningSettled","_getPanelTheme","_setSelectionByValue","setInactiveStyles","_selectOptionByValue","_sortValues","ActiveDescendantKeyManager","withVerticalOrientation","_scrollOptionIntoView","changedOrDestroyed","_onSelect","_propagateChanges","sortComparator","fallbackValue","valueToEmit","_getChangeEvent","_getPanelAriaLabelledby","labelId","ariaLabelledby","_getAriaActiveDescendant","_ariaDescribedby","MatSelect","_scrollTop","_triggerFontSize","_transformOrigin","_positions","_calculateOverlayScroll","scrollBuffer","maxScroll","itemHeight","_getItemHeight","_triggerRect","fontSize","_calculateOverlayPosition","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_calculateOverlayOffsetX","MatSelectChange","viewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","leftOverflow","rightOverflow","round","_calculateOverlayOffsetY","optionHeightAdjustment","maxOptionsDisplayed","optionOffsetFromPanelTop","_getItemCount","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","panelHeight","selectedOptionOffset","MatOption","MAT_OPTGROUP","MAT_OPTION_PARENT_COMPONENT","i8","MatOptionModule","action","MAT_SNACK_BAR_DATA","politeness","announcementMessage","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","_onEnter","SimpleSnackBar","snackBarRef","hasAction","MatSnackBarRef","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_announceDelay","_onAnnounce","_animationState","_assertNotAttached","_applySnackBarClasses","_live","G","onAnimationEnd","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","panelClasses","inertElement","liveElement","HTMLElement","MatSnackBarConfig","w","MAT_SNACK_BAR_DEFAULT_OPTIONS","_MatSnackBarBase","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","simpleSnackBarComponent","_attachSnackBarContainer","snackBarContainerComponent","containerRef","userConfig","handsetCssClass","_animateSnackBar","isLeft","isRight","i3$2","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig","_disableViewStateAnimation","SORT_ANIMATION_TRANSITION","AnimationDurations","AnimationCurves","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","MAT_SORT_DEFAULT_OPTIONS","_MatSortBase","MatSort","sortables","_direction","sortChange","disableClear","_disableClear","register","sortable","deregister","getNextSortDirection","sortDirectionCycle","sortOrder","getSortDirectionCycle","nextDirectionIndex","_MatSortHeaderBase","MatSortHeader","_sort","_columnDef","_showIndicatorHint","_viewState","_arrowDirection","_sortActionDescription","_handleStateChanges","sortActionDescription","_updateSortActionDescription","_updateArrowDirection","_setAnimationTransitionState","_isSorted","_sortButton","newState","_setIndicatorHintVisible","_rerenderSubscription","visible","_isDisabled","viewState","_toggleOnInteraction","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","_sticky","_hasStickyChanged","sticky","prevValue","hasStickyChanged","resetStickyChanged","CDK_TABLE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","_CdkColumnDefBase","mixinHasStickyInput","CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_setNameInput","stickyEnd","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","J","rt","S","columnDef","CdkHeaderCell","BaseCdkCell","CdkCell","tableRole","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_currentSchedule","task","_createScheduleIfNeeded","scheduleEnd","_Schedule","_getScheduleObservable","isStable","BaseRowDef","_columnsDiffer","columns","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","headerCell","CdkFooterRowDef","footerCell","cell","features","_CdkHeaderRowDefBase","CdkHeaderRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","CdkRow","CdkNoDataRow","_contentClassName","STICKY_DIRECTIONS","_isNativeHtmlTable","_stickCellCss","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","stickyDirections","elementsToClear","row","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","_addStickyStyle","stickRows","rowsToStick","stickyStates","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","borderedRowIndex","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CdkTable","_viewRepeater","_stickyPositioningListener","_columnDefsByName","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","contentChanged","_trackByFn","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_setupStickyStyler","_applyNativeTableSections","_i","dataRow","dataIndex","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","columnsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_rowDefs","_renderChangeSubscription","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","_headerRowDefs","_footerRowDefs","_defaultRowDef","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","_adjustedPreviousIndex","_getEmbeddedViewArgs","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","NgZone","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","WeakMap","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","headerColumnsChanged","footerColumnsChanged","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","cellTemplate","_getCellTemplates","renderIndex","count","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","_noDataRowOutlet","section","stickyCheckReducer","StickyStyler","_noDataRow","shouldShow","useClass","_DisposeViewRepeaterStrategy","array","CdkTableModule","MatTable","oe","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatRow","DataSource","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","valueA","valueB","valueAType","valueBType","comparatorResult","At","filterPredicate","dataStr","currentTerm","transformedFilter","_updateChangeSubscription","_filterData","paginator","_paginator","initialized","pageChange","filteredData","orderedData","_orderData","paginatedData","_pageData","_updatePaginator","filteredDataLength","lastPageIndex","newPageIndex","_MatTableDataSource","_MatTreeNodeBase","MatTreeNode","MatTreeNodeDef","l","MatTreeNodePadding","MatTreeNodeOutlet","MatTreeNodeToggle","transformFunction","_flattenNode","resultNodes","parentMap","_flattenChildren","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","currentExpand","_treeControl","_treeFlattener","_flattenedData","_expandedData","collectionViewer"],"sources":["./src/app/management/forms/image/image-form.component.ts","./src/app/management/forms/image/image-form.component.html","./src/app/management/forms/product-list/product-list-form.component.ts","./src/app/management/forms/product-list/product-list-form.component.html","./src/app/management/forms/shipper/shipper-form.component.ts","./src/app/management/forms/shipper/shipper-form.component.html","./src/app/management/forms/user/user-form.component.html","./src/app/management/forms/user/user-form.component.ts","./src/app/management/dialogs/entity-form/entity-form-dialog.component.html","./src/app/management/dialogs/entity-form/entity-form-dialog.component.ts","./src/app/management/forms/product-category/product-category-form.component.ts","./src/app/management/forms/product-category/product-category-form.component.html","./node_modules/rxjs/_esm2015/internal/operators/throttle.js","./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js","./src/app/management/dialogs/images-array/images-array-dialog.service.ts","./src/app/management/dialogs/images-array/images-array-dialog.component.html","./src/app/management/dialogs/images-array/images-array-dialog.component.ts","./src/app/management/forms/product/product-form.component.ts","./src/app/management/forms/product/product-form.component.html","./src/app/shared/components/dialog-switcher-button/dialog-switcher-button.component.ts","./src/app/shared/components/dialog-switcher-button/dialog-switcher-button.component.html","./src/app/shared/components/gmap/gmap.component.ts","./src/app/shared/components/gmap/gmap.component.html","./src/app/shared/components/header-brand/header-brand.component.html","./src/app/shared/components/header-brand/header-brand.component.ts","./src/models/entities/Product.ts","./src/app/shared/components/product-card/product-card.component.html","./src/app/shared/components/product-card/product-card.component.ts","./src/app/shared/components/product-category-tree/ProductCategoryTreeFlatNode.ts","./src/app/shared/components/product-category-tree/product-category-tree.component.html","./src/app/shared/components/product-category-tree/product-category-tree.component.ts","./node_modules/rxjs/_esm2015/internal/operators/expand.js","./src/app/shared/components/product-category-tree/product-category-tree.service.ts","./src/app/shared/components/product-filters-panel/product-filters-panel.component.ts","./src/app/shared/components/product-filters-panel/product-filters-panel.component.html","./src/app/shared/components/sell-detail-units-control/sell-detail-units-control.component.ts","./src/app/shared/components/sell-detail-units-control/sell-detail-units-control.component.html","./src/app/shared/components/sell-details-table/sell-details-table.component.html","./src/app/shared/components/sell-details-table/sell-details-table.component.ts","./src/app/shared/components/sell-information/sell-information.component.html","./src/app/shared/components/sell-information/sell-information.component.ts","./src/animations/fadeInOut.ts","./src/app/shared/components/slideshow/slideshow.component.html","./src/app/shared/components/slideshow/slideshow.component.ts","./src/app/shared/components/whatsapp-button/whatsapp-button.component.html","./src/app/shared/components/whatsapp-button/whatsapp-button.component.ts","./src/app/shared/dialogs/confirmation/confirmation-dialog.component.ts","./src/app/shared/dialogs/confirmation/confirmation-dialog.component.html","./src/app/shared/dialogs/edit-profile-form/edit-profile-form-dialog.component.ts","./src/app/shared/dialogs/edit-profile-form/edit-profile-form-dialog.component.html","./src/app/shared/dialogs/product-category-picker/product-category-picker-dialog.component.ts","./src/app/shared/dialogs/product-category-picker/product-category-picker-dialog.component.html","./src/app/shared/dialogs/shared-dialog.service.ts","./src/app/shared/entity-form-group-factory.service.ts","./src/app/shared/forms/address/address-form.component.ts","./src/app/shared/forms/address/address-form.component.html","./src/app/shared/forms/company/company-form.component.ts","./src/app/shared/forms/company/company-form.component.html","./src/app/shared/forms/person/person-form.component.ts","./src/app/shared/forms/person/person-form.component.html","./src/app/shared/forms/product-category-selector-field/product-category-selector-field.component.html","./src/app/shared/forms/product-category-selector-field/product-category-selector-field.component.ts","./src/app/shared/pipes/address/address.pipe.ts","./src/app/shared/pipes/trusted-resource-url/trusted-resource-url.pipe.ts","./node_modules/@angular/material/fesm2015/progress-bar.mjs","./src/app/shared/shared-material.module.ts","./src/app/shared/shared.module.ts","./src/functions/isJavaScriptObject.ts","./src/text/messages.ts","./node_modules/rxjs/_esm2015/internal/util/isObservable.js","./node_modules/@angular/cdk/fesm2015/collections.mjs","./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/cdk/fesm2015/portal.mjs","./node_modules/@angular/cdk/fesm2015/text-field.mjs","./node_modules/@angular/cdk/fesm2015/tree.mjs","./node_modules/@angular/material/fesm2015/badge.mjs","./node_modules/@angular/material/fesm2015/button.mjs","./node_modules/@angular/material/fesm2015/card.mjs","./node_modules/@angular/material/fesm2015/dialog.mjs","./node_modules/@angular/material/fesm2015/divider.mjs","./node_modules/@angular/cdk/fesm2015/accordion.mjs","./node_modules/@angular/material/fesm2015/expansion.mjs","./node_modules/@angular/material/fesm2015/form-field.mjs","./node_modules/@angular/common/fesm2015/http.mjs","./node_modules/@angular/material/fesm2015/icon.mjs","./node_modules/@angular/material/fesm2015/input.mjs","./node_modules/@angular/material/fesm2015/list.mjs","./node_modules/rxjs/_esm2015/internal/operators/delay.js","./node_modules/rxjs/_esm2015/internal/util/isDate.js","./node_modules/@angular/material/fesm2015/menu.mjs","./node_modules/@angular/material/fesm2015/tooltip.mjs","./node_modules/@angular/material/fesm2015/paginator.mjs","./node_modules/@angular/material/fesm2015/radio.mjs","./node_modules/@angular/material/fesm2015/select.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs","./node_modules/@angular/material/fesm2015/sort.mjs","./node_modules/@angular/cdk/fesm2015/table.mjs","./node_modules/@angular/material/fesm2015/table.mjs","./node_modules/@angular/material/fesm2015/tree.mjs"],"sourcesContent":["/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR,\r\n  ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { EntityFormGroupFactoryService } from 'src/app/shared/entity-form-group-factory.service';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\n\r\n@Component({\r\n  selector: 'app-image-form',\r\n  templateUrl: './image-form.component.html',\r\n  styleUrls: [ './image-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ImageFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ImageFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class ImageFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get filename() { return this.formGroup.get('filename') as FormControl; }\r\n  get url() { return this.formGroup.get('url') as FormControl; }\r\n  get code() { return this.formGroup.get('code') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('image');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.filename.reset('', { emitEvent: false });\r\n      this.url.reset('', { emitEvent: false });\r\n      this.code.reset('', { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable();\r\n      } else {\r\n        this.formGroup.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.filename.errors) {\r\n      errors.imageFilename = this.filename.errors;\r\n    }\r\n    if (this.url.errors) {\r\n      errors.imageUrl = this.url.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"filename\">\r\n    <input matInput formControlName=\"filename\"\r\n      placeholder=\"Filename\"\r\n      i18n-placeholder=\"Name of field for image filename\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"url\">\r\n    <input matInput formControlName=\"url\"\r\n      placeholder=\"Url\"\r\n      i18n-placeholder=\"Name of field for image url\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"code\">\r\n    <input matInput formControlName=\"code\"\r\n      placeholder=\"Code\"\r\n      i18n-placeholder=\"Name of field for image code\" />\r\n  </mat-form-field>\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR,\r\n  ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { EntityFormGroupFactoryService } from '../../../shared/entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-product-list-form',\r\n  templateUrl: './product-list-form.component.html',\r\n  styleUrls: [ './product-list-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ProductListFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ProductListFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class ProductListFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get code() { return this.formGroup.get('code') as FormControl; }\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n  get totalCount() { return this.formGroup.get('totalCount') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('productList');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.code.reset('', { emitEvent: false });\r\n      this.name.reset('', { emitEvent: false });\r\n      this.totalCount.reset(0, { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable();\r\n      } else {\r\n        this.formGroup.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.code.errors) {\r\n      errors.productListCode = this.code.errors;\r\n    }\r\n    if (this.name.errors) {\r\n      errors.productListName = this.name.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"code\">\r\n    <input matInput formControlName=\"code\"\r\n      placeholder=\"Code\"\r\n      i18n-placeholder=\"Name of field for the identifying code of a list\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"name\">\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"Name\"\r\n      i18n-placeholder=\"Name of field for the name of a list\" />\r\n  </mat-form-field>\r\n\r\n  <input formControlName=\"totalCount\" type=\"hidden\"\r\n    placeholder=\"Count\"\r\n    i18n-placeholder=\"Name of field for the amount of items in a list\" />\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR, ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { EntityFormGroupFactoryService } from '../../../shared/entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-shipper-form',\r\n  templateUrl: './shipper-form.component.html',\r\n  styleUrls: ['./shipper-form.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ShipperFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ShipperFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class ShipperFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('shipper');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.name.reset('', { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable({ emitEvent: false });\r\n      } else {\r\n        this.formGroup.enable({ emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.name.errors) {\r\n      errors.shipperName = this.name.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"name\">\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"Name\"\r\n      i18n-placeholder=\"Name of field for the identifiying name of a shipper or shipping service\"\r\n      (blur)=\"onTouched()\" />\r\n  </mat-form-field>\r\n</fieldset>\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field>\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"User name\"\r\n      i18n-placeholder=\"Name of field for user name\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field>\r\n    <input matInput formControlName=\"password\" type=\"password\"\r\n      placeholder=\"Password\"\r\n      i18n-placeholder=\"Name of field for user password\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field>\r\n    <mat-select formControlName=\"person\"\r\n      placeholder=\"Identity\"\r\n      i18n-placeholder=\"Name of field for person profile to create user with\">\r\n      <mat-option *ngFor=\"let p of (people$ | async)\"\r\n        [value]=\"p.idNumber\">{{\r\n          p.firstName + \" \" +\r\n          p.lastName + \" (\" + p.idNumber + \")\"\r\n        }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <mat-form-field>\r\n    <mat-select formControlName=\"role\"\r\n      placeholder=\"Role\"\r\n      i18n-placeholder=\"Name of field for permissions role to create user with\">\r\n      <mat-option *ngFor=\"let r of (roles$ | async)\"\r\n        [value]=\"r.name\">{{ r.name }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR,\r\n  ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { debounceTime, map, tap } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { IEntityDataApiService } from 'src/app/api/entity.data-api.iservice';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { Person } from 'src/models/entities/Person';\r\nimport { UserRole } from 'src/models/entities/UserRole';\r\nimport { EntityFormGroupFactoryService } from '../../../shared/entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-user-form',\r\n  templateUrl: './user-form.component.html',\r\n  styleUrls: [ './user-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: UserFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: UserFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class UserFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  people$: Observable<Person[]>;\r\n  roles$: Observable<UserRole[]>;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n  get password() { return this.formGroup.get('password') as FormControl; }\r\n  get person() { return this.formGroup.get('person') as FormControl; }\r\n  get role() { return this.formGroup.get('role') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataPeople) protected peopleDataApiService: IEntityDataApiService<Person>,\r\n    @Inject(API_INJECTION_TOKENS.dataUserRoles) protected userRolesDataApiService: IEntityDataApiService<UserRole>,\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('user');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n    this.people$ = this.peopleDataApiService.fetchPage().pipe(map(page => page.items));\r\n    this.roles$ = this.userRolesDataApiService.fetchPage().pipe(map(page => page.items));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.name.reset('', { emitEvent: false });\r\n      this.password.reset('', { emitEvent: false });\r\n      this.person.reset(null, { emitEvent: false });\r\n      this.role.reset(null, { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable({ emitEvent: false });\r\n      } else {\r\n        this.formGroup.enable({ emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.name.errors) {\r\n      errors.userName = this.name.errors;\r\n    }\r\n    if (this.person.errors) {\r\n      errors.userPerson = this.person.errors;\r\n    }\r\n    if (this.role.errors) {\r\n      errors.userRole = this.role.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 mat-dialog-title>{{ dialogTitle }}</h2>\r\n<app-centered-mat-spinner *ngIf=\"busy$ | async\">\r\n</app-centered-mat-spinner>\r\n\r\n<div [hidden]=\"busy$ | async\">\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit()\">\r\n    <ng-container [ngSwitch]=\"data.entityType\">\r\n      <app-address-form *ngSwitchCase=\"'address'\"\r\n        formControlName=\"item\">\r\n      </app-address-form>\r\n      <app-image-form *ngSwitchCase=\"'image'\"\r\n        formControlName=\"item\">\r\n      </app-image-form>\r\n      <app-person-form *ngSwitchCase=\"'person'\"\r\n        formControlName=\"item\">\r\n      </app-person-form>\r\n      <app-product-form *ngSwitchCase=\"'product'\"\r\n        formControlName=\"item\">\r\n      </app-product-form>\r\n      <app-product-category-form *ngSwitchCase=\"'productCategory'\"\r\n        formControlName=\"item\">\r\n      </app-product-category-form>\r\n      <app-product-list-form *ngSwitchCase=\"'productList'\"\r\n        formControlName=\"item\">\r\n      </app-product-list-form>\r\n      <app-shipper-form *ngSwitchCase=\"'shipper'\"\r\n        formControlName=\"item\">\r\n      </app-shipper-form>\r\n      <app-user-form *ngSwitchCase=\"'user'\"\r\n        formControlName=\"item\">\r\n      </app-user-form>\r\n      <div *ngSwitchDefault>\r\n        <p>Invalid or unsupported element type!</p>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"actions\">\r\n      <button mat-button mat-raised-button type=\"submit\"\r\n        color=\"primary\"\r\n        i18n=\"confirm|Label for action button to accept and proceed\">Confirm</button>\r\n      <button mat-button mat-raised-button type=\"button\"\r\n        i18n=\"cancel|Label for action button to cancel and/or stop an operation\"\r\n        (click)=\"onCancel()\">Cancel</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE, COMMON_VALIDATION_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogData } from './EntityFormDialogData';\r\n\r\n/**\r\n * Component acting as a bridge between the MatDialog service and any\r\n * component that extends FormGroupOwnerOutlet\r\n */\r\n@Component({\r\n  selector: 'app-entity-form-dialog',\r\n  templateUrl: './entity-form-dialog.component.html',\r\n  styleUrls: [ './entity-form-dialog.component.css' ]\r\n})\r\nexport class EntityFormDialogComponent<T>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private formSubmissionSub: Subscription;\r\n  private busySource = new BehaviorSubject(false);\r\n  private successMessage: (item: T) => string;\r\n\r\n  busy$ = this.busySource.asObservable();\r\n\r\n  dialogTitle: string;\r\n\r\n  formGroup: FormGroup;\r\n  get item() { return this.formGroup?.get('item') as FormControl; }\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: Partial<EntityFormDialogData<T>>,\r\n    private dialog: MatDialogRef<EntityFormDialogComponent<T>>,\r\n    private snackBarService: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.dialogTitle = this.data.dialogTitle ?\r\n      this.data.dialogTitle :\r\n      $localize`:Title of dialog used to view and edit some data:Element data`;\r\n\r\n    this.successMessage = this.data.successMessage ?\r\n      this.data.successMessage :\r\n      () => $localize`:Message of success after saving some data:Data saved successfully`;\r\n\r\n    if (this.data.entityType) {\r\n      this.formGroup = new FormGroup({\r\n        item: new FormControl(this.data.item || null, Validators.required)\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.formSubmissionSub?.unsubscribe();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.formGroup.invalid) {\r\n      this.formGroup.markAsTouched();\r\n      this.snackBarService.open(COMMON_VALIDATION_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n    } else {\r\n      this.busySource.next(true);\r\n      if (this.data.apiService) {\r\n        this.formSubmissionSub?.unsubscribe();\r\n        this.formSubmissionSub = this.doSubmit().subscribe();\r\n      } else {\r\n        this.dialog.close(this.item.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  private doSubmit() {\r\n    return ((!this.data.isNewItem && this.data.item) ?\r\n      this.data.apiService.update(this.item.value as T, this.data.item) :\r\n      this.data.apiService.create(this.item.value as T)\r\n    ).pipe(\r\n      tap(\r\n        () => {\r\n          const message = this.successMessage(this.item.value);\r\n          this.snackBarService.open(message, COMMON_DISMISS_BUTTON_LABEL);\r\n          this.dialog.close();\r\n        },\r\n        err => {\r\n          this.busySource.next(false);\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR,\r\n  ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { EntityFormGroupFactoryService } from '../../../shared/entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-form',\r\n  templateUrl: './product-category-form.component.html',\r\n  styleUrls: [ './product-category-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ProductCategoryFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ProductCategoryFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class ProductCategoryFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get code() { return this.formGroup.get('code') as FormControl; }\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n  get parent() { return this.formGroup.get('parent') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('productCategory');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.code.reset('', { emitEvent: false });\r\n      this.name.reset('', { emitEvent: false });\r\n      this.parent.reset(null, { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable();\r\n      } else {\r\n        this.code.enable();\r\n        this.name.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.code.errors) {\r\n      errors.categoryCode = this.code.errors;\r\n    }\r\n    if (this.name.errors) {\r\n      errors.categoryName = this.name.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"code\">\r\n    <input matInput formControlName=\"code\"\r\n      placeholder=\"Code\"\r\n      i18n-placeholder=\"Name of field for the identifying code of a category\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"name\">\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"Name\"\r\n      i18n-placeholder=\"Name of field for the name of a category\" />\r\n  </mat-form-field>\r\n\r\n  <app-product-category-selector-field class=\"parent\"\r\n    formControlName=\"parent\"\r\n    placeholder=\"Parent\"\r\n    i18n-placeholder=\"Name of field that references the containing parent of a category\">\r\n  </app-product-category-selector-field>\r\n</fieldset>\r\n","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n}\nclass ThrottleOperator {\n    constructor(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    }\n}\nclass ThrottleSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector, _leading, _trailing) {\n        super(destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasValue = false;\n    }\n    _next(value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    }\n    send() {\n        const { _hasValue, _sendValue } = this;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = undefined;\n    }\n    throttle(value) {\n        const duration = this.tryDurationSelector(value);\n        if (!!duration) {\n            this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n        }\n    }\n    tryDurationSelector(value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    }\n    throttlingDone() {\n        const { _throttled, _trailing } = this;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = undefined;\n        if (_trailing) {\n            this.send();\n        }\n    }\n    notifyNext() {\n        this.throttlingDone();\n    }\n    notifyComplete() {\n        this.throttlingDone();\n    }\n}\n","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler = async, config = defaultThrottleConfig) {\n    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\nclass ThrottleTimeOperator {\n    constructor(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    }\n}\nclass ThrottleTimeSubscriber extends Subscriber {\n    constructor(destination, duration, scheduler, leading, trailing) {\n        super(destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    _next(value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n            else if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n    }\n    _complete() {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    clearThrottle() {\n        const throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    }\n}\nfunction dispatchNext(arg) {\n    const { subscriber } = arg;\n    subscriber.clearThrottle();\n}\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, concat, from, of, ReplaySubject } from 'rxjs';\r\nimport { finalize, ignoreElements, map, switchMap, take, tap } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { IEntityDataApiService } from 'src/app/api/entity.data-api.iservice';\r\nimport { DataPage } from 'src/models/DataPage';\r\nimport { Image } from 'src/models/entities/Image';\r\n\r\n@Injectable()\r\nexport class ImagesArrayDialogService {\r\n\r\n  private loadingSource = new BehaviorSubject(false);\r\n  private pageSource = new ReplaySubject<DataPage<Image>>(1);\r\n  private selectedImagesSource = new BehaviorSubject<Image[]>([]);\r\n\r\n  loading$ = this.loadingSource.asObservable();\r\n  page$ = this.pageSource.asObservable();\r\n  selectedImages$ = this.selectedImagesSource.asObservable();\r\n\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n  sortBy: string;\r\n  order: string;\r\n  filter: string;\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataImages) private imageDataService: IEntityDataApiService<Image>\r\n  ) { }\r\n\r\n  /** Empty item selections and fetch data from the external service again. */\r\n  reloadItems() {\r\n    this.loadingSource.next(true);\r\n    const apiFilters = this.filter ? { filenameLike: this.filter } : undefined;\r\n    return this.imageDataService.fetchPage(this.pageIndex, this.pageSize, this.sortBy, this.order, apiFilters).pipe(\r\n      tap(page => this.pageSource.next(page)),\r\n      ignoreElements(),\r\n      finalize(() => this.loadingSource.next(false))\r\n    );\r\n  }\r\n\r\n  updateSelection(options: { selected?: Image[], unselected?: Image[] }) {\r\n    return this.selectedImages$.pipe(\r\n      take(1),\r\n      map(selectedImages => {\r\n        const productArraySet = new Set([...selectedImages, ...options.selected]);\r\n        return [...productArraySet.values()];\r\n      }),\r\n      switchMap(selectedImages => from(options.unselected || []).pipe(\r\n        tap(img => {\r\n          const matchingIndex = selectedImages.findIndex(img2 => img.url === img2.url)\r\n          if (matchingIndex !== -1) {\r\n            selectedImages.splice(matchingIndex, 1);\r\n          }\r\n        }),\r\n        ignoreElements(),\r\n        finalize(() => this.selectedImagesSource.next(selectedImages))\r\n      )),\r\n    );\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 i18n=\"Title of dialog to associate images to a product\">Associate Images</h2>\r\n<mat-form-field class=\"search\" appearance=\"fill\">\r\n  <mat-label i18n=\"Name of field for filtering all stored images by keyword\">Search by keyword</mat-label>\r\n  <input matInput type=\"text\" [formControl]=\"filterFormControl\" />\r\n</mat-form-field>\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async; else loaded\">\r\n</app-centered-mat-spinner>\r\n<ng-template #loaded>\r\n  <div class=\"list-wrapper\">\r\n    <mat-selection-list (selectionChange)=\"onSelectionChange($event)\">\r\n      <mat-list-option *ngFor=\"let opt of (options$ | async)\"\r\n        [value]=\"opt.image\"\r\n        [selected]=\"opt.selected\"\r\n        [disabled]=\"opt.disabled\">\r\n        <img matListIcon [src]=\"opt.image.url\" alt=\"\">\r\n        <p matLine>{{ opt.image.filename }}</p>\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n  </div>\r\n</ng-template>\r\n<div>\r\n  <mat-paginator\r\n    (page)=\"onPage($event)\"\r\n    [showFirstLastButtons]=\"true\"\r\n    [pageSizeOptions]=\"pageSizeOptions\"\r\n    [length]=\"totalCount$ | async\">\r\n  </mat-paginator>\r\n</div>\r\n<div class=\"actions\">\r\n  <button mat-button mat-raised-button type=\"button\"\r\n    [mat-dialog-close]=\"selectedImages\"\r\n    i18n=\"confirm|Label for action button to accept and proceed\">Confirm</button>\r\n  <button mat-button mat-raised-button type=\"button\"\r\n    color=\"warn\"\r\n    mat-dialog-close\r\n    i18n=\"cancel|Label for action button to cancel and/or stop an operation\">Cancel</button>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSelectionListChange } from '@angular/material/list';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, map, tap, throttleTime } from 'rxjs/operators';\r\nimport { Image } from 'src/models/entities/Image';\r\nimport { ImageArrayOption } from './ImageArrayOption';\r\nimport { ImagesArrayDialogService } from './images-array-dialog.service';\r\nimport { ImagesArrayDialogData } from './ImagesArrayDialogData';\r\n\r\n@Component({\r\n  selector: 'app-images-array-dialog',\r\n  templateUrl: './images-array-dialog.component.html',\r\n  styleUrls: ['./images-array-dialog.component.css'],\r\n  providers: [ ImagesArrayDialogService ]\r\n})\r\nexport class ImagesArrayDialogComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private selectedImagesSub: Subscription;\r\n  private selectionChangeSub: Subscription;\r\n  private fetchingSubscription: Subscription;\r\n  private filterChangesSub: Subscription;\r\n  private filterChangeNotifier = new Subject<void>();\r\n\r\n  selectedImages: Image[];\r\n  filterFormControl = new FormControl();\r\n  pageSizeOptions = [10, 20, 50];\r\n  loading$: Observable<boolean>;\r\n  options$: Observable<ImageArrayOption[]>;\r\n  totalCount$: Observable<number>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: ImagesArrayDialogData,\r\n    private service: ImagesArrayDialogService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data?.existing?.length > 0) {\r\n      this.service.updateSelection({\r\n        selected: this.data.existing,\r\n        unselected: []\r\n      });\r\n    }\r\n    this.selectedImagesSub = this.service.selectedImages$.pipe(\r\n      tap(v => { this.selectedImages = v; })\r\n    ).subscribe();\r\n    this.filterChangesSub = merge(\r\n      this.filterFormControl.valueChanges.pipe(\r\n        throttleTime(500),\r\n        tap(() => this.filterChangeNotifier.next())\r\n      ),\r\n      this.filterFormControl.valueChanges.pipe(\r\n        debounceTime(500),\r\n        tap((filter: string) => {\r\n          this.service.filter = filter;\r\n          this.service.pageIndex = 0;\r\n          this.reload();\r\n        })\r\n      )\r\n    ).subscribe();\r\n    this.loading$ = merge(\r\n      this.filterChangeNotifier.pipe(\r\n        map(() => true)\r\n      ),\r\n      this.service.loading$.pipe()\r\n    );\r\n    this.options$ = this.service.page$.pipe(\r\n      map(page => page.items.map(image => ({\r\n        image,\r\n        selected: this.selectedImages.some(img => (img.url === image.url)),\r\n        disabled: false\r\n      })))\r\n    );\r\n    this.totalCount$ = this.service.page$.pipe(\r\n      map(page => page.totalCount)\r\n    );\r\n    this.service.pageSize = this.pageSizeOptions[0];\r\n    this.reload();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.selectedImagesSub.unsubscribe();\r\n    this.filterChangesSub.unsubscribe();\r\n    this.filterChangeNotifier.complete();\r\n    this.selectionChangeSub?.unsubscribe();\r\n    this.fetchingSubscription?.unsubscribe();\r\n  }\r\n\r\n  onSelectionChange(event: MatSelectionListChange) {\r\n    this.selectionChangeSub?.unsubscribe();\r\n    this.selectionChangeSub = this.service.updateSelection({\r\n      selected: event.options.filter(o => o.selected)\r\n        .map(o => o.value as Image),\r\n      unselected: event.options.filter(o => !o.selected)\r\n        .map(o => o.value as Image)\r\n    }).subscribe();\r\n  }\r\n\r\n  onPage(event: PageEvent) {\r\n    this.service.pageIndex = event.pageIndex;\r\n    this.service.pageSize = event.pageSize;\r\n    this.reload();\r\n  }\r\n\r\n  reload() {\r\n    this.fetchingSubscription?.unsubscribe();\r\n    this.fetchingSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR, ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { ImagesArrayDialogComponent } from 'src/app/management/dialogs/images-array/images-array-dialog.component';\r\nimport { ImagesArrayDialogData } from 'src/app/management/dialogs/images-array/ImagesArrayDialogData';\r\nimport { EntityFormGroupFactoryService } from 'src/app/shared/entity-form-group-factory.service';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { Image } from 'src/models/entities/Image';\r\n\r\n@Component({\r\n  selector: 'app-product-form',\r\n  templateUrl: './product-form.component.html',\r\n  styleUrls: [ './product-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ProductFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ProductFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class ProductFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get images() { return this.formGroup.get('images') as FormControl; }\r\n  get barcode() { return this.formGroup.get('barcode') as FormControl; }\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n  get category() { return this.formGroup.get('category') as FormControl; }\r\n  get price() { return this.formGroup.get('price') as FormControl; }\r\n  // get stock() { return this.formGroup.get('stock') as FormControl; }\r\n  // get criticalStock() { return this.formGroup.get('criticalStock') as FormControl; }\r\n  get description() { return this.formGroup.get('description') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService,\r\n    private dialogService: MatDialog\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('product');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.images.reset([], { emitEvent: false });\r\n      this.barcode.reset('', { emitEvent: false });\r\n      this.name.reset('', { emitEvent: false });\r\n      this.category.reset(null, { emitEvent: false });\r\n      this.price.reset('', { emitEvent: false });\r\n      // this.stock.reset('', { emitEvent: false });\r\n      // this.criticalStock.reset('', { emitEvent: false });\r\n      this.description.reset('', { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable({ emitEvent: false });\r\n      } else {\r\n        this.formGroup.enable({ emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.barcode.errors) {\r\n      errors.productBarcode = this.barcode.errors;\r\n    }\r\n    if (this.name.errors) {\r\n      errors.productName = this.name.errors;\r\n    }\r\n    if (this.price.errors) {\r\n      errors.productPrice = this.price.errors;\r\n    }\r\n    if (this.category.errors) {\r\n      errors.productCategory = this.category.errors;\r\n    }\r\n    if (this.description.errors) {\r\n      errors.productDescription = this.description.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n  onClickAddImage(): void {\r\n    const data: ImagesArrayDialogData = {\r\n      existing: this.images.value\r\n    };\r\n    this.dialogService.open(\r\n      ImagesArrayDialogComponent,\r\n      {\r\n        data\r\n      }\r\n    ).afterClosed().pipe(\r\n      tap((images: Image[]) => {\r\n        if (images && images.length) {\r\n          this.images.setValue(images);\r\n        }\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <app-slideshow class=\"images\"\r\n    formControlName=\"images\"\r\n    [automaticSlide]=\"false\"\r\n    [editable]=\"true\"\r\n    (add)=\"onClickAddImage()\">\r\n  </app-slideshow>\r\n\r\n  <mat-form-field class=\"barcode\">\r\n    <input matInput formControlName=\"barcode\"\r\n      placeholder=\"Code\"\r\n      i18n-placeholder=\"Name of field for product code\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"name\">\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"Name\"\r\n      i18n-placeholder=\"Name of field for product name\" />\r\n  </mat-form-field>\r\n\r\n  <app-product-category-selector-field class=\"category\"\r\n    formControlName=\"category\">\r\n  </app-product-category-selector-field>\r\n\r\n  <mat-form-field class=\"price\">\r\n    <input matInput formControlName=\"price\"\r\n      placeholder=\"Price\"\r\n      i18n-placeholder=\"Name of field for product price\" />\r\n  </mat-form-field>\r\n\r\n  <!-- <mat-form-field class=\"stock\">\r\n    <input matInput formControlName=\"stock\"\r\n      placeholder=\"Current stock\"\r\n      i18n-placeholder=\"Name of field for product units currently held in stock\" />\r\n  </mat-form-field> -->\r\n\r\n  <!-- <mat-form-field class=\"cStock\">\r\n    <input matInput formControlName=\"criticalStock\"\r\n      placeholder=\"Low stock treshold\"\r\n      i18n-placeholder=\"Name of field for lowest allowed product units treshold before raising alert of low stock\" />\r\n  </mat-form-field> -->\r\n\r\n  <mat-form-field class=\"desc\">\r\n    <textarea matInput formControlName=\"description\"\r\n      placeholder=\"Description\"\r\n      i18n-placeholder=\"Name of field for product description\"></textarea>\r\n  </mat-form-field>\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, Type } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-dialog-switcher-button',\r\n  templateUrl: './dialog-switcher-button.component.html',\r\n  styleUrls: ['./dialog-switcher-button.component.css']\r\n})\r\nexport class DialogSwitcherButtonComponent {\r\n\r\n  @Input() public label: string;\r\n  @Input() public sourceDialogRef: MatDialogRef<any>;\r\n  @Input() public targetDialogComponent: Type<any>;\r\n  @Input() public targetDialogConfig: MatDialogConfig<any>;\r\n\r\n  constructor(\r\n    protected dialogService: MatDialog\r\n  ) {\r\n  }\r\n\r\n  public onClick(): void {\r\n    this.sourceDialogRef.close();\r\n    this.dialogService.open(\r\n      this.targetDialogComponent,\r\n      this.targetDialogConfig\r\n    );\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<button type=\"button\"\r\n  mat-button\r\n  (click)=\"onClick()\">\r\n  {{ label }}\r\n</button>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-gmap',\r\n  templateUrl: './gmap.component.html',\r\n  styleUrls: ['./gmap.component.css']\r\n})\r\nexport class GmapComponent {\r\n\r\n  url = '';\r\n  @Input() set id(value: string) { this.url = `https://www.google.com/maps/embed?pb=${value}`; }\r\n  @Input() width: number = 600;\r\n  @Input() height: number = 450;\r\n\r\n  constructor() {\r\n    this.id = environment.googleMapsId;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<div class=\"gmap\"\r\n  [style.height.px]=\"height\">\r\n  <iframe [src]=\"url | trustedResourceUrl\"\r\n    [width]=\"width\"\r\n    [height]=\"height\"\r\n    frameborder=\"0\"\r\n    allowfullscreen=\"true\"\r\n    aria-hidden=\"false\"\r\n    tabindex=\"0\">\r\n  </iframe>\r\n</div>\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<a routerLink=\"/\">\r\n  <img *ngIf=\"appLogo?.url; else title\"\r\n    [src]=\"appLogo.url\"\r\n    [alt]=\"appTitle\" />\r\n  <ng-template #title>\r\n    <h1>{{ appTitle }}</h1>\r\n  </ng-template>\r\n</a>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Image } from 'src/models/entities/Image';\r\n\r\n@Component({\r\n  selector: 'app-header-brand',\r\n  templateUrl: './header-brand.component.html',\r\n  styleUrls: ['./header-brand.component.css']\r\n})\r\nexport class HeaderBrandComponent {\r\n\r\n  readonly appTitle: string = environment.labels.name;\r\n  readonly appLogo: Image = environment.staticImages.logo;\r\n\r\n  constructor() { }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Image } from './Image';\r\nimport { ProductCategory } from './ProductCategory';\r\n\r\nexport class Product {\r\n  name: string;\r\n  barcode: string;\r\n  price: number;\r\n  category: Partial<ProductCategory>;\r\n  description?: string;\r\n  // currentStock?: number;\r\n  // criticalStock?: number;\r\n  images?: Image[];\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-card>\r\n  <div class=\"content\" (click)=\"onClickViewProduct()\">\r\n    <mat-card-title>{{ product.name }}</mat-card-title>\r\n    <mat-card-subtitle>{{ product.barcode }}</mat-card-subtitle>\r\n    <ng-container *ngIf=\"product.images?.length; else noImageAvailable\">\r\n      <img [src]=\"product.images[0].url\" [alt]=\"product.name\" />\r\n    </ng-container>\r\n    <ng-template #noImageAvailable>\r\n      <img [src]=\"stockImageUrl\"\r\n        alt=\"Unavailable image\"\r\n        i18n-alt=\"Label to describe a missing or unavailable image\" />\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"footer\">\r\n    <span class=\"price\">{{ product.price | currency }}</span>\r\n    <button mat-mini-fab type=\"button\"\r\n      *ngIf=\"showAddToCartButton\"\r\n      class=\"add-to-cart\"\r\n      color=\"primary\"\r\n      (click)=\"onClickAddProduct()\">\r\n      <mat-icon>add_shopping_cart</mat-icon>\r\n    </button>\r\n  </div>\r\n</mat-card>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Product } from 'src/models/entities/Product';\r\n\r\n@Component({\r\n  selector: 'app-product-card',\r\n  templateUrl: './product-card.component.html',\r\n  styleUrls: ['./product-card.component.css']\r\n})\r\nexport class ProductCardComponent {\r\n\r\n  readonly stockImageUrl = environment.staticImages.defaultProductImage.url;\r\n\r\n  @Input() product = new Product();\r\n  @Input() showAddToCartButton = false;\r\n  @Output() addToCart = new EventEmitter<void>();\r\n  @Output() view = new EventEmitter<void>();\r\n\r\n  constructor() { }\r\n\r\n  onClickAddProduct(): void {\r\n    this.addToCart.emit();\r\n  }\r\n\r\n  onClickViewProduct(): void {\r\n    this.view.emit();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nexport class ProductCategoryTreeFlatNode {\r\n  name: string;\r\n  level: number;\r\n  expandable: boolean;\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding\r\n    [class.selectable]=\"selectionEnabled\"\r\n    (click)=\"onClickTreeNode(node)\">\r\n    <button mat-icon-button disabled></button>\r\n    <span class=\"name\">{{node.name}}</span>\r\n    <button mat-icon-button type=\"button\" class=\"edit\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"editNodeLabel(node)\"\r\n      [attr.aria-label]=\"editNodeLabel(node)\"\r\n      (click)=\"onClickEditNode(node)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button type=\"button\" class=\"add-child\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"addChildNodeLabel(node)\"\r\n      [attr.aria-label]=\"addChildNodeLabel(node)\"\r\n      (click)=\"onClickAddChildNodeTo(node)\">\r\n      <mat-icon>playlist_add</mat-icon>\r\n    </button>\r\n    <button mat-icon-button type=\"button\" class=\"delete\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"deleteNodeLabel(node)\"\r\n      [attr.aria-label]=\"deleteNodeLabel(node)\"\r\n      (click)=\"onClickDeleteNode(node)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding\r\n    [class.selectable]=\"selectionEnabled\"\r\n    (click)=\"onClickTreeNode(node)\">\r\n    <button mat-icon-button type=\"button\" class=\"toggle\"\r\n      matTreeNodeToggle\r\n      [attr.title]=\"toggleNodeLabel(node)\"\r\n      [attr.aria-label]=\"toggleNodeLabel(node)\">\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n    </button>\r\n    <span class=\"name\">{{node.name}}</span>\r\n    <button mat-icon-button type=\"button\" class=\"edit\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"editNodeLabel(node)\"\r\n      [attr.aria-label]=\"editNodeLabel(node)\"\r\n      (click)=\"onClickEditNode(node)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button type=\"button\" class=\"add-child\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"addChildNodeLabel(node)\"\r\n      [attr.aria-label]=\"addChildNodeLabel(node)\"\r\n      (click)=\"onClickAddChildNodeTo(node)\">\r\n      <mat-icon>playlist_add</mat-icon>\r\n    </button>\r\n    <button mat-icon-button type=\"button\" class=\"delete\"\r\n      *ngIf=\"editable\"\r\n      [attr.title]=\"deleteNodeLabel(node)\"\r\n      [attr.aria-label]=\"deleteNodeLabel(node)\"\r\n      (click)=\"onClickDeleteNode(node)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </mat-tree-node>\r\n</mat-tree>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTree, MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { Observable, Subscription, timer } from 'rxjs';\r\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { COMMON_DISMISS_BUTTON_LABEL } from 'src/text/messages';\r\nimport { EntityFormDialogComponent } from '../../../management/dialogs/entity-form/entity-form-dialog.component';\r\nimport { EntityFormDialogData } from '../../../management/dialogs/entity-form/EntityFormDialogData';\r\nimport { SharedDialogService } from '../../dialogs/shared-dialog.service';\r\nimport { ProductCategoryTreeService } from './product-category-tree.service';\r\nimport { ProductCategoryTreeFlatNode } from './ProductCategoryTreeFlatNode';\r\n\r\n@Component({\r\n  selector: 'app-product-category-tree',\r\n  templateUrl: './product-category-tree.component.html',\r\n  styleUrls: ['./product-category-tree.component.css']\r\n})\r\nexport class ProductCategoryTreeComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n  private dataLoadingSubscription: Subscription;\r\n  private dataChangesSubscription: Subscription;\r\n  private treeFlattener: MatTreeFlattener<ProductCategory, ProductCategoryTreeFlatNode>;\r\n\r\n  @Input() editable = false;\r\n  @Input() selectionEnabled = false;\r\n  @Output() selection = new EventEmitter<ProductCategory>();\r\n\r\n  dataSource: MatTreeFlatDataSource<ProductCategory, ProductCategoryTreeFlatNode>;\r\n  treeControl: FlatTreeControl<ProductCategoryTreeFlatNode>;\r\n  nestedNodeMap: Map<ProductCategory, ProductCategoryTreeFlatNode>;\r\n  flatNodeMap: Map<ProductCategoryTreeFlatNode, ProductCategory>;\r\n\r\n  @ViewChild(MatTree, { static: true }) matTree: MatTree<ProductCategory>;\r\n\r\n  constructor(\r\n    private service: ProductCategoryTreeService,\r\n    private snackbarService: MatSnackBar,\r\n    private dialogService: MatDialog,\r\n    private sharedDialogService: SharedDialogService\r\n  ) {\r\n    this.treeControl = new FlatTreeControl(\r\n      (node: ProductCategoryTreeFlatNode) => node.level,\r\n      (node: ProductCategoryTreeFlatNode) => node.expandable);\r\n    this.treeFlattener = new MatTreeFlattener(\r\n      (category: ProductCategory, level: number) => this.transformer(category, level),\r\n      (node: ProductCategoryTreeFlatNode) => node.level,\r\n      (node: ProductCategoryTreeFlatNode) => node.expandable,\r\n      (category: ProductCategory) => category.children);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n    this.nestedNodeMap = new Map<ProductCategory, ProductCategoryTreeFlatNode>();\r\n    this.flatNodeMap = new Map<ProductCategoryTreeFlatNode, ProductCategory>();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.dataLoadingSubscription = this.service.reloadCategories().subscribe();\r\n    this.dataChangesSubscription = this.service.categories$.pipe(\r\n      tap(next => {\r\n        this.nestedNodeMap.clear();\r\n        this.flatNodeMap.clear();\r\n        this.dataSource.data = next;\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.dataLoadingSubscription?.unsubscribe();\r\n    this.dataChangesSubscription?.unsubscribe();\r\n    this.selection.complete();\r\n  }\r\n\r\n  hasChild = (_: number, node: ProductCategoryTreeFlatNode) => (node.expandable);\r\n\r\n  toggleNodeLabel = (n: ProductCategoryTreeFlatNode) => ($localize`:Label for action button to show or hide subcategories of parent of name {{ parentName }}:Expand/collapse '${n.name}:parentName:'`);\r\n  addChildNodeLabel = (n: ProductCategoryTreeFlatNode) => ($localize`:Label for action button to create a subcategory in parent of name {{ parentName }}:New subcategory in '${n.name}:parentName:'`);\r\n  editNodeLabel = (n: ProductCategoryTreeFlatNode) => ($localize`:Label for action button to edit category of name {{ name }}:Edit category '${n.name}:name:'`);\r\n  deleteNodeLabel = (n: ProductCategoryTreeFlatNode) => ($localize`:Label for action button to delete category of name {{ name }}:Delete category '${n.name}:name:'`);\r\n\r\n  onClickAddChildNodeTo(parentNode: ProductCategoryTreeFlatNode): void {\r\n    if (this.editable) {\r\n      const category = this.flatNodeMap.get(parentNode);\r\n      if (category) {\r\n        this.actionSubscription?.unsubscribe();\r\n        this.actionSubscription = this.requestCategoryData({\r\n          item: {\r\n            parent: {\r\n              code: category.code,\r\n              name: category.name\r\n            }\r\n          } as ProductCategory\r\n        }).pipe(\r\n          switchMap(newNode => this.service.add(newNode)),\r\n          tap(\r\n            next => {\r\n              this.treeControl.expand(parentNode);\r\n              this.snackbarService.open($localize`:Message of success after creating subcategory with name {{ name }}:Subcategory '${next.name}:name:' was created`, COMMON_DISMISS_BUTTON_LABEL);\r\n            },\r\n            error => {\r\n              this.snackbarService.open($localize`:Message of error during creation of subcategory:Subcategory could not be created`, COMMON_DISMISS_BUTTON_LABEL);\r\n            }\r\n          )\r\n        ).subscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  onClickEditNode(treeNode: ProductCategoryTreeFlatNode): void {\r\n    if (this.editable) {\r\n      const category = this.flatNodeMap.get(treeNode);\r\n      this.actionSubscription?.unsubscribe();\r\n      this.actionSubscription = this.requestCategoryData({\r\n        item: category,\r\n        isNewItem: false\r\n      }).pipe(\r\n        switchMap(result => this.service.edit(result, category)),\r\n        tap(\r\n          (next: ProductCategory) => {\r\n            this.snackbarService.open($localize`:Message of success after renaming category to {{ name }}:Category was renamed to '${next.name}:name:'`, COMMON_DISMISS_BUTTON_LABEL);\r\n          },\r\n          error => {\r\n            this.snackbarService.open($localize`:Message of error while renaming category:Category could not be renamed`, COMMON_DISMISS_BUTTON_LABEL);\r\n          }\r\n        )\r\n      ).subscribe();\r\n    }\r\n  }\r\n\r\n  onClickDeleteNode(treeNode: ProductCategoryTreeFlatNode): void {\r\n    if (this.editable) {\r\n      this.actionSubscription?.unsubscribe();\r\n      this.actionSubscription = this.sharedDialogService.requestConfirmation({\r\n        title: $localize`:Title of dialog prompt to confirm deletion:Confirm deletion`,\r\n        message: $localize`:Paragraph asking confirmation to delete a category, and explaining that deleting it cascades to its descendants, but not to related products which are detached from the relationship:Are you sure to delete the category? This will include all its descendants. Related products will not be deleted, and instead will be marked as not having a category.`\r\n      }).pipe(\r\n        filter(didConfirm => didConfirm),\r\n        map(() => this.flatNodeMap.get(treeNode)),\r\n        switchMap(category => this.service.remove(category)),\r\n        tap(\r\n          next => {\r\n            this.matTree.renderNodeChanges(this.dataSource.data); // TODO optimize this?\r\n            this.snackbarService.open($localize`:Message of success after deleting category:Category was deleted`, COMMON_DISMISS_BUTTON_LABEL);\r\n          },\r\n          error => {\r\n            this.snackbarService.open($localize`:Message of error while deleting category:Category could not be deleted`, COMMON_DISMISS_BUTTON_LABEL);\r\n          }\r\n        )\r\n      ).subscribe();\r\n    }\r\n  }\r\n\r\n  onClickTreeNode(treeNode: ProductCategoryTreeFlatNode): void {\r\n    if (this.selectionEnabled) {\r\n      const category = this.flatNodeMap.get(treeNode);\r\n      this.selection.emit(category);\r\n    }\r\n  }\r\n\r\n  private transformer(category: ProductCategory, level: number) {\r\n    const flatNode = new ProductCategoryTreeFlatNode();\r\n    flatNode.name = category.name;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!(category.children?.length);\r\n    this.flatNodeMap.set(flatNode, category);\r\n    this.nestedNodeMap.set(category, flatNode);\r\n    return flatNode;\r\n  }\r\n\r\n  private requestCategoryData(withData?: Partial<EntityFormDialogData<ProductCategory>>): Observable<ProductCategory> {\r\n    const data: EntityFormDialogData<ProductCategory> = Object.assign(\r\n      {\r\n        isNewItem: true,\r\n        entityType: 'productCategory'\r\n      },\r\n      withData\r\n    );\r\n    return this.dialogService.open(\r\n      EntityFormDialogComponent,\r\n      {\r\n        width: '30rem',\r\n        data\r\n      }\r\n    ).afterClosed().pipe(\r\n      filter(category => (!!category))\r\n    );\r\n  }\r\n\r\n}\r\n","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this._next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, EMPTY, from, Observable } from 'rxjs';\r\nimport { expand, ignoreElements, map, switchMap, tap, toArray } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductCategoryTreeService {\r\n\r\n  private categoriesSource = new BehaviorSubject<ProductCategory[]>([]);\r\n\r\n  categories$ = this.categoriesSource.asObservable();\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataProductCategories) public apiService: ITransactionalEntityDataApiService<ProductCategory>\r\n  ) { }\r\n\r\n  reloadCategories(force = false): Observable<ProductCategory[]> {\r\n    return (force || !this.categoriesSource.value.length) ?\r\n      this.apiService.fetchPage().pipe(\r\n        switchMap(page => from(page.items)),\r\n        expand(category => this.loadDescendants(category).pipe(\r\n          switchMap(children => from(children)),\r\n          ignoreElements()\r\n        )),\r\n        toArray(),\r\n        tap(c => this.categoriesSource.next(c))\r\n      ) :\r\n      EMPTY;\r\n  }\r\n\r\n  add(newNode: ProductCategory) {\r\n    return this.apiService.create(newNode).pipe(\r\n      tap(() => {\r\n        const parent = newNode.parent;\r\n        if (parent) {\r\n          if (parent.children) {\r\n            parent.children = [newNode];\r\n          } else {\r\n            parent.children.push(newNode);\r\n          }\r\n          delete newNode.parent;\r\n        }\r\n        this.categoriesSource.next(this.categoriesSource.value);\r\n      }),\r\n      map(() => newNode)\r\n    );\r\n  }\r\n\r\n  edit(newNode: ProductCategory, originalNode: ProductCategory) {\r\n    return this.apiService.update(newNode, originalNode).pipe(\r\n      tap(() => {\r\n        originalNode.code = newNode.code;\r\n        originalNode.name = newNode.name;\r\n        this.categoriesSource.next(this.categoriesSource.value);\r\n      })\r\n    );\r\n  }\r\n\r\n  remove(node: ProductCategory) {\r\n    return this.apiService.delete({ code: node.code }).pipe(\r\n      switchMap(() => this.reloadCategories(true))\r\n    );\r\n  }\r\n\r\n  private loadDescendants(parent: ProductCategory) {\r\n    return this.apiService.fetchPage(0, Number.MAX_SAFE_INTEGER, null, null, { parentCode: parent.code }).pipe(\r\n      map(page => page.items as ProductCategory[]),\r\n      tap(children => { parent.children = children; })\r\n    );\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { ProductSearchQuery } from 'src/models/ProductSearchQuery';\r\n\r\n@Component({\r\n  selector: 'app-product-filters-panel',\r\n  templateUrl: './product-filters-panel.component.html',\r\n  styleUrls: [ './product-filters-panel.component.css' ]\r\n})\r\nexport class ProductFiltersPanelComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private valueChangesSubscription: Subscription;\r\n\r\n  @Output() filtersChanges = new EventEmitter<ProductSearchQuery>();\r\n\r\n  formGroup: FormGroup;\r\n  get categoryCode() { return this.formGroup.get('categoryCode') as FormControl; }\r\n  get nameLike() { return this.formGroup.get('nameLike') as FormControl; }\r\n\r\n  readonly formChangesDebouncingTimeMs = 300;\r\n\r\n  constructor(\r\n    protected formBuilder: FormBuilder\r\n  ) {\r\n    this.formGroup = this.formBuilder.group({\r\n      categoryCode: [null],\r\n      nameLike: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.valueChangesSubscription = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebouncingTimeMs),\r\n      distinctUntilChanged((prev, curr) => (\r\n        JSON.stringify(prev) === JSON.stringify(curr)\r\n      )),\r\n      tap(value => {\r\n        const filters: Partial<ProductSearchQuery> = {};\r\n        if (value.nameLike) {\r\n          filters.nameLike = value.nameLike;\r\n        }\r\n        if (value.categoryCode) {\r\n          filters.categoryCode = value.categoryCode;\r\n        }\r\n        this.filtersChanges.emit(filters as ProductSearchQuery);\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSubscription?.unsubscribe();\r\n  }\r\n\r\n  onSelectCategory(category: ProductCategory) {\r\n    this.categoryCode.setValue(category.code);\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-expansion-panel>\r\n  <mat-expansion-panel-header>\r\n    <mat-panel-title\r\n      i18n=\"Title of panel to select conditions to filter products by\">Filter Products...</mat-panel-title>\r\n  </mat-expansion-panel-header>\r\n  <fieldset [formGroup]=\"formGroup\">\r\n    <input formControlName=\"categoryCode\" type=\"hidden\" />\r\n\r\n    <app-product-category-selector-field\r\n      (categorySelection)=\"onSelectCategory($event)\"\r\n      placeholder=\"By Category\"\r\n      i18n-placeholder=\"Name of field for filtering products by selected category\">\r\n    </app-product-category-selector-field>\r\n\r\n    <mat-form-field>\r\n      <input matInput formControlName=\"nameLike\"\r\n        placeholder=\"By Product name\"\r\n        i18n-placeholder=\"Name of field for filtering products by partial name\" />\r\n    </mat-form-field>\r\n  </fieldset>\r\n</mat-expansion-panel>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sell-detail-units-control',\r\n  templateUrl: './sell-detail-units-control.component.html',\r\n  styleUrls: ['./sell-detail-units-control.component.css']\r\n})\r\nexport class SellDetailUnitsControlComponent\r\n  implements OnDestroy {\r\n\r\n  @Input() units = 0;\r\n  @Output() increase = new EventEmitter<void>();\r\n  @Output() decrease = new EventEmitter<void>();\r\n\r\n  get oneOrLessUnits() { return (this.units <= 1); }\r\n\r\n  constructor() { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.increase.complete();\r\n    this.decrease.complete();\r\n  }\r\n\r\n  onClickIncrease(): void {\r\n    this.increase.emit();\r\n  }\r\n  onClickDecrease(): void {\r\n    this.decrease.emit();\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<button type=\"button\" class=\"increase-quantity\"\r\n  aria-label=\"Add one\"\r\n  i18n-aria-label=\"add product unit|Label for action button to include one (1) more unit of a product in the shopping cart\"\r\n  mat-button mat-icon-button\r\n  (click)=\"onClickIncrease()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n<span class=\"quantity\">{{ units }}</span>\r\n<button type=\"button\" class=\"decrease-quantity\"\r\n  mat-button mat-icon-button\r\n  aria-label=\"Remove one\"\r\n  i18n-aria-label=\"remove product unit|Label for action button to take one (1) unit of a product away from the shopping cart\"\r\n  [disabled]=\"oneOrLessUnits\"\r\n  (click)=\"onClickDecrease()\">\r\n  <mat-icon>remove</mat-icon>\r\n</button>\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<table mat-table [dataSource]=\"sellDetails$\">\r\n  <ng-container matColumnDef=\"product\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      <span i18n=\"product|Name of table header for name and code of product\">Product</span>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let detail\">\r\n      <span class=\"image-wrapper\">\r\n        <img *ngIf=\"detail.product.imagesURL\"\r\n          [src]=\"detail.product.imagesURL[0]\" alt=\"\" />\r\n      </span>\r\n      <span class=\"identifier\">\r\n        <span class=\"name\">{{ detail.product.name }}</span><br/>\r\n        <span class=\"barcode\">{{ detail.product.barcode }}</span>\r\n      </span>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"price\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      <span i18n=\"Name of table header for price per product unit\">Price</span>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let detail\">\r\n      <span>{{ detail.product.price | currency }}</span>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"quantity\">\r\n    <th mat-header-cell *matHeaderCellDef\r\n      i18n=\"Name of table header for product units in cart\">Units</th>\r\n    <td mat-cell *matCellDef=\"let detail; let i = index\">\r\n      <app-sell-detail-units-control *ngIf=\"editable; else showUnits\"\r\n        [units]=\"detail.units\"\r\n        (increase)=\"onClickIncreaseProductQuantity(i)\"\r\n        (decrease)=\"onClickDecreaseProductQuantity(i)\">\r\n      </app-sell-detail-units-control>\r\n      <ng-template #showUnits>{{ detail.units }}</ng-template>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"total\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      <span i18n=\"Name of table header for the value of product price x units in cart\">Subtotal</span>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let detail\">\r\n      <span>{{ (detail.product.price * detail.units) | currency }}</span>\r\n    </td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"actions\">\r\n    <th mat-header-cell *matHeaderCellDef></th>\r\n    <td mat-cell *matCellDef=\"let detail; let i = index\">\r\n      <button type=\"button\" class=\"remove\"\r\n        mat-button mat-icon-button\r\n        aria-label=\"Remove\"\r\n        i18n-aria-label=\"remove all product units|Label for action button to remove all units of product in cart\"\r\n        color=\"warn\"\r\n        [disabled]=\"!editable\"\r\n        (click)=\"onClickRemoveProduct(i)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n</table>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SellDetail } from 'src/models/entities/SellDetail';\r\n\r\n@Component({\r\n  selector: 'app-sell-details-table',\r\n  templateUrl: './sell-details-table.component.html',\r\n  styleUrls: ['./sell-details-table.component.css']\r\n})\r\nexport class SellDetailsTableComponent {\r\n\r\n  private sellDetailsSource = new BehaviorSubject<SellDetail[]>([]);\r\n\r\n  @Input() editable!: boolean;\r\n  @Input() tableColumns = ['product', 'price', 'quantity', 'total', 'actions'];\r\n  @Input() set sellDetails(v: SellDetail[]) { this.sellDetailsSource.next(v); }\r\n  @Output() increaseUnitsAtIndex = new EventEmitter<number>();\r\n  @Output() decreaseUnitsAtIndex = new EventEmitter<number>();\r\n  @Output() removeAtIndex = new EventEmitter<number>();\r\n\r\n  sellDetails$ = this.sellDetailsSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  onClickIncreaseProductQuantity(index: number): void {\r\n    this.increaseUnitsAtIndex.emit(index);\r\n  }\r\n\r\n  onClickDecreaseProductQuantity(index: number): void {\r\n    this.decreaseUnitsAtIndex.emit(index);\r\n  }\r\n\r\n  onClickRemoveProduct(index: number): void {\r\n    this.removeAtIndex.emit(index);\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<div class=\"customer\">\r\n  <ng-container *ngIf=\"sell.customer; else noCustomer\">\r\n    <mat-icon>person</mat-icon>\r\n    <span class=\"details\">\r\n      <span class=\"name\">{{ sell.customer.person.firstName + \" \" + sell.customer.person.lastName }}</span>\r\n      <b class=\"idCard\">RUT {{ sell.customer.person.idNumber }}</b>\r\n      <i class=\"email\">{{ sell.customer.person.email }}</i>\r\n    </span>\r\n  </ng-container>\r\n  <ng-template #noCustomer>\r\n    <mat-icon>person_off</mat-icon>\r\n    <span class=\"details\">\r\n      <span class=\"name\">Cliente anónimo</span>\r\n    </span>\r\n  </ng-template>\r\n</div>\r\n<div class=\"type\">\r\n  <ng-container *ngIf=\"sell.token; else justStateReceiptType\">\r\n    <a href=\"/store/receipt?token={{ sell.token }}\"\r\n      mat-button mat-raised-button\r\n      target=\"_blank\">\r\n      <mat-icon>receipt</mat-icon>\r\n      <span i18n=\"Label for action to review the receipt details of a sell\">View receipt</span>\r\n    </a>\r\n  </ng-container>\r\n  <ng-template #justStateReceiptType>\r\n    <mat-icon>receipt</mat-icon>\r\n    <span>{{ sell.billingType  }}</span>\r\n  </ng-template>\r\n</div>\r\n<div class=\"company\" *ngIf=\"sell.billingCompany\">\r\n  <mat-icon>business</mat-icon>\r\n  <span class=\"details\">\r\n    <span class=\"name\">{{ sell.billingCompany.name }}</span>\r\n    <b class=\"idNumber\">RUT {{ sell.billingCompany.idNumber }}</b>\r\n  </span>\r\n</div>\r\n<div class=\"date\">\r\n  <mat-icon>schedule</mat-icon>\r\n  <span>{{ sell.date | date:'dd/MM/y, hh:mm aa' }}</span>\r\n</div>\r\n<div class=\"status\">\r\n  <mat-icon>pending_actions</mat-icon>\r\n  <span>{{ sell.status }}</span>\r\n</div>\r\n<div class=\"shipping\" *ngIf=\"sell.shippingAddress\">\r\n  <mat-icon>local_shipping</mat-icon>\r\n  <span>{{ sell.shippingAddress | address }}</span>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input } from '@angular/core';\r\nimport { Sell } from 'src/models/entities/Sell';\r\n\r\n@Component({\r\n  selector: 'app-sell-information',\r\n  templateUrl: './sell-information.component.html',\r\n  styleUrls: ['./sell-information.component.css']\r\n})\r\nexport class SellInformationComponent {\r\n\r\n  @Input() sell: Sell;\r\n\r\n  constructor() { }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\r\n\r\n/**\r\n * Animation with two possible states: 'opaque' and 'transparent'\r\n * @param transitionTimeMs Time to fade in or out\r\n */\r\nexport function fadeInOut(transitionTimeMs: number): AnimationTriggerMetadata {\r\n  return trigger('fadeInOut', [\r\n    state('opaque', style({ opacity: 1 })),\r\n    state('transparent', style({ opacity: 0 })),\r\n    transition('opaque => transparent', animate(transitionTimeMs)),\r\n    transition('transparent => opaque', animate(transitionTimeMs))\r\n  ]);\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<div class=\"slides\"\r\n  (mouseenter)=\"stopAutoRotation()\"\r\n  (mouseleave)=\"startAutoRotation()\">\r\n  <ng-container *ngIf=\"images?.length; else noImageAvailable\">\r\n    <div class=\"slide\" *ngFor=\"let image of images; index as i\"\r\n      [ngStyle]=\"{ width: slideWidth, height: slideHeight }\"\r\n      [class.active]=\"(currentIndex$ | async) === i\">\r\n      <img [src]=\"image.url\"\r\n        [@fadeInOut]=\"((currentIndex$ | async) !== i) ? 'transparent' : 'opaque'\"\r\n        [class.linkable]=\"!!image.targetUrl\"\r\n        (click)=\"onClickImage(image)\" />\r\n      <button type=\"button\" class=\"remove-slide\" *ngIf=\"editable\"\r\n        mat-mini-fab\r\n        color=\"warn\"\r\n        i18n-aria-label=\"Label for action button to remove a slide\"\r\n        aria-label=\"Remove\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"onClickRemove()\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n  <ng-template #noImageAvailable>\r\n    <div class=\"active slide\"\r\n      [ngStyle]=\"{ width: slideWidth, height: slideHeight }\">\r\n      <img [src]=\"stockImageUrl\" alt=\"Imagen no disponible\" />\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n<ng-container *ngIf=\"showNextPreviousButtons\">\r\n  <button type=\"button\" class=\"previous-slide\"\r\n    mat-mini-fab\r\n    color=\"primary\"\r\n    i18n-aria-label=\"Label for action button to return to previous slide\"\r\n    aria-label=\"See previous\"\r\n    (click)=\"onClickSlideForwards()\">\r\n    <mat-icon>first_page</mat-icon>\r\n  </button>\r\n  <button type=\"button\" class=\"next-slide\"\r\n    mat-mini-fab\r\n    color=\"primary\"\r\n    i18n-aria-label=\"Label for action button to advance to next slide\"\r\n    aria-label=\"See next\"\r\n    (click)=\"onClickSlideBackwards()\">\r\n    <mat-icon>last_page</mat-icon>\r\n  </button>\r\n</ng-container>\r\n<div class=\"slide-selectors\" *ngIf=\"showSlideSelectors || editable\">\r\n  <ng-container *ngFor=\"let url of images; index as i\">\r\n    <ng-container *ngIf=\"(currentIndex$ | async) === i; then selected; else notSelected\"></ng-container>\r\n    <ng-template #selected>\r\n      <button type=\"button\" class=\"selected-slide\"\r\n        mat-button mat-icon-button>\r\n        <mat-icon>radio_button_checked</mat-icon>\r\n      </button>\r\n    </ng-template>\r\n    <ng-template #notSelected>\r\n      <button type=\"button\" class=\"slide-selector\"\r\n        mat-button mat-icon-button\r\n        (click)=\"onClickSlideSelector(i)\">\r\n        <mat-icon>radio_button_unchecked</mat-icon>\r\n      </button>\r\n    </ng-template>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"editable\">\r\n    <button type=\"button\" class=\"slide-add\"\r\n      mat-button mat-icon-button\r\n      i18n-aria-label=\"Label for action button to add a slide\"\r\n      aria-label=\"Add\"\r\n      [disabled]=\"disabled\"\r\n      (click)=\"onClickAdd()\">\r\n      <mat-icon>add_circle_outline</mat-icon>\r\n    </button>\r\n  </ng-container>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, interval, Subscription, timer } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { fadeInOut } from 'src/animations/fadeInOut';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Image } from 'src/models/entities/Image';\r\n\r\n@Component({\r\n  selector: 'app-slideshow',\r\n  templateUrl: './slideshow.component.html',\r\n  styleUrls: ['./slideshow.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: SlideshowComponent\r\n    }\r\n  ],\r\n  animations: [\r\n    fadeInOut(500)\r\n  ]\r\n})\r\nexport class SlideshowComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  private currentIndexSource = new BehaviorSubject(0);\r\n  private autoRotateImagesSubscription: Subscription;\r\n\r\n  @Input() automaticSlideInterval = 5000;\r\n  @Input() images: Image[] = [];\r\n  @Input() automaticSlide = true;\r\n  @Input() editable = false;\r\n  @Input() cycle = true;\r\n  @Input() showSlideSelectors = true;\r\n  @Input() showNextPreviousButtons = true;\r\n  @Input() slideWidth = 'auto';\r\n  @Input() slideHeight = 'auto';\r\n  @Output() navigate = new EventEmitter<void>();\r\n  @Output() add = new EventEmitter<void>();\r\n\r\n\r\n  readonly stockImageUrl = environment.staticImages.defaultProductImage.url;\r\n  currentIndex$ = this.currentIndexSource.asObservable();\r\n\r\n  disabled = false;\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.startAutoRotation();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.autoRotateImagesSubscription?.unsubscribe();\r\n    this.currentIndexSource.complete();\r\n    this.navigate.complete();\r\n    this.add.complete();\r\n  }\r\n\r\n  onChange(value: any): void { }\r\n  onTouched(): void { }\r\n\r\n  writeValue(obj: any): void {\r\n    if (Array.isArray(obj)) {\r\n      this.images = obj;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  onClickImage(img: Image) {\r\n    if (img.targetUrl) {\r\n      this.router.navigateByUrl(img.targetUrl);\r\n    }\r\n  }\r\n\r\n  onClickAdd() {\r\n    this.add.emit();\r\n  }\r\n\r\n  onClickRemove() {\r\n    this.images.splice(this.currentIndexSource.value, 1);\r\n    this.onClickSlideBackwards(true);\r\n    this.onChange(this.images);\r\n  }\r\n\r\n  onClickSlideForwards() {\r\n    if (this.images.length > 1) {\r\n      const v = this.currentIndexSource.value;\r\n      const isAtLastIndex = ((v + 1) >= this.images.length);\r\n      const nextIndex = isAtLastIndex ?\r\n        0 :\r\n        this.cycle ?\r\n          (v + 1) :\r\n          undefined;\r\n\r\n      if (nextIndex !== undefined) {\r\n        this.navigate.emit();\r\n        this.currentIndexSource.next(nextIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClickSlideBackwards(force = false) {\r\n    if (this.images.length > 0 || force) {\r\n      const v = this.currentIndexSource.value;\r\n      const isOnFirstIndex = (v === 0);\r\n      const nextIndex = !isOnFirstIndex ?\r\n        (v - 1) :\r\n        (this.cycle) ?\r\n          (this.images.length - 1) :\r\n          undefined;\r\n\r\n      if (nextIndex !== undefined) {\r\n        this.navigate.emit();\r\n        this.currentIndexSource.next(nextIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClickSlideSelector(index: number) {\r\n    if ((index >= 0) && (this.images.length > index) && (this.currentIndexSource.value !== index)) {\r\n      this.navigate.emit();\r\n      this.currentIndexSource.next(index);\r\n      if (this.automaticSlide) {\r\n        this.autoRotateImagesSubscription?.unsubscribe();\r\n        this.autoRotateImagesSubscription = timer(1000).pipe(\r\n          switchMap(() => this.autoImageRotationObservable())\r\n        ).subscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  stopAutoRotation() {\r\n    this.autoRotateImagesSubscription?.unsubscribe();\r\n  }\r\n\r\n  startAutoRotation() {\r\n    this.stopAutoRotation();\r\n    if (this.automaticSlide) {\r\n      this.autoRotateImagesSubscription = this.autoImageRotationObservable().subscribe();\r\n    }\r\n  }\r\n\r\n  private autoImageRotationObservable() {\r\n    return interval(this.automaticSlideInterval).pipe(\r\n      tap(() => this.onClickSlideForwards())\r\n    );\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<a [href]=\"url\" *ngIf=\"url\" target=\"_blank\"\r\n  class=\"whatsapp-button\"\r\n  title=\"Comunicarse por WhatsApp\"\r\n  [ngStyle]=\"{\r\n    width: size,\r\n    height: size,\r\n    'border-radius': size,\r\n    padding: padding\r\n  }\"\r\n  rel=\"noopener\">\r\n  <img src=\"https://cdn.jsdelivr.net/npm/simple-icons@v6/icons/whatsapp.svg\" alt=\"Whatsapp logo\">\r\n</a>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-whatsapp-button',\r\n  templateUrl: './whatsapp-button.component.html',\r\n  styleUrls: ['./whatsapp-button.component.css']\r\n})\r\nexport class WhatsappButtonComponent {\r\n\r\n  @Input() areaCode = '+56';\r\n  @Input() phone: number | string = '';\r\n  @Input() size = '3rem';\r\n  @Input() padding = '1.25rem';\r\n\r\n  get url(): string | undefined {\r\n    return this.areaCode && this.phone ? `https://wa.me/${this.areaCode}${this.phone}` : undefined;\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmationDialogData } from './ConfirmationDialogData';\r\n\r\n@Component({\r\n  selector: 'app-confirmation-dialog',\r\n  templateUrl: './confirmation-dialog.component.html',\r\n  styleUrls: ['./confirmation-dialog.component.css']\r\n})\r\nexport class ConfirmationDialogComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmationDialogData\r\n  ) { }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 mat-dialog-title>{{ data.title }}</h2>\r\n<mat-dialog-content>{{ data.message }}</mat-dialog-content>\r\n<mat-dialog-actions align=\"center\">\r\n  <button mat-button mat-raised-button\r\n    type=\"button\"\r\n    [mat-dialog-close]=\"true\"\r\n    i18n=\"yes|Label for action button to answer positively\">Yes</button>\r\n  <button mat-button mat-raised-button\r\n    type=\"button\"\r\n    [mat-dialog-close]=\"false\"\r\n    autofocus\r\n    i18n=\"no|Label for action button to answer negatively\">No</button>\r\n</mat-dialog-actions>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { map, startWith, tap } from 'rxjs/operators';\r\nimport { ProfileService } from 'src/app/profile.service';\r\nimport { Person } from 'src/models/entities/Person';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE, COMMON_WARNING_MESSAGE } from 'src/text/messages';\r\n\r\n@Component({\r\n  selector: 'app-edit-profile-form-dialog',\r\n  templateUrl: './edit-profile-form-dialog.component.html',\r\n  styleUrls: ['./edit-profile-form-dialog.component.css']\r\n})\r\nexport class EditProfileFormDialogComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private savingSource = new BehaviorSubject(false);\r\n  private loadFormSub: Subscription;\r\n  private sendFormSub: Subscription;\r\n\r\n  saving$ = this.savingSource.asObservable();\r\n  cancelButtonColor$: Observable<string>;\r\n\r\n  formGroup: FormGroup;\r\n  get profile() { return this.formGroup.get('profile') as FormControl; }\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<EditProfileFormDialogComponent>,\r\n    private snackBarService: MatSnackBar,\r\n    private profileService: ProfileService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.formGroup = new FormGroup({\r\n      profile: new FormControl({ value: null }, Validators.required)\r\n    });\r\n    this.loadFormSub = this.profileService.getUserProfile().pipe(\r\n      tap(profile => this.formGroup.setValue({ profile }))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.savingSource.complete();\r\n    this.loadFormSub?.unsubscribe();\r\n    this.sendFormSub?.unsubscribe();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.formGroup.valid) {\r\n      const formValue = this.profile.value as Person;\r\n      this.sendFormSub?.unsubscribe();\r\n      this.sendFormSub = this.profileService.updateUserProfile(formValue).pipe(\r\n        tap(\r\n          () => {\r\n            const succesfulSaveMessage = $localize`:succesful profile edit|Message of success after editing profile information:Your profile information has been saved`;\r\n            this.snackBarService.open(succesfulSaveMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n            this.dialog.close();\r\n          },\r\n          () => {\r\n            this.snackBarService.open(COMMON_ERROR_MESSAGE , COMMON_DISMISS_BUTTON_LABEL);\r\n          }\r\n        )\r\n      ).subscribe();\r\n    }\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 mat-dialog-title i18n=\"Title of dialog prompt for editing oneself's profile information\">Edit Profile</h2>\r\n\r\n<form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit()\">\r\n  <app-person-form formControlName=\"profile\">\r\n  </app-person-form>\r\n\r\n  <div class=\"actions\">\r\n    <button mat-button mat-raised-button type=\"submit\"\r\n      i18n=\"confirm|Label for action button to accept and proceed\"\r\n      [disabled]=\"formGroup.pristine\">Confirm</button>\r\n    <button mat-button mat-raised-button type=\"button\"\r\n      mat-dialog-close\r\n      i18n=\"cancel|Label for action button to cancel and/or stop an operation\">Cancel</button>\r\n  </div>\r\n</form>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { ProductCategoryTreeService } from '../../components/product-category-tree/product-category-tree.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-picker-dialog',\r\n  templateUrl: './product-category-picker-dialog.component.html',\r\n  styleUrls: ['./product-category-picker-dialog.component.css']\r\n})\r\nexport class ProductCategoryPickerDialogComponent\r\n  implements OnInit {\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ProductCategoryPickerDialogComponent>,\r\n    private categoryTreeService: ProductCategoryTreeService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.categoryTreeService.reloadCategories();\r\n  }\r\n\r\n  onSelect(option: ProductCategory) {\r\n    const simpleCategory: ProductCategory = {\r\n      code: option.code,\r\n      name: option.name\r\n    };\r\n    this.dialog.close(simpleCategory);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 i18n=\"Title of dialog prompt for users to pick a category from its tree\">Category Selection</h2>\r\n<app-product-category-tree\r\n  [selectionEnabled]=\"true\"\r\n  (selection)=\"onSelect($event)\">\r\n</app-product-category-tree>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfirmationDialogComponent } from './confirmation/confirmation-dialog.component';\r\nimport { ConfirmationDialogData } from './confirmation/ConfirmationDialogData';\r\n\r\n@Injectable()\r\nexport class SharedDialogService {\r\n\r\n  constructor(\r\n    private dialogService: MatDialog\r\n  ) { }\r\n\r\n  requestConfirmation(data: ConfirmationDialogData) {\r\n    return this.dialogService.open(\r\n      ConfirmationDialogComponent,\r\n      {\r\n        width: '24rem',\r\n        data,\r\n        disableClose: true\r\n      }\r\n    ).afterClosed();\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trébol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { EntityTypeName } from 'src/models/EntityTypeNames';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EntityFormGroupFactoryService {\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n  // TODO support setting initial value for every one of these forms\r\n  createFormGroupFor(typeName: EntityTypeName): FormGroup | null {\r\n    switch (typeName) {\r\n      case 'address': return this.createAddressFormGroup();\r\n      case 'image': return this.createImageFormGroup();\r\n      case 'person': return this.createPersonFormGroup();\r\n      case 'product': return this.createProductFormGroup();\r\n      case 'productCategory': return this.createProductCategoryFormGroup();\r\n      case 'productList': return this.createProductListFormGroup();\r\n      case 'sell': return this.createSellFormGroup();\r\n      case 'shipper': return this.createShipperFormGroup();\r\n      case 'user': return this.createUserFormGroup();\r\n    }\r\n  }\r\n\r\n  private createAddressFormGroup() {\r\n    return this.formBuilder.group({\r\n      city: ['', Validators.required],\r\n      municipality: ['', Validators.required],\r\n      firstLine: ['', Validators.required],\r\n      secondLine: [''],\r\n      notes: ['']\r\n    });\r\n  }\r\n\r\n\r\n  private createImageFormGroup() {\r\n    return this.formBuilder.group({\r\n      filename: ['', Validators.required],\r\n      url: ['', Validators.required],\r\n      code: [null]\r\n      // file: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  private createPersonFormGroup() {\r\n    return this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      idNumber: ['', Validators.required],\r\n      email: ['', Validators.required],\r\n      phone1: [''],\r\n      phone2: ['']\r\n    });\r\n  }\r\n\r\n  private createProductFormGroup() {\r\n    return this.formBuilder.group({\r\n      images: [[]],\r\n      barcode: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      category: [null],\r\n      price: [null, Validators.required],\r\n      // stock: [''],\r\n      // criticalStock: [''],\r\n      description: ['']\r\n    });\r\n  }\r\n\r\n  private createProductCategoryFormGroup() {\r\n    return this.formBuilder.group({\r\n      code: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      parent: [null]\r\n    });\r\n  }\r\n\r\n  private createProductListFormGroup() {\r\n    return this.formBuilder.group({\r\n      code: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      totalCount: [0]\r\n    });\r\n  }\r\n\r\n  private createSellFormGroup() {\r\n    return this.formBuilder.group({\r\n      date: [{ value: new Date(), disabled: true }],\r\n      billingType: ['', Validators.required],\r\n      salesperson: [null],\r\n      customer: [null, Validators.required]\r\n    });\r\n  }\r\n\r\n  private createShipperFormGroup() {\r\n    return this.formBuilder.group({\r\n      name: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  private createUserFormGroup() {\r\n    return this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      password: [null],\r\n      person: ['', Validators.required],\r\n      role: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR, ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { EntityFormGroupFactoryService } from '../../entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-address-form',\r\n  templateUrl: './address-form.component.html',\r\n  styleUrls: [ './address-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: AddressFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: AddressFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class AddressFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get city() { return this.formGroup.get('city') as FormControl; }\r\n  get municipality() { return this.formGroup.get('municipality') as FormControl; }\r\n  get firstLine() { return this.formGroup.get('firstLine') as FormControl; }\r\n  get secondLine() { return this.formGroup.get('secondLine') as FormControl; }\r\n  get notes() { return this.formGroup.get('notes') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('address');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.city.reset(null, { emitEvent: false });\r\n      this.municipality.reset(null, { emitEvent: false });\r\n      this.firstLine.reset(null, { emitEvent: false });\r\n      this.secondLine.reset(null, { emitEvent: false });\r\n      this.notes.reset(null, { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable({ emitEvent: false });\r\n      } else {\r\n        this.formGroup.enable({ emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.city.errors) {\r\n      errors.addressCity = this.city.errors;\r\n    }\r\n    if (this.municipality.errors) {\r\n      errors.addressMunicipality = this.municipality.errors;\r\n    }\r\n    if (this.firstLine.errors) {\r\n      errors.addressFirstLine = this.firstLine.errors;\r\n    }\r\n    if (this.secondLine.errors) {\r\n      errors.addressSecondLine = this.secondLine.errors;\r\n    }\r\n    if (this.notes.errors) {\r\n      errors.addressNotes = this.notes.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"city\">\r\n    <input matInput formControlName=\"city\"\r\n      placeholder=\"City\"\r\n      i18n-placeholder=\"Name of field for the city where a given address exists\" />\r\n  </mat-form-field>\r\n  <mat-form-field class=\"municipality\">\r\n    <input matInput formControlName=\"municipality\"\r\n      placeholder=\"Municipality\"\r\n      i18n-placeholder=\"Name of field for the smallest political unit where a given address exists\" />\r\n  </mat-form-field>\r\n  <mat-form-field class=\"firstLine\">\r\n    <input matInput formControlName=\"firstLine\"\r\n      placeholder=\"Address\"\r\n      i18n-placeholder=\"Name of field for address street name and number\" />\r\n  </mat-form-field>\r\n  <mat-form-field class=\"secondLine\">\r\n    <input matInput formControlName=\"secondLine\"\r\n      placeholder=\"Address second line\"\r\n      i18n-placeholder=\"Name of field for the apartment or suite number, and/or any other specific details for a given address\" />\r\n  </mat-form-field>\r\n  <mat-form-field class=\"notes\">\r\n    <input matInput formControlName=\"notes\"\r\n      placeholder=\"Notes\"\r\n      i18n-placeholder=\"Name of field for comments and extra information about a given address\" />\r\n  </mat-form-field>\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, forwardRef, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormBuilder, FormControl, FormGroup, NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR, ValidationErrors, Validator, Validators\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\n\r\n@Component({\r\n  selector: 'app-company-form',\r\n  templateUrl: './company-form.component.html',\r\n  styleUrls: ['./company-form.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: CompanyFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: CompanyFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class CompanyFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get idNumber() { return this.formGroup.get('idNumber') as FormControl; }\r\n  get name() { return this.formGroup.get('name') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formBuilder.group({\r\n        idNumber: ['', Validators.required],\r\n        name: ['', Validators.required]\r\n      });\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.idNumber.reset('', { emitEvent: false });\r\n      this.name.reset('', { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable();\r\n      } else {\r\n        this.formGroup.enable();\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.idNumber.errors) {\r\n      errors.companyIdNumber = this.idNumber.errors;\r\n    }\r\n    if (this.name.errors) {\r\n      errors.companyName = this.name.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n  <mat-form-field class=\"idNumber\">\r\n    <input matInput formControlName=\"idNumber\"\r\n      placeholder=\"Company ID number\"\r\n      i18n-placeholder=\"Name of field for company identification number\"\r\n      (blur)=\"onTouched()\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"name\">\r\n    <input matInput formControlName=\"name\"\r\n      placeholder=\"Company legal name\"\r\n      i18n-placeholder=\"Name of field for official, complete company name\"\r\n      (blur)=\"onTouched()\" />\r\n  </mat-form-field>\r\n</fieldset>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  AbstractControl, ControlValueAccessor, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR,\r\n  ValidationErrors, Validator\r\n} from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\nimport { isJavaScriptObject } from 'src/functions/isJavaScriptObject';\r\nimport { EntityFormGroupFactoryService } from '../../entity-form-group-factory.service';\r\n\r\n@Component({\r\n  selector: 'app-person-form',\r\n  templateUrl: './person-form.component.html',\r\n  styleUrls: [ './person-form.component.css' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: PersonFormComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: PersonFormComponent\r\n    }\r\n  ]\r\n})\r\nexport class PersonFormComponent\r\n  implements OnInit, OnDestroy, ControlValueAccessor, Validator {\r\n\r\n  private valueChangesSub: Subscription;\r\n\r\n  readonly formChangesDebounceTimeMs = 50;\r\n\r\n  @Input() formGroup: FormGroup;\r\n  get firstName() { return this.formGroup.get('firstName') as FormControl; }\r\n  get lastName() { return this.formGroup.get('lastName') as FormControl; }\r\n  get idNumber() { return this.formGroup.get('idNumber') as FormControl; }\r\n  get email() { return this.formGroup.get('email') as FormControl; }\r\n  get phone1() { return this.formGroup.get('phone1') as FormControl; }\r\n  get phone2() { return this.formGroup.get('phone2') as FormControl; }\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private formGroupService: EntityFormGroupFactoryService\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.formGroup) {\r\n      this.formGroup = this.formGroupService.createFormGroupFor('person');\r\n    }\r\n    this.valueChangesSub = this.formGroup.valueChanges.pipe(\r\n      debounceTime(this.formChangesDebounceTimeMs),\r\n      tap(v => this.onChange(v))\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.valueChangesSub?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    if (this.formGroup) {\r\n      this.firstName.reset('', { emitEvent: false });\r\n      this.lastName.reset('', { emitEvent: false });\r\n      this.idNumber.reset('', { emitEvent: false });\r\n      this.email.reset('', { emitEvent: false });\r\n      this.phone1.reset('', { emitEvent: false });\r\n      this.phone2.reset('', { emitEvent: false });\r\n      if (isJavaScriptObject(obj)) {\r\n        this.formGroup.patchValue(obj, { emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    if (this.formGroup) {\r\n      if (isDisabled) {\r\n        this.formGroup.disable({ emitEvent: false });\r\n      } else {\r\n        this.formGroup.enable({ emitEvent: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.formGroup || this.formGroup.valid) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (this.firstName.errors) {\r\n      errors.personFirstName = this.firstName.errors;\r\n    }\r\n    if (this.lastName.errors) {\r\n      errors.personLastName = this.lastName.errors;\r\n    }\r\n    if (this.idNumber.errors) {\r\n      errors.personIdNumber = this.idNumber.errors;\r\n    }\r\n    if (this.email.errors) {\r\n      errors.personEmail = this.email.errors;\r\n    }\r\n    if (this.phone1.errors) {\r\n      errors.personPhone1 = this.phone1.errors;\r\n    }\r\n    if (this.phone2.errors) {\r\n      errors.personPhone2 = this.phone2.errors;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<fieldset [formGroup]=\"formGroup\">\r\n\r\n  <mat-form-field class=\"firstName\">\r\n    <input matInput formControlName=\"firstName\"\r\n      placeholder=\"First name\"\r\n      i18n-placeholder=\"Name of field for the complete first name of a person\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"lastName\">\r\n    <input matInput formControlName=\"lastName\"\r\n      placeholder=\"Last name\"\r\n      i18n-placeholder=\"Name of field for the complete last name of a person\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"idNumber\">\r\n    <input matInput formControlName=\"idNumber\"\r\n      placeholder=\"Id number\"\r\n      i18n-placeholder=\"Name of field for the identification number of a person\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"email\">\r\n    <input matInput formControlName=\"email\"\r\n      placeholder=\"E-mail\"\r\n      i18n-placeholder=\"Name of field for the email address of a person\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"phone1\">\r\n    <input matInput formControlName=\"phone1\"\r\n      placeholder=\"Phone 1\"\r\n      i18n-placeholder=\"Name of field for the main phone number of a person\" />\r\n  </mat-form-field>\r\n\r\n  <mat-form-field class=\"phone2\">\r\n    <input matInput formControlName=\"phone2\"\r\n      placeholder=\"Phone 2\"\r\n      i18n-placeholder=\"Name of field for the alternative phone number of a person\" />\r\n  </mat-form-field>\r\n</fieldset>\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-form-field class=\"category\">\r\n  <textarea matInput cdkTextareaAutosize\r\n    [placeholder]=\"placeholder\" [disabled]=\"true\"\r\n    tabindex=\"-1\"\r\n    required readonly>{{ productCategory?.name || noCategoryLabel }}</textarea>\r\n  <button type=\"button\" class=\"open-category-picker\"\r\n    *ngIf=\"productCategory\"\r\n    mat-icon-button matSuffix\r\n    aria-label=\"Clear category\"\r\n    i18n-aria-label=\"clear category|Label for action button to clear selection of a category\"\r\n    [disabled]=\"isDisabled\"\r\n    (click)=\"onClickClearCategory()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n  <button type=\"button\" class=\"open-category-picker\"\r\n    mat-icon-button matSuffix\r\n    aria-label=\"Pick category\"\r\n    i18n-aria-label=\"open category picker|Label for action button to open a dialog to choose a category from\"\r\n    [disabled]=\"isDisabled\"\r\n    (click)=\"onClickOpenCategoryPicker()\">\r\n    <mat-icon>open_in_new</mat-icon>\r\n  </button>\r\n  <mat-hint i18n=\"Label to hint users to click in a button to the right in order to pick a category\">Click on the button to the right to choose a category</mat-hint>\r\n</mat-form-field>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, OnDestroy, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { ProductCategoryPickerDialogComponent } from '../../dialogs/product-category-picker/product-category-picker-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-product-category-selector-field',\r\n  templateUrl: './product-category-selector-field.component.html',\r\n  styleUrls: ['./product-category-selector-field.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ProductCategorySelectorFieldComponent\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: ProductCategorySelectorFieldComponent\r\n    }\r\n  ]\r\n})\r\nexport class ProductCategorySelectorFieldComponent\r\n  implements ControlValueAccessor, Validator, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  noCategoryLabel = $localize`:no category chosen|Label to indicate that a product does not have a category associated:No category`;\r\n  productCategory: ProductCategory;\r\n  isDisabled = false;\r\n  placeholder: string;\r\n\r\n  @Output() categorySelection = new EventEmitter<ProductCategory>();\r\n\r\n  onChange: (value: any) => void;\r\n  onTouched: () => void;\r\n  onValidatorChange: () => void;\r\n\r\n  constructor(\r\n    private dialogService: MatDialog\r\n  ) {\r\n    this.onChange = (v) => { };\r\n    this.onTouched = () => { };\r\n    this.onValidatorChange = () => { };\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.categorySelection.complete();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this.productCategory = obj;\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.productCategory) {\r\n      return null;\r\n    }\r\n\r\n    const errors = {} as ValidationErrors;\r\n\r\n    if (!this.productCategory.code) {\r\n      errors.productCategoryCode = { required: true };\r\n    }\r\n    if (!this.productCategory.name) {\r\n      errors.productCategoryName = { required: true };\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this.onValidatorChange = fn;\r\n  }\r\n\r\n  onClickClearCategory(): void {\r\n    this.productCategory = null;\r\n    this.onChange(null);\r\n  }\r\n\r\n  onClickOpenCategoryPicker(): void {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.dialogService.open(\r\n      ProductCategoryPickerDialogComponent,\r\n      {\r\n        width: '24rem'\r\n      }\r\n    ).afterClosed().pipe(\r\n      filter(next => !!next),\r\n      tap((next: ProductCategory) => {\r\n        this.productCategory = { code: next.code, name: next.name };\r\n        this.onChange(next);\r\n        this.categorySelection.emit(next);\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { Address } from 'src/models/entities/Address';\r\n\r\n@Pipe({ name: 'address' })\r\nexport class AddressPipe\r\n  implements PipeTransform {\r\n\r\n  commentLabel = $localize`:address comments|Label preceding comments made for an address:Note`;\r\n\r\n  transform(value: Address, ...args: unknown[]): unknown {\r\n    return (value.firstLine +\r\n      (value.secondLine ? `, ${value.secondLine}` : '') +\r\n      `, ${value.city}, ${value.municipality}` +\r\n      (value.notes ? ` (${this.commentLabel}: ${value.notes})` : ''));\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'trustedResourceUrl' })\r\nexport class TrustedResourceUrlPipe\r\n  implements PipeTransform {\r\n\r\n  constructor(\r\n    private domSanitizer: DomSanitizer\r\n  ) { }\r\n\r\n  transform(value: unknown, ...args: unknown[]): unknown {\r\n    if (typeof value === 'string') {\r\n      return this.domSanitizer.bypassSecurityTrustResourceUrl(value);\r\n    } else {\r\n      throw new Error('Must provide a string');\r\n    }\r\n  }\r\n\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nconst _MatProgressBarBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/** @docs-private */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** Injection token to be used to override the default options for `mat-progress-bar`. */\nconst MAT_PROGRESS_BAR_DEFAULT_OPTIONS = new InjectionToken('MAT_PROGRESS_BAR_DEFAULT_OPTIONS');\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarBase {\n    constructor(elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location, defaults, \n    /**\n     * @deprecated `_changeDetectorRef` parameter to be made required.\n     * @breaking-change 11.0.0\n     */\n    _changeDetectorRef) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Flag that indicates whether NoopAnimations mode is set to true. */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /** Reference to animation end subscription to be unsubscribed on destroy. */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /** ID of the progress bar. */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use `Location`\n        // since we can't tell the difference between whether the consumer is using the hash location\n        // strategy or not, because `Location` normalizes both `/#/foo/bar` and `/foo/bar` to\n        // the same thing.\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            this.mode = defaults.mode || this.mode;\n        }\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        var _a;\n        this._value = clamp(coerceNumberProperty(v) || 0);\n        // @breaking-change 11.0.0 Remove null check for _changeDetectorRef.\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Buffer value of the progress bar. Defaults to zero. */\n    get bufferValue() {\n        return this._bufferValue;\n    }\n    set bufferValue(v) {\n        var _a;\n        this._bufferValue = clamp(v || 0);\n        // @breaking-change 11.0.0 Remove null check for _changeDetectorRef.\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Gets the current transform value for the progress bar's primary indicator. */\n    _primaryTransform() {\n        // We use a 3d transform to work around some rendering issues in iOS Safari. See #19328.\n        const scale = this.value / 100;\n        return { transform: `scale3d(${scale}, 1, 1)` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            // We use a 3d transform to work around some rendering issues in iOS Safari. See #19328.\n            const scale = this.bufferValue / 100;\n            return { transform: `scale3d(${scale}, 1, 1)` };\n        }\n        return null;\n    }\n    ngAfterViewInit() {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(() => {\n            const element = this._primaryValueBar.nativeElement;\n            this._animationEndSubscription = fromEvent(element, 'transitionend')\n                .pipe(filter((e) => e.target === element))\n                .subscribe(() => {\n                if (this.animationEnd.observers.length === 0) {\n                    return;\n                }\n                if (this.mode === 'determinate' || this.mode === 'buffer') {\n                    this._ngZone.run(() => this.animationEnd.next({ value: this.value }));\n                }\n            });\n        });\n    }\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n}\nMatProgressBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBar, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_BAR_LOCATION, optional: true }, { token: MAT_PROGRESS_BAR_DEFAULT_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatProgressBar, selector: \"mat-progress-bar\", inputs: { color: \"color\", value: \"value\", bufferValue: \"bufferValue\", mode: \"mode\" }, outputs: { animationEnd: \"animationEnd\" }, host: { attributes: { \"role\": \"progressbar\", \"aria-valuemin\": \"0\", \"aria-valuemax\": \"100\", \"tabindex\": \"-1\" }, properties: { \"attr.aria-valuenow\": \"(mode === \\\"indeterminate\\\" || mode === \\\"query\\\") ? null : value\", \"attr.mode\": \"mode\", \"class._mat-animation-noopable\": \"_isNoopAnimation\" }, classAttribute: \"mat-progress-bar\" }, viewQueries: [{ propertyName: \"_primaryValueBar\", first: true, predicate: [\"primaryValueBar\"], descendants: true }], exportAs: [\"matProgressBar\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div aria-hidden=\\\"true\\\">\\n  <svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n    <defs>\\n      <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n        <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n      </pattern>\\n    </defs>\\n    <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n  </svg>\\n  <!--\\n    The background div is named as such because it appears below the other divs and is not sized based\\n    on values.\\n  -->\\n  <div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n  <div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n  <div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n</div>\\n\", styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"], directives: [{ type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-bar', exportAs: 'matProgressBar', host: {\n                        'role': 'progressbar',\n                        'aria-valuemin': '0',\n                        'aria-valuemax': '100',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                        '[attr.mode]': 'mode',\n                        'class': 'mat-progress-bar',\n                        '[class._mat-animation-noopable]': '_isNoopAnimation',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div aria-hidden=\\\"true\\\">\\n  <svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n    <defs>\\n      <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n        <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n      </pattern>\\n    </defs>\\n    <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n  </svg>\\n  <!--\\n    The background div is named as such because it appears below the other divs and is not sized based\\n    on values.\\n  -->\\n  <div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n  <div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n  <div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n</div>\\n\", styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PROGRESS_BAR_LOCATION]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PROGRESS_BAR_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { value: [{\n                type: Input\n            }], bufferValue: [{\n                type: Input\n            }], _primaryValueBar: [{\n                type: ViewChild,\n                args: ['primaryValueBar']\n            }], animationEnd: [{\n                type: Output\n            }], mode: [{\n                type: Input\n            }] } });\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBarModule, declarations: [MatProgressBar], imports: [CommonModule, MatCommonModule], exports: [MatProgressBar, MatCommonModule] });\nMatProgressBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBarModule, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatProgressBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatProgressBar, MatCommonModule],\n                    declarations: [MatProgressBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_DEFAULT_OPTIONS, MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatBadgeModule,\r\n  MatButtonModule,\r\n  MatCardModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatFormFieldModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatTableModule,\r\n  MatTreeModule\r\n];\r\n\r\n// apps may change this module\r\nexport const DATE_PROVIDER_IMPLEMENTATION = MatNativeDateModule ;\r\n\r\n@NgModule({\r\n  imports: [\r\n    ...MATERIAL_MODULES,\r\n    DATE_PROVIDER_IMPLEMENTATION\r\n  ],\r\n  exports: [\r\n    ...MATERIAL_MODULES,\r\n    DATE_PROVIDER_IMPLEMENTATION\r\n  ]\r\n})\r\nexport class SharedMaterialModule { }\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppMaterialModule } from '../app-material.module';\r\nimport { DialogSwitcherButtonComponent } from './components/dialog-switcher-button/dialog-switcher-button.component';\r\nimport { GmapComponent } from './components/gmap/gmap.component';\r\nimport { HeaderBrandComponent } from './components/header-brand/header-brand.component';\r\nimport { ProductCardComponent } from './components/product-card/product-card.component';\r\nimport { ProductCategoryTreeComponent } from './components/product-category-tree/product-category-tree.component';\r\nimport { ProductFiltersPanelComponent } from './components/product-filters-panel/product-filters-panel.component';\r\nimport { SellDetailUnitsControlComponent } from './components/sell-detail-units-control/sell-detail-units-control.component';\r\nimport { SellDetailsTableComponent } from './components/sell-details-table/sell-details-table.component';\r\nimport { SellInformationComponent } from './components/sell-information/sell-information.component';\r\nimport { SlideshowComponent } from './components/slideshow/slideshow.component';\r\nimport { WhatsappButtonComponent } from './components/whatsapp-button/whatsapp-button.component';\r\nimport { ConfirmationDialogComponent } from './dialogs/confirmation/confirmation-dialog.component';\r\nimport { EditProfileFormDialogComponent } from './dialogs/edit-profile-form/edit-profile-form-dialog.component';\r\nimport { InformationDialogComponent } from './dialogs/information/information-dialog.component';\r\nimport { InputDialogComponent } from './dialogs/input/input-dialog.component';\r\nimport { ProductCategoryPickerDialogComponent } from './dialogs/product-category-picker/product-category-picker-dialog.component';\r\nimport { SharedDialogService } from './dialogs/shared-dialog.service';\r\nimport { AddressFormComponent } from './forms/address/address-form.component';\r\nimport { CompanyFormComponent } from './forms/company/company-form.component';\r\nimport { PersonFormComponent } from './forms/person/person-form.component';\r\nimport { ProductCategorySelectorFieldComponent } from './forms/product-category-selector-field/product-category-selector-field.component';\r\nimport { AddressPipe } from './pipes/address/address.pipe';\r\nimport { TrustedResourceUrlPipe } from './pipes/trusted-resource-url/trusted-resource-url.pipe';\r\nimport { SharedMaterialModule } from './shared-material.module';\r\n\r\n\r\nconst SHARED_DECLARATIONS = [\r\n  AddressFormComponent,\r\n  CompanyFormComponent,\r\n  DialogSwitcherButtonComponent,\r\n  GmapComponent,\r\n  HeaderBrandComponent,\r\n  PersonFormComponent,\r\n  ProductCardComponent,\r\n  ProductCategorySelectorFieldComponent,\r\n  ProductCategoryTreeComponent,\r\n  ProductFiltersPanelComponent,\r\n  SellDetailUnitsControlComponent,\r\n  SellDetailsTableComponent,\r\n  SellInformationComponent,\r\n  SlideshowComponent,\r\n  WhatsappButtonComponent,\r\n  ConfirmationDialogComponent,\r\n  EditProfileFormDialogComponent,\r\n  InformationDialogComponent,\r\n  InputDialogComponent,\r\n  ProductCategoryPickerDialogComponent,\r\n  AddressPipe,\r\n  TrustedResourceUrlPipe\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...SHARED_DECLARATIONS\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    AppMaterialModule,\r\n    SharedMaterialModule\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    AppMaterialModule,\r\n    SharedMaterialModule,\r\n\r\n    ...SHARED_DECLARATIONS\r\n  ],\r\n  providers: [\r\n    SharedDialogService\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\n/**\r\n * Returns true only if something is an actual JavaScript object; not null,\r\n * not an array of objects, or anything else.\r\n *\r\n * Taken from https://stackoverflow.com/a/8511350/2336212\r\n * @param variable something\r\n */\r\nexport function isJavaScriptObject(variable: any): boolean {\r\n  return (typeof variable === 'object'\r\n    && variable !== null\r\n    && !Array.isArray(variable));\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nexport const COMMON_WARNING_MESSAGE = $localize`:Message of warning raised during an operation, ask users to try again:There was an error while processing your request. Please try again.`;\r\nexport const COMMON_ERROR_MESSAGE = $localize`:Message of error raised during an operation, ask users to try again:There was an unexpected error, please try again later`;\r\n\r\nexport const COMMON_VALIDATION_ERROR_MESSAGE = $localize`:Message of error in validation of form, hint user to complete and/or fix supplied information:The form is in an invalid state. Please make sure you've correctly entered all the required information and try submitting it again.`;\r\n\r\nexport const COMMON_DISMISS_BUTTON_LABEL = $localize`:positive dismiss|Label for button to dismiss warnings, errors and other messages:OK`;\r\n","import { Observable } from '../Observable';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n","import { isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* INSERTED */ : 0 /* REPLACED */;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nUniqueSelectionDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nAutofillMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAutofill.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTextareaAutosize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\nTextFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode))\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeOutlet]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TREE_NODE_OUTLET_NODE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeDef, selector: \"[cdkTreeNodeDef]\", inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeDef]',\n                    inputs: ['when: cdkTreeNodeDefWhen'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTree, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nCdkTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTree, selector: \"cdk-tree\", inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, host: { attributes: { \"role\": \"tree\" }, classAttribute: \"cdk-tree\" }, queries: [{ propertyName: \"_nodeDefs\", predicate: CdkTreeNodeDef, descendants: true }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: CdkTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"cdkTree\"], ngImport: i0, template: `<ng-container cdkTreeNodeOutlet></ng-container>`, isInline: true, directives: [{ type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTree, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-tree',\n                    exportAs: 'cdkTree',\n                    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                    host: {\n                        'class': 'cdk-tree',\n                        'role': 'tree',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                    // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                    // declared elsewhere, they are checked when their declaration points are checked.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { dataSource: [{\n                type: Input\n            }], treeControl: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }], _nodeOutlet: [{\n                type: ViewChild,\n                args: [CdkTreeNodeOutlet, { static: true }]\n            }], _nodeDefs: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeDef, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() {\n        return 'treeitem';\n    }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() {\n        return this._data;\n    }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._data)\n            : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable &&\n            !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNode, selector: \"cdk-tree-node\", inputs: { role: \"role\" }, host: { properties: { \"attr.aria-expanded\": \"isExpanded\" }, classAttribute: \"cdk-tree-node\" }, exportAs: [\"cdkTreeNode\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-tree-node',\n                    exportAs: 'cdkTreeNode',\n                    host: {\n                        'class': 'cdk-tree-node',\n                        '[attr.aria-expanded]': 'isExpanded',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkNestedTreeNode, selector: \"cdk-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"cdk-nested-tree-node\" }, providers: [\n        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n    ], queries: [{ propertyName: \"nodeOutlet\", predicate: CdkTreeNodeOutlet, descendants: true }], exportAs: [\"cdkNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-nested-tree-node',\n                    exportAs: 'cdkNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'cdk-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }, { type: i0.IterableDiffers }]; }, propDecorators: { nodeOutlet: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeOutlet, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodePadding, deps: [{ token: CdkTreeNode }, { token: CdkTree }, { token: i0.ElementRef }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodePadding, selector: \"[cdkTreeNodePadding]\", inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodePadding]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkTreeNode }, { type: CdkTree }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { level: [{\n                type: Input,\n                args: ['cdkTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['cdkTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeToggle, deps: [{ token: CdkTree }, { token: CdkTreeNode }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeToggle, selector: \"[cdkTreeNodeToggle]\", inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] }, host: { listeners: { \"click\": \"_toggle($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeToggle]',\n                    host: {\n                        '(click)': '_toggle($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, propDecorators: { recursive: [{\n                type: Input,\n                args: ['cdkTreeNodeToggleRecursive']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] });\nCdkTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n","import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, imports: [[A11yModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\nconst _MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n})));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonBase {\n    constructor(elementRef, _focusMonitor, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._animationMode = _animationMode;\n        /** Whether the button is round. */\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n        /** Whether the button is icon button. */\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\n        // For each of the variant selectors that is present in the button's host\n        // attributes, add the correct corresponding class.\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\n            if (this._hasHostAttributes(attr)) {\n                this._getHostElement().classList.add(attr);\n            }\n        }\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\n        // the class is applied to derived classes.\n        elementRef.nativeElement.classList.add('mat-button-base');\n        if (this.isRoundButton) {\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Focuses the button. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n    }\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes) {\n        return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n    }\n}\nMatButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButton, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],\\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\\n             button[mat-flat-button]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\" }, host: { properties: { \"attr.disabled\": \"disabled || null\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-button-disabled\": \"disabled\" }, classAttribute: \"mat-focus-indicator\" }, viewQueries: [{ propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matButton\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButton, decorators: [{\n            type: Component,\n            args: [{ selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`, exportAs: 'matButton', host: {\n                        '[attr.disabled]': 'disabled || null',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        // Add a class for disabled button styling instead of the using attribute\n                        // selector or pseudo-selector.  This allows users to create focusabled\n                        // disabled buttons without recreating the styles.\n                        '[class.mat-button-disabled]': 'disabled',\n                        'class': 'mat-focus-indicator',\n                    }, inputs: ['disabled', 'disableRipple', 'color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }] } });\n/**\n * Material design anchor button.\n */\nclass MatAnchor extends MatButton {\n    constructor(focusMonitor, elementRef, animationMode, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(elementRef, focusMonitor, animationMode);\n        this._ngZone = _ngZone;\n        this._haltDisabledEvents = (event) => {\n            // A disabled button shouldn't apply any actions\n            if (this.disabled) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n            });\n        }\n        else {\n            this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n    }\n}\nMatAnchor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAnchor, deps: [{ token: i1.FocusMonitor }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatAnchor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAnchor, selector: \"a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-button-disabled\": \"disabled\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matButton\", \"matAnchor\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAnchor, decorators: [{\n            type: Component,\n            args: [{ selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`, exportAs: 'matButton, matAnchor', host: {\n                        // Note that we ignore the user-specified tabindex when it's disabled for\n                        // consistency with the `mat-button` applied on native buttons where even\n                        // though they have an index, they're not tabbable.\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-button-disabled]': 'disabled',\n                        'class': 'mat-focus-indicator',\n                    }, inputs: ['disabled', 'disableRipple', 'color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonModule {\n}\nMatButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, declarations: [MatButton, MatAnchor], imports: [MatRippleModule, MatCommonModule], exports: [MatButton, MatAnchor, MatCommonModule] });\nMatButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule],\n                    exports: [MatButton, MatAnchor, MatCommonModule],\n                    declarations: [MatButton, MatAnchor],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatAnchor, MatButton, MatButtonModule };\n","import * as i0 from '@angular/core';\nimport { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardContent, selector: \"mat-card-content, [mat-card-content], [matCardContent]\", host: { classAttribute: \"mat-card-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                    host: { 'class': 'mat-card-content' },\n                }]\n        }] });\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardTitle, selector: \"mat-card-title, [mat-card-title], [matCardTitle]\", host: { classAttribute: \"mat-card-title\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                    host: {\n                        'class': 'mat-card-title',\n                    },\n                }]\n        }] });\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardSubtitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardSubtitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardSubtitle, selector: \"mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]\", host: { classAttribute: \"mat-card-subtitle\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardSubtitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                    host: {\n                        'class': 'mat-card-subtitle',\n                    },\n                }]\n        }] });\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /** Position of the actions inside the card. */\n        this.align = 'start';\n    }\n}\nMatCardActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardActions, selector: \"mat-card-actions\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-card-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-card-actions\" }, exportAs: [\"matCardActions\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-card-actions',\n                    exportAs: 'matCardActions',\n                    host: {\n                        'class': 'mat-card-actions',\n                        '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardFooter, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardFooter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardFooter, selector: \"mat-card-footer\", host: { classAttribute: \"mat-card-footer\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardFooter, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-card-footer',\n                    host: { 'class': 'mat-card-footer' },\n                }]\n        }] });\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardImage, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardImage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardImage, selector: \"[mat-card-image], [matCardImage]\", host: { classAttribute: \"mat-card-image\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardImage, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-image], [matCardImage]',\n                    host: { 'class': 'mat-card-image' },\n                }]\n        }] });\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardSmImage, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardSmImage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardSmImage, selector: \"[mat-card-sm-image], [matCardImageSmall]\", host: { classAttribute: \"mat-card-sm-image\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardSmImage, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-sm-image], [matCardImageSmall]',\n                    host: { 'class': 'mat-card-sm-image' },\n                }]\n        }] });\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardMdImage, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardMdImage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardMdImage, selector: \"[mat-card-md-image], [matCardImageMedium]\", host: { classAttribute: \"mat-card-md-image\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardMdImage, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-md-image], [matCardImageMedium]',\n                    host: { 'class': 'mat-card-md-image' },\n                }]\n        }] });\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardLgImage, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardLgImage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardLgImage, selector: \"[mat-card-lg-image], [matCardImageLarge]\", host: { classAttribute: \"mat-card-lg-image\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardLgImage, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-lg-image], [matCardImageLarge]',\n                    host: { 'class': 'mat-card-lg-image' },\n                }]\n        }] });\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardXlImage, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardXlImage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardXlImage, selector: \"[mat-card-xl-image], [matCardImageXLarge]\", host: { classAttribute: \"mat-card-xl-image\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardXlImage, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                    host: { 'class': 'mat-card-xl-image' },\n                }]\n        }] });\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatCardAvatar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardAvatar, selector: \"[mat-card-avatar], [matCardAvatar]\", host: { classAttribute: \"mat-card-avatar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardAvatar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-card-avatar], [matCardAvatar]',\n                    host: { 'class': 'mat-card-avatar' },\n                }]\n        }] });\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCard, deps: [{ token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCard.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCard, selector: \"mat-card\", host: { properties: { \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-card mat-focus-indicator\" }, exportAs: [\"matCard\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\", styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px;display:block;overflow:hidden}.mat-card-image img{width:100%}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions:not(.mat-card-actions-align-end) .mat-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-raised-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-actions-align-end .mat-button:last-child,.mat-card-actions-align-end .mat-raised-button:last-child,.mat-card-actions-align-end .mat-stroked-button:last-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCard, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-card', exportAs: 'matCard', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-card mat-focus-indicator',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\", styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px;display:block;overflow:hidden}.mat-card-image img{width:100%}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions:not(.mat-card-actions-align-end) .mat-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-raised-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-actions-align-end .mat-button:last-child,.mat-card-actions-align-end .mat-raised-button:last-child,.mat-card-actions-align-end .mat-stroked-button:last-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardHeader, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatCardHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardHeader, selector: \"mat-card-header\", host: { classAttribute: \"mat-card-header\" }, ngImport: i0, template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-card-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: { 'class': 'mat-card-header' }, template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\" }]\n        }] });\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardTitleGroup, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatCardTitleGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCardTitleGroup, selector: \"mat-card-title-group\", host: { classAttribute: \"mat-card-title-group\" }, ngImport: i0, template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardTitleGroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-card-title-group', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: { 'class': 'mat-card-title-group' }, template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\" }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatCardModule {\n}\nMatCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardModule, declarations: [MatCard,\n        MatCardHeader,\n        MatCardTitleGroup,\n        MatCardContent,\n        MatCardTitle,\n        MatCardSubtitle,\n        MatCardActions,\n        MatCardFooter,\n        MatCardSmImage,\n        MatCardMdImage,\n        MatCardLgImage,\n        MatCardImage,\n        MatCardXlImage,\n        MatCardAvatar], imports: [MatCommonModule], exports: [MatCard,\n        MatCardHeader,\n        MatCardTitleGroup,\n        MatCardContent,\n        MatCardTitle,\n        MatCardSubtitle,\n        MatCardActions,\n        MatCardFooter,\n        MatCardSmImage,\n        MatCardMdImage,\n        MatCardLgImage,\n        MatCardImage,\n        MatCardXlImage,\n        MatCardAvatar,\n        MatCommonModule] });\nMatCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [\n                        MatCard,\n                        MatCardHeader,\n                        MatCardTitleGroup,\n                        MatCardContent,\n                        MatCardTitle,\n                        MatCardSubtitle,\n                        MatCardActions,\n                        MatCardFooter,\n                        MatCardSmImage,\n                        MatCardMdImage,\n                        MatCardLgImage,\n                        MatCardImage,\n                        MatCardXlImage,\n                        MatCardAvatar,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatCard,\n                        MatCardHeader,\n                        MatCardTitleGroup,\n                        MatCardContent,\n                        MatCardTitle,\n                        MatCardSubtitle,\n                        MatCardActions,\n                        MatCardFooter,\n                        MatCardSmImage,\n                        MatCardMdImage,\n                        MatCardLgImage,\n                        MatCardImage,\n                        MatCardXlImage,\n                        MatCardAvatar,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n        transition('* => void, * => exit', group([\n            animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n    ]),\n};\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _interactivityChecker, _ngZone, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            if (this._config.delayFocusTrap) {\n                this._trapFocus();\n            }\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _initializeWithAttachedContent() {\n        super._initializeWithAttachedContent();\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\", \"aria-modal\": \"true\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"id\": \"_id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_state\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        'aria-modal': 'true',\n                        '[id]': '_id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': '_state',\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef\n            .keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation,\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                $implicit: config.data,\n                dialogRef,\n            }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef },\n        ];\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", host: { classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: { 'class': 'mat-dialog-actions' },\n                }]\n        }] });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /** Whether the divider is vertically aligned. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Whether the divider is an inset divider. */\n    get inset() {\n        return this._inset;\n    }\n    set inset(value) {\n        this._inset = coerceBooleanProperty(value);\n    }\n}\nMatDivider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDivider, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatDivider.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDivider, selector: \"mat-divider\", inputs: { vertical: \"vertical\", inset: \"inset\" }, host: { attributes: { \"role\": \"separator\" }, properties: { \"attr.aria-orientation\": \"vertical ? \\\"vertical\\\" : \\\"horizontal\\\"\", \"class.mat-divider-vertical\": \"vertical\", \"class.mat-divider-horizontal\": \"!vertical\", \"class.mat-divider-inset\": \"inset\" }, classAttribute: \"mat-divider\" }, ngImport: i0, template: '', isInline: true, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDivider, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-divider', host: {\n                        'role': 'separator',\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                        '[class.mat-divider-vertical]': 'vertical',\n                        '[class.mat-divider-horizontal]': '!vertical',\n                        '[class.mat-divider-inset]': 'inset',\n                        'class': 'mat-divider',\n                    }, template: '', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"] }]\n        }], propDecorators: { vertical: [{\n                type: Input\n            }], inset: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDividerModule {\n}\nMatDividerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDividerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDividerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDividerModule, declarations: [MatDivider], imports: [MatCommonModule], exports: [MatDivider, MatCommonModule] });\nMatDividerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDividerModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDividerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatDivider, MatCommonModule],\n                    declarations: [MatDivider],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, Output, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    get multi() {\n        return this._multi;\n    }\n    set multi(multi) {\n        this._multi = coerceBooleanProperty(multi);\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this._multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n}\nCdkAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkAccordion, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: \"multi\" }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                }]\n        }], propDecorators: { multi: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the AccordionItem is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(disabled) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionItem, deps: [{ token: CDK_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAccordionItem.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkAccordionItem, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n        // registering to the same accordion.\n        { provide: CDK_ACCORDION, useValue: undefined },\n    ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkAccordion, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_ACCORDION]\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }];\n    }, propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkAccordionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionModule, declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] });\nCdkAccordionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n        // to the same accordion.\n        { provide: MAT_ACCORDION, useValue: undefined },\n    ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [MAT_ACCORDION]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelActionRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanelHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatExpansionPanel, decorators: [{\n                        type: Host\n                    }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelDescription.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n        {\n            provide: MAT_ACCORDION,\n            useExisting: MatAccordion,\n        },\n    ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatExpansionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent], imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent] });\nMatExpansionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n","import * as i4 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Attribute, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor(ariaLive, elementRef) {\n        this.id = `mat-error-${nextUniqueId$2++}`;\n        // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n        // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n        if (!ariaLive) {\n            elementRef.nativeElement.setAttribute('aria-live', 'polite');\n        }\n    }\n}\nMatError.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatError, deps: [{ token: 'aria-live', attribute: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatError.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatError, selector: \"mat-error\", inputs: { id: \"id\" }, host: { attributes: { \"aria-atomic\": \"true\" }, properties: { \"attr.id\": \"id\" }, classAttribute: \"mat-error\" }, providers: [{ provide: MAT_ERROR, useExisting: MatError }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatError, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-error',\n                    host: {\n                        'class': 'mat-error',\n                        '[attr.id]': 'id',\n                        'aria-atomic': 'true',\n                    },\n                    providers: [{ provide: MAT_ERROR, useExisting: MatError }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-live']\n                    }] }, { type: i0.ElementRef }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatFormFieldControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFormFieldControl, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldControl, decorators: [{\n            type: Directive\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHint, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatHint.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHint, selector: \"mat-hint\", inputs: { align: \"align\", id: \"id\" }, host: { properties: { \"class.mat-form-field-hint-end\": \"align === \\\"end\\\"\", \"attr.id\": \"id\", \"attr.align\": \"null\" }, classAttribute: \"mat-hint\" }, providers: [{ provide: _MAT_HINT, useExisting: MatHint }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHint, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-hint',\n                    host: {\n                        'class': 'mat-hint',\n                        '[class.mat-form-field-hint-end]': 'align === \"end\"',\n                        '[attr.id]': 'id',\n                        // Remove align attribute to prevent it from interfering with layout.\n                        '[attr.align]': 'null',\n                    },\n                    providers: [{ provide: _MAT_HINT, useExisting: MatHint }],\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatLabel, selector: \"mat-label\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-label',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPlaceholder, selector: \"mat-placeholder\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-placeholder',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPrefix, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatPrefix.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPrefix, selector: \"[matPrefix]\", providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPrefix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matPrefix]',\n                    providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSuffix, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSuffix.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSuffix, selector: \"[matSuffix]\", providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSuffix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSuffix]',\n                    providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }],\n                }]\n        }] });\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nconst _MatFormFieldBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldBase {\n    constructor(elementRef, _changeDetectorRef, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId++}`;\n        // Unique id for the label element.\n        this._labelId = `mat-form-field-label-${nextUniqueId++}`;\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker =\n            _defaults && _defaults.hideRequiredMarker != null ? _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() {\n        return this._appearance;\n    }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() {\n        return this._hideRequiredMarker;\n    }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() {\n        return this.floatLabel !== 'never';\n    }\n    /** Text for the form field hint. */\n    get hintLabel() {\n        return this._hintLabel;\n    }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId() {\n        return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!((this._control && this._control.placeholder) || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return (this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat()));\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return ((this.appearance === 'legacy' && !this._hasLabel()) ||\n            (this._hasLabel() && !this._shouldLabelFloat()));\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || (this.appearance === 'legacy' && this._hasPlaceholder());\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n            ? 'error'\n            : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend')\n                    .pipe(take(1))\n                    .subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder &&\n            this._placeholderChild &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'start')\n                    : null;\n                const endHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'end')\n                    : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        const container = this._connectionContainerRef.nativeElement;\n        const outlineStartSelector = '.mat-form-field-outline-start';\n        const outlineGapSelector = '.mat-form-field-outline-gap';\n        // getBoundingClientRect isn't available on the server.\n        if (this.appearance !== 'outline' || !this._platform.isBrowser) {\n            return;\n        }\n        // If there is no content, set the gap elements to zero.\n        if (!labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n            const gapElements = container.querySelectorAll(`${outlineStartSelector}, ${outlineGapSelector}`);\n            for (let i = 0; i < gapElements.length; i++) {\n                gapElements[i].style.width = '0';\n            }\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const startEls = container.querySelectorAll(outlineStartSelector);\n        const gapEls = container.querySelectorAll(outlineGapSelector);\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately =\n            false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormField, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Directionality, optional: true }, { token: MAT_FORM_FIELD_DEFAULT_OPTIONS, optional: true }, { token: i2.Platform }, { token: i0.NgZone }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatFormField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFormField, selector: \"mat-form-field\", inputs: { color: \"color\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\", floatLabel: \"floatLabel\" }, host: { properties: { \"class.mat-form-field-appearance-standard\": \"appearance == \\\"standard\\\"\", \"class.mat-form-field-appearance-fill\": \"appearance == \\\"fill\\\"\", \"class.mat-form-field-appearance-outline\": \"appearance == \\\"outline\\\"\", \"class.mat-form-field-appearance-legacy\": \"appearance == \\\"legacy\\\"\", \"class.mat-form-field-invalid\": \"_control.errorState\", \"class.mat-form-field-can-float\": \"_canLabelFloat()\", \"class.mat-form-field-should-float\": \"_shouldLabelFloat()\", \"class.mat-form-field-has-label\": \"_hasFloatingLabel()\", \"class.mat-form-field-hide-placeholder\": \"_hideControlPlaceholder()\", \"class.mat-form-field-disabled\": \"_control.disabled\", \"class.mat-form-field-autofilled\": \"_control.autofilled\", \"class.mat-focused\": \"_control.focused\", \"class.ng-untouched\": \"_shouldForward(\\\"untouched\\\")\", \"class.ng-touched\": \"_shouldForward(\\\"touched\\\")\", \"class.ng-pristine\": \"_shouldForward(\\\"pristine\\\")\", \"class.ng-dirty\": \"_shouldForward(\\\"dirty\\\")\", \"class.ng-valid\": \"_shouldForward(\\\"valid\\\")\", \"class.ng-invalid\": \"_shouldForward(\\\"invalid\\\")\", \"class.ng-pending\": \"_shouldForward(\\\"pending\\\")\", \"class._mat-animation-noopable\": \"!_animationsEnabled\" }, classAttribute: \"mat-form-field\" }, providers: [{ provide: MAT_FORM_FIELD, useExisting: MatFormField }], queries: [{ propertyName: \"_controlNonStatic\", first: true, predicate: MatFormFieldControl, descendants: true }, { propertyName: \"_controlStatic\", first: true, predicate: MatFormFieldControl, descendants: true, static: true }, { propertyName: \"_labelChildNonStatic\", first: true, predicate: MatLabel, descendants: true }, { propertyName: \"_labelChildStatic\", first: true, predicate: MatLabel, descendants: true, static: true }, { propertyName: \"_placeholderChild\", first: true, predicate: MatPlaceholder, descendants: true }, { propertyName: \"_errorChildren\", predicate: MAT_ERROR, descendants: true }, { propertyName: \"_hintChildren\", predicate: _MAT_HINT, descendants: true }, { propertyName: \"_prefixChildren\", predicate: MAT_PREFIX, descendants: true }, { propertyName: \"_suffixChildren\", predicate: MAT_SUFFIX, descendants: true }], viewQueries: [{ propertyName: \"_connectionContainerRef\", first: true, predicate: [\"connectionContainer\"], descendants: true, static: true }, { propertyName: \"_inputContainerRef\", first: true, predicate: [\"inputContainer\"], descendants: true }, { propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true }], exportAs: [\"matFormField\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div\\n      class=\\\"mat-form-field-prefix\\\"\\n      *ngIf=\\\"_prefixChildren.length\\\"\\n      (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n      [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\"\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.cdk-high-contrast-active .mat-form-field-disabled .mat-form-field-label{color:GrayText}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-form-field-flex{outline:dashed 3px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element:not([type=password])::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{opacity:0}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px)}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px;border-top-color:GrayText}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{border:3px dashed}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:GrayText}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }, { type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], animations: [matFormFieldAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-form-field', exportAs: 'matFormField', animations: [matFormFieldAnimations.transitionMessages], host: {\n                        'class': 'mat-form-field',\n                        '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                        '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                        '[class.mat-form-field-invalid]': '_control.errorState',\n                        '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                        '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                        '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                        '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                        '[class.mat-form-field-disabled]': '_control.disabled',\n                        '[class.mat-form-field-autofilled]': '_control.autofilled',\n                        '[class.mat-focused]': '_control.focused',\n                        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                        '[class.ng-touched]': '_shouldForward(\"touched\")',\n                        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                        '[class.ng-valid]': '_shouldForward(\"valid\")',\n                        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                        '[class.ng-pending]': '_shouldForward(\"pending\")',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                    }, inputs: ['color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: MAT_FORM_FIELD, useExisting: MatFormField }], template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div\\n      class=\\\"mat-form-field-prefix\\\"\\n      *ngIf=\\\"_prefixChildren.length\\\"\\n      (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n      [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\"\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.cdk-high-contrast-active .mat-form-field-disabled .mat-form-field-label{color:GrayText}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-form-field-flex{outline:dashed 3px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element:not([type=password])::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{opacity:0}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px)}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px;border-top-color:GrayText}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{border:3px dashed}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:GrayText}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n                    }] }, { type: i2.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { appearance: [{\n                type: Input\n            }], hideRequiredMarker: [{\n                type: Input\n            }], hintLabel: [{\n                type: Input\n            }], floatLabel: [{\n                type: Input\n            }], _connectionContainerRef: [{\n                type: ViewChild,\n                args: ['connectionContainer', { static: true }]\n            }], _inputContainerRef: [{\n                type: ViewChild,\n                args: ['inputContainer']\n            }], _label: [{\n                type: ViewChild,\n                args: ['label']\n            }], _controlNonStatic: [{\n                type: ContentChild,\n                args: [MatFormFieldControl]\n            }], _controlStatic: [{\n                type: ContentChild,\n                args: [MatFormFieldControl, { static: true }]\n            }], _labelChildNonStatic: [{\n                type: ContentChild,\n                args: [MatLabel]\n            }], _labelChildStatic: [{\n                type: ContentChild,\n                args: [MatLabel, { static: true }]\n            }], _placeholderChild: [{\n                type: ContentChild,\n                args: [MatPlaceholder]\n            }], _errorChildren: [{\n                type: ContentChildren,\n                args: [MAT_ERROR, { descendants: true }]\n            }], _hintChildren: [{\n                type: ContentChildren,\n                args: [_MAT_HINT, { descendants: true }]\n            }], _prefixChildren: [{\n                type: ContentChildren,\n                args: [MAT_PREFIX, { descendants: true }]\n            }], _suffixChildren: [{\n                type: ContentChildren,\n                args: [MAT_SUFFIX, { descendants: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatFormFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix], imports: [CommonModule, MatCommonModule, ObserversModule], exports: [MatCommonModule,\n        MatError,\n        MatFormField,\n        MatHint,\n        MatLabel,\n        MatPlaceholder,\n        MatPrefix,\n        MatSuffix] });\nMatFormFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, imports: [[CommonModule, MatCommonModule, ObserversModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n                    imports: [CommonModule, MatCommonModule, ObserversModule],\n                    exports: [\n                        MatCommonModule,\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n","/**\n * @license Angular v13.3.5\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '2B': '+',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => { var _a; return (_a = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _a !== void 0 ? _a : s; });\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClient });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NoopInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNoopInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NoopInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: NoopInterceptor, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpClientBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpClientBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: JsonpClientBackend }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpClientBackend }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXhrBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXhrBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_COOKIE_NAME]\n                    }] }];\n    } });\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: HttpXsrfTokenExtractor }, { token: XSRF_HEADER_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: HttpXsrfTokenExtractor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [XSRF_HEADER_NAME]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpInterceptingHandler, deps: [{ token: HttpBackend }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpInterceptingHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpInterceptingHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpInterceptingHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.Injector }]; } });\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientXsrfModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientModule, imports: [HttpClientXsrfModule] });\nHttpClientModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientModule, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN',\n            }),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Optional configuration for XSRF protection.\n                     */\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientJsonpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler };\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    var _a;\n    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(html)) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HttpClient, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ErrorHandler }];\n    } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet)\n            : this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-hidden']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_ICON_LOCATION]\n                    }] }, { type: i0.ErrorHandler }];\n    }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [MAT_INPUT_VALUE_ACCESSOR]\n                    }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Optional, Inject, ContentChildren, ContentChild, Input, forwardRef, EventEmitter, Output, ViewChild, Attribute, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nconst _MatListBase = mixinDisabled(mixinDisableRipple(class {\n}));\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nconst _MatListItemMixinBase = mixinDisableRipple(class {\n});\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_LIST = new InjectionToken('MatList');\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_NAV_LIST = new InjectionToken('MatNavList');\nclass MatNavList extends _MatListBase {\n    constructor() {\n        super(...arguments);\n        /** Emits when the state of the list changes. */\n        this._stateChanges = new Subject();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatNavList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNavList, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatNavList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatNavList, selector: \"mat-nav-list\", inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, host: { attributes: { \"role\": \"navigation\" }, classAttribute: \"mat-nav-list mat-list-base\" }, providers: [{ provide: MAT_NAV_LIST, useExisting: MatNavList }], exportAs: [\"matNavList\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content></ng-content>\\n\\n\", styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNavList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-nav-list', exportAs: 'matNavList', host: {\n                        'role': 'navigation',\n                        'class': 'mat-nav-list mat-list-base',\n                    }, inputs: ['disableRipple', 'disabled'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: MAT_NAV_LIST, useExisting: MatNavList }], template: \"<ng-content></ng-content>\\n\\n\", styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"] }]\n        }] });\nclass MatList extends _MatListBase {\n    constructor(_elementRef) {\n        super();\n        this._elementRef = _elementRef;\n        /** Emits when the state of the list changes. */\n        this._stateChanges = new Subject();\n        if (this._getListType() === 'action-list') {\n            _elementRef.nativeElement.classList.add('mat-action-list');\n        }\n    }\n    _getListType() {\n        const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n        if (nodeName === 'mat-list') {\n            return 'list';\n        }\n        if (nodeName === 'mat-action-list') {\n            return 'action-list';\n        }\n        return null;\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatList, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nMatList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatList, selector: \"mat-list, mat-action-list\", inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, host: { classAttribute: \"mat-list mat-list-base\" }, providers: [{ provide: MAT_LIST, useExisting: MatList }], exportAs: [\"matList\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content></ng-content>\\n\\n\", styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-list, mat-action-list', exportAs: 'matList', host: {\n                        'class': 'mat-list mat-list-base',\n                    }, inputs: ['disableRipple', 'disabled'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: MAT_LIST, useExisting: MatList }], template: \"<ng-content></ng-content>\\n\\n\", styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListAvatarCssMatStyler {\n}\nMatListAvatarCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListAvatarCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatListAvatarCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatListAvatarCssMatStyler, selector: \"[mat-list-avatar], [matListAvatar]\", host: { classAttribute: \"mat-list-avatar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListAvatarCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-list-avatar], [matListAvatar]',\n                    host: { 'class': 'mat-list-avatar' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListIconCssMatStyler {\n}\nMatListIconCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListIconCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatListIconCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatListIconCssMatStyler, selector: \"[mat-list-icon], [matListIcon]\", host: { classAttribute: \"mat-list-icon\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListIconCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-list-icon], [matListIcon]',\n                    host: { 'class': 'mat-list-icon' },\n                }]\n        }] });\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListSubheaderCssMatStyler {\n}\nMatListSubheaderCssMatStyler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListSubheaderCssMatStyler, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatListSubheaderCssMatStyler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatListSubheaderCssMatStyler, selector: \"[mat-subheader], [matSubheader]\", host: { classAttribute: \"mat-subheader\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListSubheaderCssMatStyler, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-subheader], [matSubheader]',\n                    host: { 'class': 'mat-subheader' },\n                }]\n        }] });\n/** An item within a Material Design list. */\nclass MatListItem extends _MatListItemMixinBase {\n    constructor(_element, _changeDetectorRef, navList, list) {\n        super();\n        this._element = _element;\n        this._isInteractiveList = false;\n        this._destroyed = new Subject();\n        this._disabled = false;\n        this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n        this._list = navList || list;\n        // If no type attribute is specified for <button>, set it to \"button\".\n        // If a type attribute is already specified, do nothing.\n        const element = this._getHostElement();\n        if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n            element.setAttribute('type', 'button');\n        }\n        if (this._list) {\n            // React to changes in the state of the parent list since\n            // some of the item's properties depend on it (e.g. `disableRipple`).\n            this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                _changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._list && this._list.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled() {\n        return (!this._isInteractiveList || this.disableRipple || !!(this._list && this._list.disableRipple));\n    }\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n}\nMatListItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListItem, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_NAV_LIST, optional: true }, { token: MAT_LIST, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatListItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatListItem, selector: \"mat-list-item, a[mat-list-item], button[mat-list-item]\", inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, host: { properties: { \"class.mat-list-item-disabled\": \"disabled\", \"class.mat-list-item-avatar\": \"_avatar || _icon\", \"class.mat-list-item-with-avatar\": \"_avatar || _icon\" }, classAttribute: \"mat-list-item mat-focus-indicator\" }, queries: [{ propertyName: \"_avatar\", first: true, predicate: MatListAvatarCssMatStyler, descendants: true }, { propertyName: \"_icon\", first: true, predicate: MatListIconCssMatStyler, descendants: true }, { propertyName: \"_lines\", predicate: MatLine, descendants: true }], exportAs: [\"matListItem\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-list-item-content\\\">\\n  <span class=\\\"mat-list-item-ripple\\\" mat-ripple\\n       [matRippleTrigger]=\\\"_getHostElement()\\\"\\n       [matRippleDisabled]=\\\"_isRippleDisabled()\\\">\\n  </span>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n  <span class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></span>\\n\\n  <ng-content></ng-content>\\n</span>\\n\", directives: [{ type: i1.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListItem, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]', exportAs: 'matListItem', host: {\n                        'class': 'mat-list-item mat-focus-indicator',\n                        '[class.mat-list-item-disabled]': 'disabled',\n                        // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n                        '[class.mat-list-item-avatar]': '_avatar || _icon',\n                        '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n                    }, inputs: ['disableRipple'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span class=\\\"mat-list-item-content\\\">\\n  <span class=\\\"mat-list-item-ripple\\\" mat-ripple\\n       [matRippleTrigger]=\\\"_getHostElement()\\\"\\n       [matRippleDisabled]=\\\"_isRippleDisabled()\\\">\\n  </span>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n  <span class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></span>\\n\\n  <ng-content></ng-content>\\n</span>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: MatNavList, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_NAV_LIST]\n                    }] }, { type: MatList, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_LIST]\n                    }] }];\n    }, propDecorators: { _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }], _avatar: [{\n                type: ContentChild,\n                args: [MatListAvatarCssMatStyler]\n            }], _icon: [{\n                type: ContentChild,\n                args: [MatListIconCssMatStyler]\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatSelectionListBase = mixinDisableRipple(class {\n});\nconst _MatListOptionBase = mixinDisableRipple(class {\n});\n/** @docs-private */\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectionList),\n    multi: true,\n};\n/** Change event that is being fired whenever the selected state of an option changes. */\nclass MatSelectionListChange {\n    constructor(\n    /** Reference to the selection list that emitted the event. */\n    source, \n    /**\n     * Reference to the option that has been changed.\n     * @deprecated Use `options` instead, because some events may change more than one option.\n     * @breaking-change 12.0.0\n     */\n    option, \n    /** Reference to the options that have been changed. */\n    options) {\n        this.source = source;\n        this.option = option;\n        this.options = options;\n    }\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nclass MatListOption extends _MatListOptionBase {\n    constructor(_element, _changeDetector, \n    /** @docs-private */\n    selectionList) {\n        super();\n        this._element = _element;\n        this._changeDetector = _changeDetector;\n        this.selectionList = selectionList;\n        this._selected = false;\n        this._disabled = false;\n        this._hasFocus = false;\n        /**\n         * Emits when the selected state of the option has changed.\n         * Use to facilitate two-data binding to the `selected` property.\n         * @docs-private\n         */\n        this.selectedChange = new EventEmitter();\n        /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n        this.checkboxPosition = 'after';\n        /**\n         * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n         * in the first cycle.\n         */\n        this._inputsInitialized = false;\n    }\n    /** Theme color of the list option. This sets the color of the checkbox. */\n    get color() {\n        return this._color || this.selectionList.color;\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    /** Value of the option */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this.selected &&\n            !this.selectionList.compareWith(newValue, this.value) &&\n            this._inputsInitialized) {\n            this.selected = false;\n        }\n        this._value = newValue;\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n        return this._disabled || (this.selectionList && this.selectionList.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Whether the option is selected. */\n    get selected() {\n        return this.selectionList.selectedOptions.isSelected(this);\n    }\n    set selected(value) {\n        const isSelected = coerceBooleanProperty(value);\n        if (isSelected !== this._selected) {\n            this._setSelected(isSelected);\n            if (isSelected || this.selectionList.multiple) {\n                this.selectionList._reportValueChange();\n            }\n        }\n    }\n    ngOnInit() {\n        const list = this.selectionList;\n        if (list._value && list._value.some(value => list.compareWith(this._value, value))) {\n            this._setSelected(true);\n        }\n        const wasSelected = this._selected;\n        // List options that are selected at initialization can't be reported properly to the form\n        // control. This is because it takes some time until the selection-list knows about all\n        // available options. Also it can happen that the ControlValueAccessor has an initial value\n        // that should be used instead. Deferring the value change report to the next tick ensures\n        // that the form control value is not being overwritten.\n        Promise.resolve().then(() => {\n            if (this._selected || wasSelected) {\n                this.selected = true;\n                this._changeDetector.markForCheck();\n            }\n        });\n        this._inputsInitialized = true;\n    }\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    ngOnDestroy() {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => {\n                this.selected = false;\n            });\n        }\n        const hadFocus = this._hasFocus;\n        const newActiveItem = this.selectionList._removeOptionFromList(this);\n        // Only move focus if this option was focused at the time it was destroyed.\n        if (hadFocus && newActiveItem) {\n            newActiveItem.focus();\n        }\n    }\n    /** Toggles the selection state of the option. */\n    toggle() {\n        this.selected = !this.selected;\n    }\n    /** Allows for programmatic focusing of the option. */\n    focus() {\n        this._element.nativeElement.focus();\n    }\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent || '' : '';\n    }\n    /** Whether this list item should show a ripple effect when clicked. */\n    _isRippleDisabled() {\n        return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n    _handleClick() {\n        if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n            this.toggle();\n            // Emit a change event if the selected state of the option changed through user interaction.\n            this.selectionList._emitChangeEvent([this]);\n        }\n    }\n    _handleFocus() {\n        this.selectionList._setFocusedOption(this);\n        this._hasFocus = true;\n    }\n    _handleBlur() {\n        this.selectionList._onTouched();\n        this._hasFocus = false;\n    }\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    /** Sets the selected state of the option. Returns whether the value has changed. */\n    _setSelected(selected) {\n        if (selected === this._selected) {\n            return false;\n        }\n        this._selected = selected;\n        if (selected) {\n            this.selectionList.selectedOptions.select(this);\n        }\n        else {\n            this.selectionList.selectedOptions.deselect(this);\n        }\n        this.selectedChange.emit(selected);\n        this._changeDetector.markForCheck();\n        return true;\n    }\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     */\n    _markForCheck() {\n        this._changeDetector.markForCheck();\n    }\n}\nMatListOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListOption, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSelectionList) }], target: i0.ɵɵFactoryTarget.Component });\nMatListOption.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatListOption, selector: \"mat-list-option\", inputs: { disableRipple: \"disableRipple\", checkboxPosition: \"checkboxPosition\", color: \"color\", value: \"value\", disabled: \"disabled\", selected: \"selected\" }, outputs: { selectedChange: \"selectedChange\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"focus\": \"_handleFocus()\", \"blur\": \"_handleBlur()\", \"click\": \"_handleClick()\" }, properties: { \"class.mat-list-item-disabled\": \"disabled\", \"class.mat-list-item-with-avatar\": \"_avatar || _icon\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color !== \\\"primary\\\" && color !== \\\"warn\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.mat-list-single-selected-option\": \"selected && !selectionList.multiple\", \"attr.aria-selected\": \"selected\", \"attr.aria-disabled\": \"disabled\", \"attr.tabindex\": \"-1\" }, classAttribute: \"mat-list-item mat-list-option mat-focus-indicator\" }, queries: [{ propertyName: \"_avatar\", first: true, predicate: MatListAvatarCssMatStyler, descendants: true }, { propertyName: \"_icon\", first: true, predicate: MatListIconCssMatStyler, descendants: true }, { propertyName: \"_lines\", predicate: MatLine, descendants: true }], viewQueries: [{ propertyName: \"_text\", first: true, predicate: [\"text\"], descendants: true }], exportAs: [\"matListOption\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-list-item-content\\\"\\n  [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\">\\n\\n  <div mat-ripple\\n    class=\\\"mat-list-item-ripple\\\"\\n    [matRippleTrigger]=\\\"_getHostElement()\\\"\\n    [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div>\\n\\n  <mat-pseudo-checkbox\\n    *ngIf=\\\"selectionList.multiple\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n    [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n  <div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n</div>\\n\", components: [{ type: i1.MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\"] }], directives: [{ type: i1.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListOption, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-list-option', exportAs: 'matListOption', inputs: ['disableRipple'], host: {\n                        'role': 'option',\n                        'class': 'mat-list-item mat-list-option mat-focus-indicator',\n                        '(focus)': '_handleFocus()',\n                        '(blur)': '_handleBlur()',\n                        '(click)': '_handleClick()',\n                        '[class.mat-list-item-disabled]': 'disabled',\n                        '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n                        // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n                        // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n                        // its theme.\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        // Even though accent is the default, we need to set this class anyway, because the  list might\n                        // be placed inside a parent that has one of the other colors with a higher specificity.\n                        '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n                        '[attr.aria-selected]': 'selected',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.tabindex]': '-1',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-list-item-content\\\"\\n  [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\">\\n\\n  <div mat-ripple\\n    class=\\\"mat-list-item-ripple\\\"\\n    [matRippleTrigger]=\\\"_getHostElement()\\\"\\n    [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div>\\n\\n  <mat-pseudo-checkbox\\n    *ngIf=\\\"selectionList.multiple\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n    [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n  <div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: MatSelectionList, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatSelectionList)]\n                    }] }];\n    }, propDecorators: { _avatar: [{\n                type: ContentChild,\n                args: [MatListAvatarCssMatStyler]\n            }], _icon: [{\n                type: ContentChild,\n                args: [MatListIconCssMatStyler]\n            }], _lines: [{\n                type: ContentChildren,\n                args: [MatLine, { descendants: true }]\n            }], selectedChange: [{\n                type: Output\n            }], _text: [{\n                type: ViewChild,\n                args: ['text']\n            }], checkboxPosition: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }] } });\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nclass MatSelectionList extends _MatSelectionListBase {\n    constructor(_element, \n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    tabIndex, _changeDetector, \n    // @breaking-change 11.0.0 `_focusMonitor` parameter to become required.\n    _focusMonitor) {\n        super();\n        this._element = _element;\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._multiple = true;\n        this._contentInitialized = false;\n        /** Emits a change event whenever the selected state of an option changes. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Tabindex of the selection list.\n         * @breaking-change 11.0.0 Remove `tabIndex` input.\n         */\n        this.tabIndex = 0;\n        /** Theme color of the selection list. This sets the checkbox color for all list options. */\n        this.color = 'accent';\n        /**\n         * Function used for comparing an option against the selected value when determining which\n         * options should appear as selected. The first argument is the value of an options. The second\n         * one is a value from the selected value. A boolean must be returned.\n         */\n        this.compareWith = (a1, a2) => a1 === a2;\n        this._disabled = false;\n        /** The currently selected options. */\n        this.selectedOptions = new SelectionModel(this._multiple);\n        /** The tabindex of the selection list. */\n        this._tabIndex = -1;\n        /** View to model callback that should be called whenever the selected options change. */\n        this._onChange = (_) => { };\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /** View to model callback that should be called if the list or its options lost focus. */\n        this._onTouched = () => { };\n    }\n    /** Whether the selection list is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n        // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n        // changed its state. Since we know that a change to `disabled` property of the list affects\n        // the state of the options, we manually mark each option for check.\n        this._markOptionsForCheck();\n    }\n    /** Whether selection is limited to one or multiple items (default multiple). */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._multiple) {\n            if (this._contentInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n            }\n            this._multiple = newValue;\n            this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n        }\n    }\n    ngAfterContentInit() {\n        var _a;\n        this._contentInitialized = true;\n        this._keyManager = new FocusKeyManager(this.options)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd()\n            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n            // screenreader users, that allows reading the different options of the list.\n            .skipPredicate(() => false)\n            .withAllowedModifierKeys(['shiftKey']);\n        if (this._value) {\n            this._setOptionsFromValues(this._value);\n        }\n        // If the user attempts to tab out of the selection list, allow focus to escape.\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the number of options change, update the tabindex of the selection list.\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this._updateTabIndex();\n        });\n        // Sync external changes to the model back to the options.\n        this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n            if (event.added) {\n                for (let item of event.added) {\n                    item.selected = true;\n                }\n            }\n            if (event.removed) {\n                for (let item of event.removed) {\n                    item.selected = false;\n                }\n            }\n        });\n        // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n        (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.monitor(this._element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n            var _a;\n            if (origin === 'keyboard' || origin === 'program') {\n                let toFocus = 0;\n                for (let i = 0; i < this.options.length; i++) {\n                    if ((_a = this.options.get(i)) === null || _a === void 0 ? void 0 : _a.selected) {\n                        toFocus = i;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(toFocus);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const disableRippleChanges = changes['disableRipple'];\n        const colorChanges = changes['color'];\n        if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n            (colorChanges && !colorChanges.firstChange)) {\n            this._markOptionsForCheck();\n        }\n    }\n    ngOnDestroy() {\n        var _a;\n        // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n        (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.stopMonitoring(this._element);\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._isDestroyed = true;\n    }\n    /** Focuses the selection list. */\n    focus(options) {\n        this._element.nativeElement.focus(options);\n    }\n    /** Selects all of the options. Returns the options that changed as a result. */\n    selectAll() {\n        return this._setAllOptionsSelected(true);\n    }\n    /** Deselects all of the options. Returns the options that changed as a result. */\n    deselectAll() {\n        return this._setAllOptionsSelected(false);\n    }\n    /** Sets the focused option of the selection-list. */\n    _setFocusedOption(option) {\n        this._keyManager.updateActiveItem(option);\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @returns Currently-active item.\n     */\n    _removeOptionFromList(option) {\n        const optionIndex = this._getOptionIndex(option);\n        if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.updateActiveItem(optionIndex - 1);\n            }\n            else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n            }\n        }\n        return this._keyManager.activeItem;\n    }\n    /** Passes relevant key presses to our key manager. */\n    _keydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        const previousFocusIndex = manager.activeItemIndex;\n        const hasModifier = hasModifierKey(event);\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                if (!hasModifier && !manager.isTyping()) {\n                    this._toggleFocusedOption();\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                }\n                break;\n            default:\n                // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n                if (keyCode === A &&\n                    this.multiple &&\n                    hasModifierKey(event, 'ctrlKey') &&\n                    !manager.isTyping()) {\n                    const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n                    this._setAllOptionsSelected(shouldSelect, true, true);\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n        }\n        if (this.multiple &&\n            (keyCode === UP_ARROW || keyCode === DOWN_ARROW) &&\n            event.shiftKey &&\n            manager.activeItemIndex !== previousFocusIndex) {\n            this._toggleFocusedOption();\n        }\n    }\n    /** Reports a value change to the ControlValueAccessor */\n    _reportValueChange() {\n        // Stop reporting value changes after the list has been destroyed. This avoids\n        // cases where the list might wrongly reset its value once it is removed, but\n        // the form control is still live.\n        if (this.options && !this._isDestroyed) {\n            const value = this._getSelectedOptionValues();\n            this._onChange(value);\n            this._value = value;\n        }\n    }\n    /** Emits a change event if the selected state of an option changed. */\n    _emitChangeEvent(options) {\n        this.selectionChange.emit(new MatSelectionListChange(this, options[0], options));\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(values) {\n        this._value = values;\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        }\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Sets the selected options based on the specified values. */\n    _setOptionsFromValues(values) {\n        this.options.forEach(option => option._setSelected(false));\n        values.forEach(value => {\n            const correspondingOption = this.options.find(option => {\n                // Skip options that are already in the model. This allows us to handle cases\n                // where the same primitive value is selected multiple times.\n                return option.selected ? false : this.compareWith(option.value, value);\n            });\n            if (correspondingOption) {\n                correspondingOption._setSelected(true);\n            }\n        });\n    }\n    /** Returns the values of the selected options. */\n    _getSelectedOptionValues() {\n        return this.options.filter(option => option.selected).map(option => option.value);\n    }\n    /** Toggles the state of the currently focused option if enabled. */\n    _toggleFocusedOption() {\n        let focusedIndex = this._keyManager.activeItemIndex;\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            let focusedOption = this.options.toArray()[focusedIndex];\n            if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n                focusedOption.toggle();\n                // Emit a change event because the focused option changed its state through user\n                // interaction.\n                this._emitChangeEvent([focusedOption]);\n            }\n        }\n    }\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     */\n    _setAllOptionsSelected(isSelected, skipDisabled, isUserInput) {\n        // Keep track of whether anything changed, because we only want to\n        // emit the changed event when something actually changed.\n        const changedOptions = [];\n        this.options.forEach(option => {\n            if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n                changedOptions.push(option);\n            }\n        });\n        if (changedOptions.length) {\n            this._reportValueChange();\n            if (isUserInput) {\n                this._emitChangeEvent(changedOptions);\n            }\n        }\n        return changedOptions;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.options.length;\n    }\n    /** Returns the index of the specified list option. */\n    _getOptionIndex(option) {\n        return this.options.toArray().indexOf(option);\n    }\n    /** Marks all the options to be checked in the next change detection run. */\n    _markOptionsForCheck() {\n        if (this.options) {\n            this.options.forEach(option => option._markForCheck());\n        }\n    }\n    /**\n     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n     * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n     * the list, creating a focus trap if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        this._tabIndex = -1;\n        setTimeout(() => {\n            this._tabIndex = 0;\n            this._changeDetector.markForCheck();\n        });\n    }\n    /** Updates the tabindex based upon if the selection list is empty. */\n    _updateTabIndex() {\n        this._tabIndex = this.options.length === 0 ? -1 : 0;\n    }\n}\nMatSelectionList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectionList, deps: [{ token: i0.ElementRef }, { token: 'tabindex', attribute: true }, { token: i0.ChangeDetectorRef }, { token: i3.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectionList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectionList, selector: \"mat-selection-list\", inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", color: \"color\", compareWith: \"compareWith\", disabled: \"disabled\", multiple: \"multiple\" }, outputs: { selectionChange: \"selectionChange\" }, host: { attributes: { \"role\": \"listbox\" }, listeners: { \"keydown\": \"_keydown($event)\" }, properties: { \"attr.aria-multiselectable\": \"multiple\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.tabindex\": \"_tabIndex\" }, classAttribute: \"mat-selection-list mat-list-base\" }, providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR], queries: [{ propertyName: \"options\", predicate: MatListOption, descendants: true }], exportAs: [\"matSelectionList\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectionList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-selection-list', exportAs: 'matSelectionList', inputs: ['disableRipple'], host: {\n                        'role': 'listbox',\n                        'class': 'mat-selection-list mat-list-base',\n                        '(keydown)': '_keydown($event)',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.tabindex]': '_tabIndex',\n                    }, template: '<ng-content></ng-content>', encapsulation: ViewEncapsulation.None, providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR], changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i3.FocusMonitor }];\n    }, propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatListOption, { descendants: true }]\n            }], selectionChange: [{\n                type: Output\n            }], tabIndex: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatListModule {\n}\nMatListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListModule, declarations: [MatList,\n        MatNavList,\n        MatListItem,\n        MatListAvatarCssMatStyler,\n        MatListIconCssMatStyler,\n        MatListSubheaderCssMatStyler,\n        MatSelectionList,\n        MatListOption], imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], exports: [MatList,\n        MatNavList,\n        MatListItem,\n        MatListAvatarCssMatStyler,\n        MatLineModule,\n        MatCommonModule,\n        MatListIconCssMatStyler,\n        MatListSubheaderCssMatStyler,\n        MatPseudoCheckboxModule,\n        MatSelectionList,\n        MatListOption,\n        MatDividerModule] });\nMatListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListModule, imports: [[MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], MatLineModule,\n        MatCommonModule,\n        MatPseudoCheckboxModule,\n        MatDividerModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatListModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n                    exports: [\n                        MatList,\n                        MatNavList,\n                        MatListItem,\n                        MatListAvatarCssMatStyler,\n                        MatLineModule,\n                        MatCommonModule,\n                        MatListIconCssMatStyler,\n                        MatListSubheaderCssMatStyler,\n                        MatPseudoCheckboxModule,\n                        MatSelectionList,\n                        MatListOption,\n                        MatDividerModule,\n                    ],\n                    declarations: [\n                        MatList,\n                        MatNavList,\n                        MatListItem,\n                        MatListAvatarCssMatStyler,\n                        MatListIconCssMatStyler,\n                        MatListSubheaderCssMatStyler,\n                        MatSelectionList,\n                        MatListOption,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LIST, MAT_NAV_LIST, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange };\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n","export function isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\n","import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        var _a;\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        var _a;\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        (_a = _parentMenu === null || _parentMenu === void 0 ? void 0 : _parentMenu.addItem) === null || _a === void 0 ? void 0 : _a.call(_parentMenu, this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return ((_a = clone.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n    }\n    _setHighlighted(isHighlighted) {\n        var _a;\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-menu-item\": \"true\", \"class.mat-menu-item-highlighted\": \"_highlighted\", \"class.mat-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        '[class.mat-menu-item]': 'true',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                        'class': 'mat-focus-indicator',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            var _a;\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && ((_a = manager.activeItem) === null || _a === void 0 ? void 0 : _a._hasFocus())) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        var _a;\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n        super(elementRef, ngZone, defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(positionStrategy);\n        overlayConfig.hasBackdrop =\n            this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n            this.menu._directDescendantItems.changes.pipe(takeUntil(this.menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => this.menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    this.menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { attributes: { \"aria-haspopup\": \"true\" }, listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-expanded\": \"menuOpen || null\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        'aria-haspopup': 'true',\n                        '[attr.aria-expanded]': 'menuOpen || null',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_SCROLL_STRATEGY]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: MatMenuItem, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i3$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }];\n    }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatMenu,\n        MatMenuItem,\n        MatMenuTrigger,\n        MatMenuContent] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuTrigger,\n                        MatMenuContent,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n","import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled ||\n            !this.message ||\n            (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId &&\n                !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        var _a;\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback)),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    var _a;\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined }, { type: i5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i2.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: i4.AriaDescriber }, { token: i4.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            this.hide(this._mouseLeaveHideDelay);\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n        this._showAnimation = 'mat-tooltip-show';\n        this._hideAnimation = 'mat-tooltip-hide';\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i6.BreakpointObserver }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i6.BreakpointObserver }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport * as i4 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i3 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"], components: [{ type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i3.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i4.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i6.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Output, Input, ContentChildren, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\n\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioGroupBase, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatRadioGroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatRadioGroupBase, inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\" }, outputs: { change: \"change\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioGroupBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { change: [{\n                type: Output\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }] } });\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioGroup, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatRadioGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRadioGroup, selector: \"mat-radio-group\", host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-radio-group\" }, providers: [\n        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n    ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(function () { return MatRadioButton; }), descendants: true }], exportAs: [\"matRadioGroup\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-radio-group',\n                    },\n                }]\n        }], propDecorators: { _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }] } });\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        // As per Material design specifications the selection control radio should use the accent color\n        // palette by default. https://material.io/guidelines/components/selection-controls.html\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._providerOverride && this._providerOverride.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngDoCheck() {\n        this._updateTabIndex();\n    }\n    ngAfterViewInit() {\n        this._updateTabIndex();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Gets the tabindex for the underlying input element. */\n    _updateTabIndex() {\n        var _a;\n        const group = this.radioGroup;\n        let value;\n        // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n        // necessary, because the browser handles the tab order for inputs inside a group automatically,\n        // but we need an explicitly higher tabindex for the selected button in order for things like\n        // the focus trap to pick it up correctly.\n        if (!group || !group.selected || this.disabled) {\n            value = this.tabIndex;\n        }\n        else {\n            value = group.selected === this ? this.tabIndex : -1;\n        }\n        if (value !== this._previousTabIndex) {\n            // We have to set the tabindex directly on the DOM node, because it depends on\n            // the selected state which is prone to \"changed after checked errors\".\n            const input = (_a = this._inputElement) === null || _a === void 0 ? void 0 : _a.nativeElement;\n            if (input) {\n                input.setAttribute('tabindex', value + '');\n                this._previousTabIndex = value;\n            }\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioButtonBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatRadioButtonBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatRadioButtonBase, inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatRadioButtonBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: _MatRadioGroupBase }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], checked: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }] } });\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioButton, deps: [{ token: MAT_RADIO_GROUP, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i2.UniqueSelectionDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_RADIO_DEFAULT_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatRadioButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRadioButton, selector: \"mat-radio-button\", inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"class.mat-radio-checked\": \"checked\", \"class.mat-radio-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"attr.tabindex\": \"null\", \"attr.id\": \"id\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-radio-button\" }, exportAs: [\"matRadioButton\"], usesInheritance: true, ngImport: i0, template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{opacity:0;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;cursor:inherit;z-index:-1}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], directives: [{ type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', inputs: ['disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, exportAs: 'matRadioButton', host: {\n                        'class': 'mat-radio-button',\n                        '[class.mat-radio-checked]': 'checked',\n                        '[class.mat-radio-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{opacity:0;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;cursor:inherit;z-index:-1}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatRadioGroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RADIO_GROUP]\n                    }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RADIO_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, declarations: [MatRadioGroup, MatRadioButton], imports: [MatRippleModule, MatCommonModule], exports: [MatRadioGroup, MatRadioButton, MatCommonModule] });\nMatRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule],\n                    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                    declarations: [MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n","import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };\n","import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Inject, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { AnimationDurations, AnimationCurves, mixinInitialized, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(-25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(25%)' })]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(-25%)' })]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n}\nMatSortHeaderIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatSortHeaderIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\n}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        if (direction &&\n            direction !== 'asc' &&\n            direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, deps: [{ token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatSort.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSort, selector: \"[matSort]\", inputs: { disabled: [\"matSortDisabled\", \"disabled\"], active: [\"matSortActive\", \"active\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"] }, outputs: { sortChange: \"matSortChange\" }, host: { classAttribute: \"mat-sort\" }, exportAs: [\"matSort\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    host: { 'class': 'mat-sort' },\n                    inputs: ['disabled: matSortDisabled'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SORT_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { active: [{\n                type: Input,\n                args: ['matSortActive']\n            }], start: [{\n                type: Input,\n                args: ['matSortStart']\n            }], direction: [{\n                type: Input,\n                args: ['matSortDirection']\n            }], disableClear: [{\n                type: Input,\n                args: ['matSortDisableClear']\n            }], sortChange: [{\n                type: Output,\n                args: ['matSortChange']\n            }] } });\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {\n});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderBase {\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({\n            toState: this._isSorted() ? 'active' : this._arrowDirection,\n        });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return (this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc'));\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        var _a, _b;\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n            (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n                // Do not show the animation if the header was already shown in the right position.\n                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = true;\n                }\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                this._showIndicatorHint = false;\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatSortHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, deps: [{ token: MatSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: MatSort, optional: true }, { token: 'MAT_SORT_HEADER_COLUMN_DEF', optional: true }, { token: i3.FocusMonitor }, { token: i0.ElementRef }, { token: i3.AriaDescriber, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSortHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSortHeader, selector: \"[mat-sort-header]\", inputs: { disabled: \"disabled\", id: [\"mat-sort-header\", \"id\"], arrowPosition: \"arrowPosition\", start: \"start\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\" }, host: { listeners: { \"click\": \"_handleClick()\", \"keydown\": \"_handleKeydown($event)\", \"mouseenter\": \"_setIndicatorHintVisible(true)\", \"mouseleave\": \"_setIndicatorHintVisible(false)\" }, properties: { \"attr.aria-sort\": \"_getAriaSortAttribute()\", \"class.mat-sort-header-disabled\": \"_isDisabled()\" }, classAttribute: \"mat-sort-header\" }, exportAs: [\"matSortHeader\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        matSortAnimations.indicator,\n        matSortAnimations.leftPointer,\n        matSortAnimations.rightPointer,\n        matSortAnimations.arrowOpacity,\n        matSortAnimations.arrowPosition,\n        matSortAnimations.allowChildren,\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', host: {\n                        'class': 'mat-sort-header',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ], template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n                    }, {\n                        type: Optional\n                    }] }, { type: i3.FocusMonitor }, { type: i0.ElementRef }, { type: i3.AriaDescriber, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { id: [{\n                type: Input,\n                args: ['mat-sort-header']\n            }], arrowPosition: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], sortActionDescription: [{\n                type: Input\n            }], disableClear: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSortModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, declarations: [MatSort, MatSortHeader], imports: [CommonModule, MatCommonModule], exports: [MatSort, MatSortHeader] });\nMatSortModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSort, MatSortHeader],\n                    declarations: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCellDef, selector: \"[cdkCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkHeaderCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterCellDef, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkFooterCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], stickyEnd: [{\n                type: Input,\n                args: ['stickyEnd']\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterCell, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n_CoalescedStyleScheduler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nBaseRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }]; } });\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderRowDef, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterRowDef, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRowDef, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkHeaderRow, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFooterRow, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRow, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n}\nCdkNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkNoDataRow, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable\n                ? Array.from(row.children)\n                : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkRecycleRows, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: DataRowOutlet, selector: \"[rowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[rowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nHeaderRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[headerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFooterRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[footerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNoDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[noDataRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet.viewContainer,\n            this._headerRowOutlet.viewContainer,\n            this._footerRowOutlet.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach(def => {\n            def.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n    }\n}\nCdkTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTable, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n        { provide: CDK_TABLE, useExisting: CdkTable },\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], viewQueries: [{ propertyName: \"_rowOutlet\", first: true, predicate: DataRowOutlet, descendants: true, static: true }, { propertyName: \"_headerRowOutlet\", first: true, predicate: HeaderRowOutlet, descendants: true, static: true }, { propertyName: \"_footerRowOutlet\", first: true, predicate: FooterRowOutlet, descendants: true, static: true }, { propertyName: \"_noDataRowOutlet\", first: true, predicate: NoDataRowOutlet, descendants: true, static: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], directives: [{ type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { type: DataRowOutlet, selector: \"[rowOutlet]\" }, { type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['role']\n                    }] }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                        type: Inject,\n                        args: [_COALESCED_STYLE_SCHEDULER]\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [STICKY_POSITIONING_LISTENER]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input\n            }], fixedLayout: [{\n                type: Input\n            }], contentChanged: [{\n                type: Output\n            }], _rowOutlet: [{\n                type: ViewChild,\n                args: [DataRowOutlet, { static: true }]\n            }], _headerRowOutlet: [{\n                type: ViewChild,\n                args: [HeaderRowOutlet, { static: true }]\n            }], _footerRowOutlet: [{\n                type: ViewChild,\n                args: [FooterRowOutlet, { static: true }]\n            }], _noDataRowOutlet: [{\n                type: ViewChild,\n                args: [NoDataRowOutlet, { static: true }]\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTextColumn, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, directives: [{ type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"sticky\", \"cdkColumnDef\", \"stickyEnd\"] }, { type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { type: CdkCellDef, selector: \"[cdkCellDef]\" }, { type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkTable, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [TEXT_COLUMN_OPTIONS]\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, declarations: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet], imports: [ScrollingModule], exports: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet] });\nCdkTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, imports: [[ScrollingModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n}\nMatRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTable, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mat-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-table\" }, providers: [\n        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n        //  is only included in the build if used.\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: CdkTable, useExisting: MatTable },\n        { provide: CDK_TABLE, useExisting: MatTable },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"], directives: [{ type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'mat-table',\n                        '[class.mat-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n        { provide: CdkColumnDef, useExisting: MatColumnDef },\n        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n    ], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n}\nMatHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n}\nMatFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n}\nMatCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCell, selector: \"mat-cell, td[mat-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-footer-row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n}\nMatRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-no-data-row';\n    }\n}\nMatNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, directives: [{ type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { type: MatCellDef, selector: \"[matCellDef]\" }, { type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTableModule, declarations: [\n        // Table\n        MatTable,\n        MatRecycleRows,\n        // Template defs\n        MatHeaderCellDef,\n        MatHeaderRowDef,\n        MatColumnDef,\n        MatCellDef,\n        MatRowDef,\n        MatFooterCellDef,\n        MatFooterRowDef,\n        // Cell directives\n        MatHeaderCell,\n        MatCell,\n        MatFooterCell,\n        // Row directives\n        MatHeaderRow,\n        MatRow,\n        MatFooterRow,\n        MatNoDataRow,\n        MatTextColumn\n    ], imports: [CdkTableModule, MatCommonModule], exports: [MatCommonModule,\n        // Table\n        MatTable,\n        MatRecycleRows,\n        // Template defs\n        MatHeaderCellDef,\n        MatHeaderRowDef,\n        MatColumnDef,\n        MatCellDef,\n        MatRowDef,\n        MatFooterCellDef,\n        MatFooterRowDef,\n        // Cell directives\n        MatHeaderCell,\n        MatCell,\n        MatFooterCell,\n        // Row directives\n        MatHeaderRow,\n        MatRow,\n        MatFooterRow,\n        MatNoDataRow,\n        MatTextColumn] });\nMatTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTableModule, imports: [[CdkTableModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTableModule, MatCommonModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        var _a;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        var _a;\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n","import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: ['when: matTreeNodeDefWhen'],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /** Whether the node is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n    ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nMatTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['matTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\n        {\n            provide: CdkTreeNodeOutlet,\n            useExisting: MatTreeNodeOutlet,\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TREE_NODE_OUTLET_NODE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], directives: [{ type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n}\nMatTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: ['recursive: matTreeNodeToggleRecursive'],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet] });\nMatTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                    declarations: MAT_TREE_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"sourceRoot":"webpack:///","file":"default-src_app_shared_shared_module_ts.963addb3d86be723.js"}