{"version":3,"mappings":"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","names":["i0","ManagementFooterComponent","constructor","this","environment","selectors","ManagementRoutingService","ReplaySubject","currentRouteSnapshotSource","asObservable","currentPageName$","currentRouteSnapshot$","pipe","map","snapshot","data","title","updateCurrentRoute","route","next","factory","ManagementSidenavService","BehaviorSubject","isSidenavOpenSource","toggleSidenav","value","ManagementHeaderSidenavButtonComponent","service","toggle","$localize","ctx","ManagementHeaderMenuComponent","sessionService","profileService","dialogService","sharedDialogService","router","snackBarService","ngOnInit","userName$","watchUserName","ngOnDestroy","t","logoutSubscription","_a","unsubscribe","onClickEditProfile","open","EditProfileFormDialogComponent","width","onClickLogout","requestConfirmation","message","filter","didConfirm","tap","closeCurrentSession","navigateByUrl","COMMON_DISMISS_BUTTON_LABEL","subscribe","ManagementHeaderComponent","routingService","moduleName$","ManagementRoutingAccessResolver","apiAccessService","resolve","state","getResourceAuthorizedAccess","routeConfig","path","API_INJECTION_TOKENS","ManagementRoutingGuard","canActivate","userHasActiveSession$","take","v","canActivateChild","childPath","switchMap","authorizedAccess","hasPermissions","_","permissions","length","of","catchError","error","status","ManagementComponent","sidenavService","isSidenavOpen$","sessionCheckSub","hasActiveSession","whenSessionBecomesInactive","DataManagerComponentDirective","init","loadSubscription","onSortChange","event","sortBy","active","order","direction","o","reloadItems","onPage","pageIndex","pageSize","loading$","items$","totalCount$","busy$","focusedItems$","items","actions$","access","share","canCreate$","actions","includes","canUpdate$","canDelete$","pageSizeOptions","DataManagerServiceDirective","focusedItemsSource","loadingSource","pageSource","page","totalCount","focusedItems","getValue","i","complete","dataService","fetchPage","filters","finalize","ManagementCustomersService","super","ManagementCustomersComponent","ManagementDashboardComponent","TransactionalDataManagerComponentDirective","onClickEdit","item","edit","onClickCreate","undefined","EntityFormDialogComponent","createDialogProperties","afterClosed","result","features","TransactionalDataManagerServiceDirective","removeItems","forkJoin","delete","ManagementImagesService","ctx_r1","ManagementDataActionsButtonBarComponent","EventEmitter","showCreate","create","emit","ctx_r13","ManagementImagesComponent","actionSubscription","isNewItem","entityType","apiService","onClickDelete","img","deletionSucess","filename","COMMON_ERROR_MESSAGE","ManagementProductCategoriesService","EMPTY","ManagementProductCategoriesComponent","categoryTreeService","loadingSubscription","reloadCategories","ProductsArrayDialogService","productDataService","selectedProductsSource","ignoreElements","includeProduct","prod","productArraySet","Set","values","dropProduct","index","selectedProducts$","selectedProducts","splice","ctx_r27","oxw","ctx_r30","ctx_r36","ProductsArrayDialogComponent","selectedProductsSub","selectedProductsTable","renderRows","availableProducts$","merge","page$","arr","reload","selectionChangeSub","fetchingSubscription","_b","actionSub","_c","onFiltersChange","f","onClickIncludeProductIntoSelection","p","onClickDropFromSelection","decls","ProductListContentsDialogService","listApiService","fetchContents","list","addProduct","product","addToContents","replaceProductsWith","products","updateContents","removeProduct","deleteFromContents","ctx_r15","ProductListContentsDialogComponent","dialog","products$","isArrayEmpty$","array","sort","onClickAddProducts","maxHeight","Array","isArray","from","onClickChooseProducts","onClickRemoveProduct","MAT_DIALOG_DATA","ManagementProductListsService","ctx_r18","ctx_r21","ctx_r24","ManagementProductListsComponent","onClickViewContents","successMessage","name","ManagementProductsService","ctx_r20","ctx_r23","ManagementProductsComponent","ManagementSalesService","markRejected","sell","markAsRejected","markConfirmed","markAsConfirmed","markComplete","markAsCompleted","fetch","fetchExisting","ManagementSellReviewDialogComponent","salesService","busyStatusSource","dialogTitle","buyOrder","isNotPaid","SELL_STATUS_NAMES_MAP","isNotConfirmed","operationSub","onClickReject","updateSellDataAfter","onClickConfirm","onClickComplete","observable","err","ManagementSalesComponent","focused","s","date","onClickView","row","onErrorResumeNext","ManagementSalespeopleService","ctx_r14","ctx_r17","ManagementSalespeopleComponent","e","person","firstName","lastName","ManagementShippersService","ctx_r11","ManagementShippersComponent","shipper","ManagementUsersService","MANAGEMENT_CHILD_ROUTES","component","matIcon","usr","results","ManagementUsersComponent","ManagementRoutingModule","RouterModule","children","pathMatch","redirectTo","ManagementSidenavComponent","modules$","concat","fetchAuthorizedModules","reflectChangesOnActiveRoute","authorizedAccess$","r","routes","text","icon","watchNavigatedRoutePath","latestRoutePath","forEach","m","find","someModule","routeSnapshot","url","routePath","source","lift","MapToOperator","call","subscriber","MapToSubscriber","Subscriber","destination","_next","x","_onBackdropClicked","matDrawerAnimations","transformDrawer","trigger","style","transform","visibility","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","markForCheck","ɵfac","forwardRef","MatDrawerContainer","i1","ɵcmp","provide","useExisting","ngContentSelectors","encapsulation","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","Subject","_animationEnd","_animationState","openedChange","_openedStream","openedStart","fromState","toState","indexOf","mapTo","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","fromEvent","nativeElement","keyCode","ESCAPE","disableClose","hasModifierKey","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","y","position","_isAttached","_updatePositionInParent","mode","_updateFocusTrapState","coerceBooleanProperty","autoFocus","_autoFocus","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","ngAfterContentChecked","isBrowser","destroy","_anchor","remove","openedVia","_closeViaBackdropClick","_setOpen","isOpen","restoreFocus","Promise","_getWidth","offsetWidth","enabled","newPosition","parent","parentNode","createComment","insertBefore","appendChild","i2","i3","DOCUMENT","sa","directives","changeDetection","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","start","_start","end","_end","autosize","hasBackdrop","_backdropOverride","scrollable","_userContent","_content","_allDrawers","changes","startWith","drawer","reset","notifyOnChanges","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","debounceTime","_left","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_isShowingBackdrop","i4","ANIMATION_MODULE_TYPE","i5","styles","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","coerceNumberProperty","fixedBottomGap","pa","MatSidenavModule","ɵmod","ɵinj","CommonModule","MatCommonModule","CdkScrollableModule","MATERIAL_MODULES","ManagementMaterialModule","SNACKBAR_DEFAULTS","duration","ManagementModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","useValue","imports","SharedModule","ProductCategoryFormComponent","ProductFormComponent","i6"],"sources":["./src/app/management/components/footer/management-footer.component.html","./src/app/management/components/footer/management-footer.component.ts","./src/app/management/management-routing.service.ts","./src/app/management/components/sidenav/management-sidenav.service.ts","./src/app/management/components/header/sidenav-button/management-header-sidenav-button.component.ts","./src/app/management/components/header/sidenav-button/management-header-sidenav-button.component.html","./src/app/management/components/header/menu/management-header-menu.component.ts","./src/app/management/components/header/menu/management-header-menu.component.html","./src/app/management/components/header/management-header.component.ts","./src/app/management/components/header/management-header.component.html","./src/app/management/management-routing.access-resolver.ts","./src/app/management/management-routing.guard.ts","./src/app/management/management.component.ts","./src/app/management/management.component.html","./src/app/management/directives/data-manager/data-manager.component.directive.ts","./src/app/management/directives/data-manager/data-manager.service.directive.ts","./src/app/management/routes/customers/management-customers.service.ts","./src/app/management/routes/customers/management-customers.component.html","./src/app/management/routes/customers/management-customers.component.ts","./src/app/management/routes/dashboard/management-dashboard.component.ts","./src/app/management/directives/transactional-data-manager/transactional-data-manager.component.directive.ts","./src/app/management/directives/transactional-data-manager/transactional-data-manager.service.directive.ts","./src/app/management/routes/images/management-images.service.ts","./src/app/management/components/data-actions-button-bar/management-data-actions-button-bar.component.html","./src/app/management/components/data-actions-button-bar/management-data-actions-button-bar.component.ts","./src/app/management/routes/images/management-images.component.html","./src/app/management/routes/images/management-images.component.ts","./src/app/management/routes/product-categories/management-product-categories.service.ts","./src/app/management/routes/product-categories/management-product-categories.component.html","./src/app/management/routes/product-categories/management-product-categories.component.ts","./src/app/management/dialogs/products-array/products-array-dialog.service.ts","./src/app/management/dialogs/products-array/products-array-dialog.component.html","./src/app/management/dialogs/products-array/products-array-dialog.component.ts","./src/app/management/dialogs/product-list-contents/product-list-contents-dialog.service.ts","./src/app/management/dialogs/product-list-contents/product-list-contents-dialog.component.html","./src/app/management/dialogs/product-list-contents/product-list-contents-dialog.component.ts","./src/app/management/routes/product-lists/management-product-lists.service.ts","./src/app/management/routes/product-lists/management-product-lists.component.html","./src/app/management/routes/product-lists/management-product-lists.component.ts","./src/app/management/routes/products/management-products.service.ts","./src/app/management/routes/products/management-products.component.html","./src/app/management/routes/products/management-products.component.ts","./src/app/management/routes/sales/management-sales.service.ts","./src/app/management/dialogs/sell-review/management-sell-review-dialog.component.ts","./src/app/management/dialogs/sell-review/management-sell-review-dialog.component.html","./src/app/management/routes/sales/management-sales.component.html","./src/app/management/routes/sales/management-sales.component.ts","./src/app/management/routes/salespeople/management-salespeople.service.ts","./src/app/management/routes/salespeople/management-salespeople.component.html","./src/app/management/routes/salespeople/management-salespeople.component.ts","./src/app/management/routes/shippers/management-shippers.service.ts","./src/app/management/routes/shippers/management-shippers.component.html","./src/app/management/routes/shippers/management-shippers.component.ts","./src/app/management/routes/users/management-users.service.ts","./src/app/management/routes/users/management-users.component.html","./src/app/management/management-routing.module.ts","./src/app/management/routes/users/management-users.component.ts","./src/app/management/components/sidenav/management-sidenav.component.html","./src/app/management/components/sidenav/management-sidenav.component.ts","./node_modules/rxjs/_esm2015/internal/operators/mapTo.js","./node_modules/@angular/material/fesm2015/sidenav.mjs","./src/app/management/management-material.module.ts","./src/app/management/management.module.ts"],"sourcesContent":["<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<p *ngFor=\"let text of footerParagraphs\">{{ text }}</p>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-management-footer',\r\n  templateUrl: './management-footer.component.html',\r\n  styleUrls: ['./management-footer.component.css']\r\n})\r\nexport class ManagementFooterComponent {\r\n\r\n  footerParagraphs = environment.labels.footerParagraphs;\r\n\r\n  constructor() { }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * Keeps track of the latest navigated route\r\n */\r\n@Injectable()\r\nexport class ManagementRoutingService {\r\n\r\n  private currentRouteSnapshotSource = new ReplaySubject<ActivatedRouteSnapshot>(1);\r\n\r\n  currentRouteSnapshot$ = this.currentRouteSnapshotSource.asObservable();\r\n  currentPageName$: Observable<string>;\r\n\r\n  constructor() {\r\n    this.currentPageName$ = this.currentRouteSnapshot$.pipe(\r\n      map(snapshot => (snapshot.data['title'] || ''))\r\n    );\r\n  }\r\n\r\n  updateCurrentRoute(route: ActivatedRouteSnapshot) {\r\n    this.currentRouteSnapshotSource.next(route);\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * Keeps track of the sidenav open state\r\n */\r\n@Injectable()\r\nexport class ManagementSidenavService {\r\n\r\n  private isSidenavOpenSource = new BehaviorSubject(true);\r\n\r\n  isSidenavOpen$ = this.isSidenavOpenSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  toggleSidenav(): void {\r\n    this.isSidenavOpenSource.next(!this.isSidenavOpenSource.value);\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component } from '@angular/core';\r\nimport { ManagementSidenavService } from 'src/app/management/components/sidenav/management-sidenav.service';\r\n\r\n@Component({\r\n  selector: 'app-management-header-sidenav-button',\r\n  templateUrl: './management-header-sidenav-button.component.html',\r\n  styleUrls: ['./management-header-sidenav-button.component.css']\r\n})\r\nexport class ManagementHeaderSidenavButtonComponent {\r\n\r\n  constructor(\r\n    private service: ManagementSidenavService\r\n  ) { }\r\n\r\n  toggle(): void {\r\n    this.service.toggleSidenav();\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<button mat-button type=\"button\"\r\n  class=\"toggle-sidenav action\"\r\n  color=\"warn\"\r\n  aria-label=\"Toggle sidebar\"\r\n  i18n-aria-label=\"toggle sidebar|Label for action button to show/hide sidebar\"\r\n  (click)=\"toggle()\">\r\n  <mat-icon>menu</mat-icon>\r\n</button>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { ProfileService } from 'src/app/profile.service';\r\nimport { SessionService } from 'src/app/session.service';\r\nimport { EditProfileFormDialogComponent } from 'src/app/shared/dialogs/edit-profile-form/edit-profile-form-dialog.component';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { COMMON_DISMISS_BUTTON_LABEL } from 'src/text/messages';\r\n\r\n@Component({\r\n  selector: 'app-management-header-menu',\r\n  templateUrl: './management-header-menu.component.html',\r\n  styleUrls: ['./management-header-menu.component.css']\r\n})\r\nexport class ManagementHeaderMenuComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private logoutSubscription: Subscription;\r\n\r\n  userName$: Observable<string>;\r\n\r\n  constructor(\r\n    protected sessionService: SessionService,\r\n    protected profileService: ProfileService,\r\n    protected dialogService: MatDialog,\r\n    protected sharedDialogService: SharedDialogService,\r\n    protected router: Router,\r\n    protected snackBarService: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userName$ = this.profileService.watchUserName();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.logoutSubscription?.unsubscribe();\r\n  }\r\n\r\n  onClickEditProfile(): void {\r\n    this.dialogService.open(\r\n      EditProfileFormDialogComponent,\r\n      {\r\n        width: '40rem',\r\n      }\r\n    );\r\n  }\r\n\r\n  onClickLogout(): void {\r\n    this.logoutSubscription?.unsubscribe();\r\n    this.logoutSubscription = this.sharedDialogService.requestConfirmation({\r\n      title: $localize`:Title of dialog prompt for logging out:Log out?`,\r\n      message: $localize`:Label to hint user that any undergoing process may be lost when logging out:Any unsaved data may be lost`\r\n    }).pipe(\r\n      filter(didConfirm => didConfirm),\r\n      tap(() => {\r\n        this.sessionService.closeCurrentSession();\r\n        this.router.navigateByUrl('/');\r\n        const message = $localize`:Message after logging out:You have logged out`;\r\n        this.snackBarService.open(message, COMMON_DISMISS_BUTTON_LABEL);\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-menu #headerMenu>\r\n  <span mat-menu-item disabled>{{ userName$ | async }}</span>\r\n  <button mat-menu-item type=\"button\"\r\n    class=\"navigate-store\"\r\n    [routerLink]=\"['/store']\">\r\n    <mat-icon>storefront</mat-icon>\r\n    <span i18n=\"Label for link button to navigate to storefront\">Storefront</span>\r\n  </button>\r\n  <button mat-menu-item type=\"button\"\r\n    (click)=\"onClickEditProfile()\">\r\n    <mat-icon>edit</mat-icon>\r\n    <span i18n=\"edit profile|Label for action button to prompt profile edit\">Edit profile</span>\r\n  </button>\r\n  <button mat-menu-item type=\"button\"\r\n    (click)=\"onClickLogout()\">\r\n    <mat-icon>exit_to_app</mat-icon>\r\n    <span i18n=\"log out|Label for action button to log out\">Log out</span>\r\n  </button>\r\n</mat-menu>\r\n<button mat-button type=\"button\"\r\n  class=\"open-menu action\"\r\n  [matMenuTriggerFor]=\"headerMenu\">\r\n  <mat-icon>person</mat-icon>\r\n</button>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Image } from 'src/models/entities/Image';\r\nimport { ManagementRoutingService } from '../../management-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-management-header',\r\n  templateUrl: './management-header.component.html',\r\n  styleUrls: ['./management-header.component.css']\r\n})\r\nexport class ManagementHeaderComponent\r\n  implements OnInit {\r\n\r\n  readonly appTitle: string = environment.labels.name;\r\n  readonly appLogo: Image = environment.staticImages.logo;\r\n\r\n  moduleName$: Observable<string>;\r\n\r\n  constructor(\r\n    private routingService: ManagementRoutingService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.moduleName$ = this.routingService.currentPageName$.pipe();\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-management-header-sidenav-button></app-management-header-sidenav-button>\r\n<app-header-brand></app-header-brand>\r\n<div class=\"middle\">\r\n  <span>{{ moduleName$ | async }}</span>\r\n</div>\r\n<app-management-header-menu></app-management-header-menu>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { IAccessApiService } from 'src/app/api/access-api.iservice';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { AuthorizedAccess } from 'src/models/AuthorizedAccess';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ManagementRoutingAccessResolver\r\n  implements Resolve<AuthorizedAccess> {\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.access) private apiAccessService: IAccessApiService\r\n  ) { }\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<AuthorizedAccess> | Promise<AuthorizedAccess> | AuthorizedAccess {\r\n    const resource = route.routeConfig.path;\r\n    return this.apiAccessService.getResourceAuthorizedAccess(resource);\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, switchMap, take, tap } from 'rxjs/operators';\r\nimport { SessionService } from 'src/app/session.service';\r\nimport { IAccessApiService } from '../api/access-api.iservice';\r\nimport { API_INJECTION_TOKENS } from '../api/api-injection-tokens';\r\n\r\n@Injectable()\r\nexport class ManagementRoutingGuard\r\n  implements CanActivate, CanActivateChild {\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.access) private apiAccessService: IAccessApiService,\r\n    private router: Router,\r\n    private sessionService: SessionService\r\n  ) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.sessionService.userHasActiveSession$.pipe(\r\n      take(1),\r\n      tap(v => {\r\n        if (!v) {\r\n          this.router.navigateByUrl('/');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    const childPath = route.routeConfig.path;\r\n    if (childPath === 'dashboard') {\r\n      return this.canActivate(route, state);\r\n    } else {\r\n      return this.apiAccessService.getResourceAuthorizedAccess(childPath).pipe(\r\n        switchMap(authorizedAccess => {\r\n          const hasPermissions = !!authorizedAccess.permissions?.length;\r\n          if (!hasPermissions) {\r\n            this.router.navigateByUrl('/management');\r\n          }\r\n          return of(hasPermissions);\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 403) {\r\n            this.router.navigateByUrl('/management');\r\n          } else {\r\n            this.router.navigateByUrl('/');\r\n          }\r\n          return of(false);\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport { SessionService } from '../session.service';\r\nimport { ManagementSidenavService } from './components/sidenav/management-sidenav.service';\r\n\r\n@Component({\r\n  selector: 'app-management',\r\n  templateUrl: './management.component.html',\r\n  styleUrls: ['./management.component.css']\r\n})\r\nexport class ManagementComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private sessionCheckSub: Subscription;\r\n\r\n  isSidenavOpen$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private sessionService: SessionService,\r\n    private sidenavService: ManagementSidenavService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isSidenavOpen$ = this.sidenavService.isSidenavOpen$.pipe();\r\n    this.sessionCheckSub = this.sessionService.userHasActiveSession$.pipe(\r\n      filter(hasActiveSession => !hasActiveSession),\r\n      take(1),\r\n      tap(() => this.whenSessionBecomesInactive())\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sessionCheckSub?.unsubscribe();\r\n  }\r\n\r\n  private whenSessionBecomesInactive() {\r\n    this.router.navigateByUrl('/');\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-management-header></app-management-header>\r\n<mat-sidenav-container>\r\n  <mat-sidenav [opened]=\"isSidenavOpen$ | async\" mode=\"side\" role=\"navigation\">\r\n    <app-management-sidenav></app-management-sidenav>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content role=\"main\" class=\"content\">\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n<app-management-footer></app-management-footer>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Directive, OnDestroy, OnInit } from '@angular/core';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { map, share, take, tap } from 'rxjs/operators';\r\nimport { AuthorizedAccess } from 'src/models/AuthorizedAccess';\r\nimport { DataManagerServiceDirective } from './data-manager.service.directive';\r\n\r\n/**\r\n * Base  for data manager template components.\r\n * Implement openFormDialog() to view/edit data\r\n */\r\n@Directive()\r\nexport abstract class DataManagerComponentDirective<T>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private loadSubscription: Subscription;\r\n\r\n  pageSizeOptions = [10, 20, 50, 100];\r\n\r\n  loading$: Observable<boolean>;\r\n  busy$: Observable<boolean>;\r\n  items$: Observable<any[]>;\r\n  totalCount$: Observable<number>;\r\n  actions$: Observable<string[]>;\r\n  canCreate$: Observable<boolean>;\r\n  canUpdate$: Observable<boolean>;\r\n  canDelete$: Observable<boolean>;\r\n\r\n  protected abstract service: DataManagerServiceDirective<T>;\r\n  protected abstract route: ActivatedRoute;\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.loadSubscription?.unsubscribe();\r\n  }\r\n\r\n  onSortChange(event: Sort): void {\r\n    this.service.sortBy = event.active;\r\n    this.service.order = event.direction;\r\n    this.loadSubscription?.unsubscribe();\r\n    this.loadSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n\r\n  onPage(event: PageEvent): void {\r\n    this.service.pageIndex = event.pageIndex;\r\n    this.service.pageSize = event.pageSize;\r\n    this.loadSubscription?.unsubscribe();\r\n    this.loadSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n\r\n  protected init(): void {\r\n    this.loading$ = this.service.loading$.pipe();\r\n    this.items$ = this.service.items$.pipe();\r\n    this.totalCount$ = this.service.totalCount$.pipe();\r\n\r\n    this.busy$ = this.service.focusedItems$.pipe(\r\n      map(items => items?.length > 0)\r\n    );\r\n\r\n    this.actions$ = this.route.data.pipe(\r\n      take(1),\r\n      map(data => data.access as AuthorizedAccess),\r\n      map(access => (access?.permissions || [])),\r\n      share()\r\n    );\r\n\r\n    this.canCreate$ = this.actions$.pipe(\r\n      map(actions => (actions.length > 0 && actions.includes('create')))\r\n    );\r\n    this.canUpdate$ = this.actions$.pipe(\r\n      map(actions => (actions.length > 0 && actions.includes('update')))\r\n    );\r\n    this.canDelete$ = this.actions$.pipe(\r\n      map(actions => (actions.length > 0 && actions.includes('delete')))\r\n    );\r\n\r\n    this.service.pageSize = this.pageSizeOptions[0];\r\n    this.loadSubscription?.unsubscribe();\r\n    this.loadSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Directive, OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject, Observable, ReplaySubject, Subscription } from 'rxjs';\r\nimport { finalize, map, tap } from 'rxjs/operators';\r\nimport { IEntityDataApiService } from 'src/app/api/entity.data-api.iservice';\r\nimport { AuthorizedAccess } from 'src/models/AuthorizedAccess';\r\nimport { DataPage } from 'src/models/DataPage';\r\n\r\n@Directive()\r\nexport abstract class DataManagerServiceDirective<T>\r\n  implements OnDestroy {\r\n\r\n  protected abstract dataService: IEntityDataApiService<T>;\r\n\r\n  protected focusedItemsSource = new BehaviorSubject<T[]>([]);\r\n  protected pageSource = new ReplaySubject<DataPage<T>>();\r\n  protected loadingSource = new BehaviorSubject(false);\r\n  protected authorizedAccessSource = new ReplaySubject<AuthorizedAccess>();\r\n\r\n  focusedItems$ = this.focusedItemsSource.asObservable();\r\n  loading$ = this.loadingSource.asObservable();\r\n\r\n  items$: Observable<T[]>;\r\n  totalCount$: Observable<number>;\r\n\r\n  pageIndex: number | undefined;\r\n  pageSize: number | undefined;\r\n  sortBy: string | undefined;\r\n  order: string | undefined;\r\n  filters: any | undefined;\r\n\r\n  get focusedItems(): T[] { return this.focusedItemsSource.getValue(); }\r\n  set focusedItems(i: T[]) { this.focusedItemsSource.next(i); }\r\n\r\n  constructor() {\r\n    this.items$ = this.pageSource.asObservable().pipe(map(page => page.items));\r\n    this.totalCount$ = this.pageSource.asObservable().pipe(map(page => page.totalCount));\r\n  }\r\n\r\n  // TODO services do not support lifecycle hooks such as this...\r\n  ngOnDestroy(): void {\r\n    this.focusedItemsSource.complete();\r\n    this.pageSource.complete();\r\n    this.loadingSource.complete();\r\n  }\r\n\r\n  /** Empty item selections and fetch data from the external service again. */\r\n  reloadItems() {\r\n    this.focusedItemsSource.next([]);\r\n    this.loadingSource.next(true);\r\n    return this.dataService.fetchPage(this.pageIndex, this.pageSize, this.sortBy, this.order, this.filters).pipe(\r\n      tap(page => { this.pageSource.next(page); }),\r\n      finalize(() => { this.loadingSource.next(false); })\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { IEntityDataApiService } from 'src/app/api/entity.data-api.iservice';\r\nimport { Customer } from 'src/models/entities/Customer';\r\nimport { DataManagerServiceDirective } from '../../directives/data-manager/data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementCustomersService\r\n  extends DataManagerServiceDirective<Customer> {\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataCustomers) protected dataService: IEntityDataApiService<Customer>\r\n  ) {\r\n    super();\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"person full name|Name of table header for full name of person\">Name</th>\r\n        <td mat-cell *matCellDef=\"let customer\">\r\n          {{ customer.person.firstName }} {{ customer.person.lastName }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"idNumber\" >\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"person id number|Name of table header for id number of person\">Id number</th>\r\n        <td mat-cell *matCellDef=\"let customer\">\r\n          {{ customer.person.idNumber }}\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Customer } from 'src/models/entities/Customer';\r\nimport { DataManagerComponentDirective } from '../../directives/data-manager/data-manager.component.directive';\r\nimport { ManagementCustomersService } from './management-customers.service';\r\n\r\n@Component({\r\n  selector: 'app-management-customers',\r\n  templateUrl: './management-customers.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-customers.component.css'\r\n  ]\r\n})\r\nexport class ManagementCustomersComponent\r\n  extends DataManagerComponentDirective<Customer>\r\n  implements OnInit {\r\n\r\n  tableColumns = ['name', 'idNumber'];\r\n\r\n  constructor(\r\n    protected service: ManagementCustomersService,\r\n    protected route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-management-dashboard',\r\n  templateUrl: './management-dashboard.component.html',\r\n  styleUrls: ['./management-dashboard.component.css']\r\n})\r\nexport class ManagementDashboardComponent {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Directive } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { EntityFormDialogComponent } from '../../dialogs/entity-form/entity-form-dialog.component';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { DataManagerComponentDirective } from '../data-manager/data-manager.component.directive';\r\n\r\n/**\r\n * Base for data manager template components.\r\n * Implement createDialogProperties() to view/edit data\r\n */\r\n@Directive()\r\nexport abstract class TransactionalDataManagerComponentDirective<T>\r\n  extends DataManagerComponentDirective<T> {\r\n\r\n  protected abstract dialogService: MatDialog;\r\n\r\n  onClickEdit(item: T): void {\r\n    this.edit(item).subscribe();\r\n  }\r\n\r\n  onClickCreate(): void {\r\n    this.edit(undefined).subscribe();\r\n  }\r\n\r\n  protected abstract createDialogProperties(item: T | undefined): EntityFormDialogConfig<T>;\r\n\r\n  protected edit(item: T | undefined): Observable<T> {\r\n    this.service.focusedItems = [item];\r\n    return this.dialogService.open(\r\n      EntityFormDialogComponent,\r\n      this.createDialogProperties(item)\r\n    ).afterClosed().pipe(\r\n      tap(() => { this.service.focusedItems = [] }),\r\n      switchMap(result => (!!result) ? // truthy\r\n        this.service.reloadItems() :\r\n        of(void 0)\r\n      )\r\n    );\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Directive } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { catchError, filter, finalize, map, switchMap } from 'rxjs/operators';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { DataManagerServiceDirective } from '../data-manager/data-manager.service.directive';\r\n\r\n@Directive()\r\nexport abstract class TransactionalDataManagerServiceDirective<T>\r\n  extends DataManagerServiceDirective<T> {\r\n\r\n  abstract dataService: ITransactionalEntityDataApiService<T>;\r\n\r\n  constructor(\r\n    protected sharedDialogService: SharedDialogService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  /** Delete items contained in the array one by one */\r\n  removeItems(items: T[]): Observable<boolean[]> {\r\n    this.focusedItems = items;\r\n    return this.sharedDialogService.requestConfirmation({\r\n      title: $localize`:Title of dialog prompt to confirm deletion:Confirm deletion`,\r\n      message: $localize`:Paragraph asking confirmation to delete a portion of data, reminding that it cannot be undone:Are you sure you want to delete this item?`\r\n    }).pipe(\r\n      filter(didConfirm => didConfirm),\r\n      switchMap(() => forkJoin(items.map(item => (\r\n        this.dataService.delete(item).pipe(\r\n          map(() => true),\r\n          catchError(() => of(false))\r\n        )\r\n      )))),\r\n      finalize(() => { this.focusedItems = []; })\r\n    );\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { Image } from 'src/models/entities/Image';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementImagesService\r\n  extends TransactionalDataManagerServiceDirective<Image> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataImages) public dataService: ITransactionalEntityDataApiService<Image>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<button mat-button mat-raised-button\r\n  *ngIf=\"showCreate\"\r\n  color=\"primary\"\r\n  (click)=\"onClickCreate()\"\r\n  i18n=\"create new item|Label for action button to create an item\">Create</button>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\ntype DataActions = 'add';\r\n\r\n/**\r\n * Generic action buttons bar. Should be placed below data listing components.\r\n */\r\n@Component({\r\n  selector: 'app-management-data-actions-button-bar',\r\n  templateUrl: './management-data-actions-button-bar.component.html',\r\n  styleUrls: ['./management-data-actions-button-bar.component.css']\r\n})\r\nexport class ManagementDataActionsButtonBarComponent {\r\n\r\n  @Input() actions: (DataActions | string)[] = [];\r\n\r\n  @Output() create = new EventEmitter<void>();\r\n\r\n  get showCreate() { return this.actions.includes('create'); }\r\n\r\n  constructor() { }\r\n\r\n  onClickCreate(): void {\r\n    this.create.emit();\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"thumb\">\r\n        <th mat-header-cell *matHeaderCellDef\r\n          i18n=\"image|Name of table header for image preview\">Image</th>\r\n        <td mat-cell *matCellDef=\"let image\">\r\n          <img [src]=\"image.url\" alt=\"\">\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"filename\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"image filename|Name of table header for image filename\">Filename</th>\r\n        <td mat-cell *matCellDef=\"let image\">\r\n          {{ image.filename }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let image\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(image)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { Image } from 'src/models/entities/Image';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementImagesService } from './management-images.service';\r\n\r\n@Component({\r\n  selector: 'app-management-images',\r\n  templateUrl: './management-images.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-images.component.css'\r\n  ]\r\n})\r\nexport class ManagementImagesComponent\r\n  extends TransactionalDataManagerComponentDirective<Image>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'thumb', 'filename', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementImagesService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: Image): EntityFormDialogConfig<Image> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'image',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n\r\n  onClickDelete(img: Image) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([img]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const deletionSucess = $localize`:Message of success after deleting an image with filename {{ fileName }}:Image '${img.filename}:fileName:' deleted`;\r\n          this.snackBarService.open(deletionSucess, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementProductCategoriesService\r\n  extends TransactionalDataManagerServiceDirective<ProductCategory> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataProductCategories) public dataService: ITransactionalEntityDataApiService<ProductCategory>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n\r\n  reloadItems() {\r\n    return EMPTY;\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <app-product-category-tree\r\n      [editable]=\"true\">\r\n    </app-product-category-tree>\r\n\r\n  </div>\r\n  <app-management-data-actions-button-bar\r\n    [actions]=\"actions$ | async\"\r\n    (create)=\"onClickCreate()\">\r\n  </app-management-data-actions-button-bar>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { EntityFormDialogConfig } from 'src/app/management/dialogs/entity-form/EntityFormDialogConfig';\r\nimport { ProductCategoryTreeService } from 'src/app/shared/components/product-category-tree/product-category-tree.service';\r\nimport { ProductCategory } from 'src/models/entities/ProductCategory';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementProductCategoriesService } from './management-product-categories.service';\r\n\r\n@Component({\r\n  selector: 'app-management-product-categories',\r\n  templateUrl: './management-product-categories.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-product-categories.component.css'\r\n  ]\r\n})\r\nexport class ManagementProductCategoriesComponent\r\n  extends TransactionalDataManagerComponentDirective<ProductCategory>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private loadingSubscription: Subscription;\r\n  actions$: Observable<string[]>;\r\n  loading = true;\r\n\r\n  constructor(\r\n    protected service: ManagementProductCategoriesService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private categoryTreeService: ProductCategoryTreeService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.loadingSubscription = this.categoryTreeService.reloadCategories().subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.loadingSubscription?.unsubscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: ProductCategory): EntityFormDialogConfig<ProductCategory> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'productCategory',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, EMPTY, ReplaySubject } from 'rxjs';\r\nimport { finalize, ignoreElements, take, tap } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { IEntityDataApiService } from 'src/app/api/entity.data-api.iservice';\r\nimport { DataPage } from 'src/models/DataPage';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { ProductSearchQuery } from 'src/models/ProductSearchQuery';\r\n\r\n@Injectable()\r\nexport class ProductsArrayDialogService {\r\n\r\n  private loadingSource = new BehaviorSubject(true);\r\n  private pageSource = new ReplaySubject<DataPage<Product>>(1);\r\n  private selectedProductsSource = new BehaviorSubject<Product[]>([]);\r\n\r\n  loading$ = this.loadingSource.asObservable();\r\n  page$ = this.pageSource.asObservable();\r\n  selectedProducts$ = this.selectedProductsSource.asObservable();\r\n\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n  sortBy: string;\r\n  order: string;\r\n  filters: ProductSearchQuery;\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataProducts) private productDataService: IEntityDataApiService<Product>,\r\n  ) { }\r\n\r\n  reloadItems() {\r\n    this.loadingSource.next(true);\r\n    return this.productDataService.fetchPage(this.pageIndex, this.pageSize, this.sortBy, this.order, this.filters).pipe(\r\n      tap(page => this.pageSource.next(page)),\r\n      ignoreElements(),\r\n      finalize(() => this.loadingSource.next(false))\r\n    );\r\n  }\r\n\r\n  includeProduct(prod: Product) {\r\n    return EMPTY.pipe(\r\n      finalize(() => {\r\n        const productArraySet = new Set([...this.selectedProductsSource.value, prod]);\r\n        this.selectedProductsSource.next([...productArraySet.values()]);\r\n      }\r\n    ));\r\n  }\r\n\r\n  dropProduct(index: number) {\r\n    return this.selectedProducts$.pipe(\r\n      take(1),\r\n      tap(selectedProducts => {\r\n        selectedProducts.splice(index, 1);\r\n        this.selectedProductsSource.next(selectedProducts);\r\n      }),\r\n      ignoreElements()\r\n    );\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 mat-dialog-title i18n=\"Title of dialog prompt to add products into details of a sell\">Add Products</h2>\r\n<div class=\"main\">\r\n  <div class=\"available\">\r\n    <h3 i18n=\"Title of widget displaying available products for addition to details of a sell\">Available Products</h3>\r\n    <app-product-filters-panel (filtersChanges)=\"onFiltersChange($event)\">\r\n    </app-product-filters-panel>\r\n    <app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n    </app-centered-mat-spinner>\r\n    <div *ngIf=\"(loading$ | async) === false\" class=\"product-table-wrapper\">\r\n      <table mat-table [dataSource]=\"availableProducts$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n            i18n=\"product name|Name of table header for name of product\">Name</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.name }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"barcode\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n            i18n=\"product barcode|Name of table header for barcode of product\">Barcode</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.barcode }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"price\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n            i18n=\"Name of table header for price per product unit\">Price</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.price | currency }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th mat-header-cell *matHeaderCellDef> </th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            <button mat-button mat-icon-button type=\"button\"\r\n              color=\"primary\"\r\n              aria-label=\"Add this product\"\r\n              i18n-aria-label=\"add this product|Label for action button to mark a product for addition to details of a sell\"\r\n              (click)=\"onClickIncludeProductIntoSelection(product)\">\r\n              <mat-icon>add</mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"productTableColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: productTableColumns;\"></tr>\r\n      </table>\r\n    </div>\r\n    <div>\r\n      <mat-paginator\r\n        (page)=\"onPage($event)\"\r\n        [showFirstLastButtons]=\"true\"\r\n        [pageSizeOptions]=\"pageSizeOptions\"\r\n        [length]=\"totalCount$ | async\">\r\n      </mat-paginator>\r\n    </div>\r\n  </div>\r\n  <mat-divider vertical></mat-divider>\r\n  <div class=\"selected\">\r\n    <h3 i18n=\"Title of widget displaying products marked for addition to details of a sell\">Selected Products</h3>\r\n    <div class=\"product-table-wrapper\">\r\n      <table mat-table #selectedProductsTable [dataSource]=\"selectedProducts\">\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef\r\n            i18n=\"product name|Name of table header for name of product\">Name</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.name }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"barcode\">\r\n          <th mat-header-cell *matHeaderCellDef\r\n            i18n=\"product barcode|Name of table header for barcode of product\">Barcode</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.barcode }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"price\">\r\n          <th mat-header-cell *matHeaderCellDef\r\n            i18n=\"Name of table header for price per product unit\">Price</th>\r\n          <td mat-cell *matCellDef=\"let product\">\r\n            {{ product.price | currency }}\r\n          </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th mat-header-cell *matHeaderCellDef> </th>\r\n          <td mat-cell *matCellDef=\"let i=index\">\r\n            <button mat-button mat-icon-button type=\"button\"\r\n              color=\"warn\"\r\n              aria-label=\"Don't add this product\"\r\n              i18n-aria-label=\"dont add this product|Label for action button to unmark a product for addition details of a sell\"\r\n              (click)=\"onClickDropFromSelection(i)\">\r\n              <mat-icon>remove</mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"productTableColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: productTableColumns;\"></tr>\r\n      </table>\r\n    </div>\r\n    <div class=\"summary\">\r\n      <b i18n=\"Label to hint users that they have selected a certain number of products\">{{ selectedProducts.length }} products selected</b>\r\n      <span i18n=\"Label to hint users that product lists do reject duplicates\">Note: product lists omit duplicates</span>\r\n    </div>\r\n    <div class=\"actions\">\r\n      <button mat-button mat-raised-button type=\"button\"\r\n        color=\"primary\"\r\n        [disabled]=\"isArrayEmpty$ | async\"\r\n        [mat-dialog-close]=\"selectedProducts\"\r\n        i18n=\"confirm|Label for action button to accept and proceed\">Confirm</button>\r\n      <button mat-button mat-raised-button type=\"button\"\r\n        mat-dialog-close\r\n        i18n=\"cancel|Label for action button to cancel and/or stop an operation\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { MatTable } from '@angular/material/table';\r\nimport { merge, Observable, of, Subscription } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { ProductsArrayDialogService } from './products-array-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-products-array-dialog',\r\n  templateUrl: './products-array-dialog.component.html',\r\n  styleUrls: ['./products-array-dialog.component.css'],\r\n  providers: [ ProductsArrayDialogService ]\r\n})\r\nexport class ProductsArrayDialogComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private selectedProductsSub: Subscription;\r\n  private selectionChangeSub: Subscription;\r\n  private fetchingSubscription: Subscription;\r\n  private actionSub: Subscription;\r\n\r\n  pageSizeOptions = [10, 20, 50];\r\n  productTableColumns = ['name', 'barcode', 'price', 'actions'];\r\n  selectedProducts: Product[];\r\n  loading$: Observable<boolean>;\r\n  availableProducts$: Observable<Product[]>;\r\n  totalCount$: Observable<number>;\r\n  isArrayEmpty$: Observable<boolean>;\r\n\r\n  @ViewChild('selectedProductsTable', { static: true }) selectedProductsTable: MatTable<Product>;\r\n\r\n  constructor(\r\n    private service: ProductsArrayDialogService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selectedProductsSub = this.service.selectedProducts$.pipe(\r\n      tap(v => {\r\n        this.selectedProducts = v;\r\n        if (v.length) {\r\n          this.selectedProductsTable.renderRows();\r\n        }\r\n      })\r\n    ).subscribe();\r\n    this.loading$ = this.service.loading$.pipe();\r\n    this.availableProducts$ = merge(\r\n      of([]),\r\n      this.service.page$.pipe(\r\n        map(arr => arr.items)\r\n      )\r\n    );\r\n    this.totalCount$ = this.service.page$.pipe(\r\n      map(page => page.totalCount)\r\n    );\r\n    this.service.pageSize = this.pageSizeOptions[0];\r\n    this.reload();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.selectedProductsSub.unsubscribe();\r\n    this.selectionChangeSub?.unsubscribe();\r\n    this.fetchingSubscription?.unsubscribe();\r\n    this.actionSub?.unsubscribe();\r\n  }\r\n\r\n  onFiltersChange(f: any): void {\r\n    this.service.filters = f;\r\n    this.reload();\r\n  }\r\n\r\n  onSortChange(event: Sort) {\r\n    this.service.sortBy = event.active;\r\n    this.service.order = event.direction;\r\n    this.reload();\r\n  }\r\n\r\n  onPage(event: PageEvent) {\r\n    this.service.pageIndex = event.pageIndex;\r\n    this.service.pageSize = event.pageSize;\r\n    this.reload();\r\n  }\r\n\r\n  onClickIncludeProductIntoSelection(p: Product): void {\r\n    this.actionSub?.unsubscribe();\r\n    this.actionSub = this.service.includeProduct(p).subscribe();\r\n  }\r\n\r\n  onClickDropFromSelection(index: number): void {\r\n    this.actionSub?.unsubscribe();\r\n    this.actionSub = this.service.dropProduct(index).subscribe();\r\n  }\r\n\r\n  reload() {\r\n    this.fetchingSubscription?.unsubscribe();\r\n    this.fetchingSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, EMPTY, ReplaySubject } from 'rxjs';\r\nimport { finalize, tap } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalProductListContentsDataApiService } from 'src/app/api/transactional-product-list-contents.data.api.iservice';\r\nimport { DataPage } from 'src/models/DataPage';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { ProductList } from 'src/models/entities/ProductList';\r\n\r\n@Injectable()\r\nexport class ProductListContentsDialogService {\r\n\r\n  private pageSource = new ReplaySubject<DataPage<Product>>(1);\r\n  private loadingSource = new BehaviorSubject(false);\r\n\r\n  page$ = this.pageSource.asObservable();\r\n  loading$ = this.loadingSource.asObservable();\r\n\r\n  pageIndex = 0;\r\n  pageSize = 10;\r\n  sortBy = '';\r\n  order = '';\r\n  list: ProductList | null;\r\n\r\n  constructor(\r\n    @Inject(API_INJECTION_TOKENS.dataProductLists) private listApiService: ITransactionalProductListContentsDataApiService,\r\n  ) { }\r\n\r\n  reloadItems() {\r\n    this.loadingSource.next(true);\r\n    return this.listApiService.fetchContents(this.list, this.pageIndex, this.pageSize, this.sortBy, this.order).pipe(\r\n      tap(page => this.pageSource.next(page)),\r\n      finalize(() => this.loadingSource.next(false))\r\n    );\r\n  }\r\n\r\n  addProduct(product: Product) {\r\n    return this.list ?\r\n      this.listApiService.addToContents(this.list, product) :\r\n      EMPTY;\r\n  }\r\n\r\n  replaceProductsWith(products: Product[]) {\r\n    return this.list ?\r\n      this.listApiService.updateContents(this.list, products) :\r\n      EMPTY;\r\n  }\r\n\r\n  removeProduct(product: Product) {\r\n    return this.list ?\r\n      this.listApiService.deleteFromContents(this.list, product) :\r\n      EMPTY;\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h2 mat-dialog-title>{{ data.list.name }}</h2>\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n\r\n<div [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"products$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header=\"\"\r\n          i18n=\"product name|Name of table header for name of product\">Name</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"barcode\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product barcode|Name of table header for barcode of product\">Barcode</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.barcode }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"price\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for price per product unit\">Price</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.price | currency }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            color=\"primary\"\r\n            aria-label=\"Remove this product\"\r\n            i18n-aria-label=\"remove product from list|Label for action button to remove product from a list\"\r\n            (click)=\"onClickRemoveProduct(product)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"productTableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: productTableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n  </div>\r\n\r\n  <div class=\"actions\">\r\n    <button mat-button mat-raised-button type=\"button\"\r\n      color=\"primary\"\r\n      (click)=\"onClickAddProducts()\"\r\n      i18n=\"add more products to list|Label for action button to start selecting products to add to a list\">Add more</button>\r\n    <button mat-button mat-raised-button type=\"button\"\r\n      color=\"primary\"\r\n      (click)=\"onClickChooseProducts()\"\r\n      i18n=\"choose products for list|Label for action button to start selecting products to replace a list's contents with\">Replace all</button>\r\n    <button mat-button mat-raised-button type=\"button\"\r\n      [disabled]=\"isArrayEmpty$ | async\"\r\n      mat-dialog-close\r\n      i18n=\"close|Label for action button to close a window or dialog\">Close</button>\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { EMPTY, forkJoin, from, merge, Observable, of, Subscription } from 'rxjs';\r\nimport { filter, finalize, map, switchMap, tap } from 'rxjs/operators';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { ProductsArrayDialogComponent } from '../products-array/products-array-dialog.component';\r\nimport { ProductListContentsDialogService } from './product-list-contents-dialog.service';\r\nimport { ProductListContentsDialogData } from './ProductListContentsDialogData';\r\n\r\n@Component({\r\n  selector: 'app-product-list-contents-dialog',\r\n  templateUrl: './product-list-contents-dialog.component.html',\r\n  styleUrls: ['./product-list-contents-dialog.component.css'],\r\n  providers: [ ProductListContentsDialogService ]\r\n})\r\nexport class ProductListContentsDialogComponent\r\n  implements OnInit, OnDestroy {\r\n\r\n  private loadingSubscription: Subscription;\r\n  private actionSubscription: Subscription\r\n\r\n  productTableColumns = ['name', 'barcode', 'price', 'actions'];\r\n  pageSizeOptions = [5, 10, 20, 50, 100];\r\n\r\n  loading$: Observable<boolean>;\r\n  products$: Observable<Product[]>;\r\n  isArrayEmpty$: Observable<boolean>;\r\n  totalCount$: Observable<number>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ProductListContentsDialogData,\r\n    private service: ProductListContentsDialogService,\r\n    private dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.service.list = this.data.list;\r\n    this.service.pageSize = this.pageSizeOptions[0];\r\n    this.loading$ = this.service.loading$.pipe();\r\n    this.products$ = this.service.page$.pipe(map(page => page.items));\r\n    this.totalCount$ = this.service.page$.pipe(map(page => page.totalCount));\r\n    this.isArrayEmpty$ = this.products$.pipe(map(array => (array.length === 0)));\r\n    this.reload();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.loadingSubscription?.unsubscribe();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  onSortChange(sort: Sort): void {\r\n    this.service.sortBy = sort.active;\r\n    this.service.order = sort.direction;\r\n    this.reload();\r\n  }\r\n\r\n  onPage(event: PageEvent): void {\r\n    this.service.pageIndex = event.pageIndex;\r\n    this.service.pageSize = event.pageSize;\r\n    this.reload();\r\n  }\r\n\r\n  onClickAddProducts(): void {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.dialog.open(\r\n      ProductsArrayDialogComponent,\r\n      {\r\n        maxHeight: '90vh'\r\n      }\r\n    ).afterClosed().pipe(\r\n      filter(products => (products?.length && Array.isArray(products))),\r\n      switchMap((products: Product[]) => from(products).pipe(\r\n        switchMap(p => this.service.addProduct(p)),\r\n        finalize(() => this.reload())\r\n      ))\r\n    ).subscribe();\r\n  }\r\n\r\n  onClickChooseProducts(): void {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.dialog.open(\r\n      ProductsArrayDialogComponent,\r\n      {\r\n        maxHeight: '90vh'\r\n      }\r\n    ).afterClosed().pipe(\r\n      filter(products => (products?.length && Array.isArray(products))),\r\n      switchMap((products: Product[]) => this.service.replaceProductsWith(products).pipe(\r\n        finalize(() => this.reload())\r\n      ))\r\n    ).subscribe();\r\n  }\r\n\r\n  onClickRemoveProduct(p: Product): void {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeProduct(p).pipe(\r\n      tap(() => this.reload())\r\n    ).subscribe();\r\n  }\r\n\r\n  reload() {\r\n    this.loadingSubscription?.unsubscribe();\r\n    this.loadingSubscription = this.service.reloadItems().subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { ProductList } from 'src/models/entities/ProductList';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementProductListsService\r\n  extends TransactionalDataManagerServiceDirective<ProductList> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataProductLists) public dataService: ITransactionalEntityDataApiService<ProductList>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"code\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product list code|Name of table header for code of product list\">Code</th>\r\n        <td mat-cell *matCellDef=\"let productList\">\r\n          {{ productList.code }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product list name|Name of table header for name of product list\">Name</th>\r\n        <td mat-cell *matCellDef=\"let productList\">\r\n          {{ productList.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"totalCount\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product list total count|Name of table header for total count of products in a list\">Count</th>\r\n        <td mat-cell *matCellDef=\"let productList\">\r\n          {{ productList.totalCount || 0 }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let productList\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"View contents\"\r\n            i18n-aria-label=\"view contents of list|Label for action button to view contents of a list\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickViewContents(productList)\">\r\n            <mat-icon>list</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"Edit\"\r\n            i18n-aria-label=\"edit|Label for action button to edit information of an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickEdit(productList)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(productList)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { ProductList } from 'src/models/entities/ProductList';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { ProductListContentsDialogComponent } from '../../dialogs/product-list-contents/product-list-contents-dialog.component';\r\nimport { ProductListContentsDialogData } from '../../dialogs/product-list-contents/ProductListContentsDialogData';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementProductListsService } from './management-product-lists.service';\r\n\r\n@Component({\r\n  selector: 'app-management-product-lists',\r\n  templateUrl: './management-product-lists.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-product-lists.component.css'\r\n  ]\r\n})\r\nexport class ManagementProductListsComponent\r\n  extends TransactionalDataManagerComponentDirective<ProductList>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'code', 'name', 'totalCount', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementProductListsService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: ProductList): EntityFormDialogConfig<ProductList> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'productList',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n\r\n  onClickViewContents(list: ProductList) {\r\n    const data: ProductListContentsDialogData = {\r\n      list\r\n    };\r\n    this.dialogService.open(\r\n      ProductListContentsDialogComponent,\r\n      { data }\r\n    );\r\n  }\r\n\r\n  onClickDelete(list: ProductList) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([list]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const successMessage = $localize`:Message of success after deleting a product list with name {{ name }}:Product list '${list.name}:name:' deleted`;\r\n          this.snackBarService.open(successMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementProductsService\r\n  extends TransactionalDataManagerServiceDirective<Product> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataProducts) public dataService: ITransactionalEntityDataApiService<Product>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product name|Name of table header for name of product\">Name</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"barcode\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"product barcode|Name of table header for barcode of product\">Barcode</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.barcode }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"price\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for price per product unit\">Price</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.price | currency }}\r\n        </td>\r\n      </ng-container>\r\n      <!-- <ng-container matColumnDef=\"currentStock\">\r\n        <th mat-header-cell *matHeaderCellDef> Stock Actual </th>\r\n        <td mat-cell *matCellDef=\"let product\"\r\n          i18n=\"Name of table header for price per product unit\">\r\n          {{ product.currentStock }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"criticalStock\">\r\n        <th mat-header-cell *matHeaderCellDef> Stock Crítico </th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.criticalStock }}\r\n        </td>\r\n      </ng-container> -->\r\n      <ng-container matColumnDef=\"category\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for category of product\">Category</th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          {{ product.category.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"Edit\"\r\n            i18n-aria-label=\"edit|Label for action button to edit information of an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickEdit(product)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(product)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { Product } from 'src/models/entities/Product';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementProductsService } from './management-products.service';\r\n\r\n@Component({\r\n  selector: 'app-management-products',\r\n  templateUrl: './management-products.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-products.component.css'\r\n  ]\r\n})\r\nexport class ManagementProductsComponent\r\n  extends TransactionalDataManagerComponentDirective<Product>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'name', 'barcode', 'price', 'actions' ];\r\n  // tableColumns = [ 'name', 'barcode', 'price', 'currentStock', 'criticalStock', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementProductsService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: Product): EntityFormDialogConfig<Product> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'product',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem',\r\n      maxHeight: '80vh'\r\n    };\r\n  }\r\n\r\n  onClickDelete(prod: Product) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([prod]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const message = $localize`:Message of success after deleting a product with name {{ name }}:Product '${prod.name}:name:' deleted`;\r\n          this.snackBarService.open(message, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ISalesDataApiService } from 'src/app/api/sales.data.api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { Sell } from 'src/models/entities/Sell';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementSalesService\r\n  extends TransactionalDataManagerServiceDirective<Sell> {\r\n\r\n  constructor(\r\n    protected sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataSales) public dataService: ISalesDataApiService\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n\r\n  markRejected(sell: Partial<Sell>) {\r\n    return this.sharedDialogService.requestConfirmation({\r\n      title: $localize`:Title of generic confirmation dialog:Confirmation required`,\r\n      message: $localize`:Label to hint user that rejections cannot be undone, and they do not trigger automatic refunds:The sell will remain read-only. Any refunds will have to be issued manually. This operation cannot be undone. Are you sure you want to reject this order?`\r\n    }).pipe(\r\n      filter(didConfirm => !!didConfirm),\r\n      switchMap(() => this.dataService.markAsRejected(sell as Sell))\r\n    );\r\n  }\r\n\r\n  markConfirmed(sell: Partial<Sell>) {\r\n    return this.sharedDialogService.requestConfirmation({\r\n      title: $localize`:Title of generic confirmation dialog:Confirmation required`,\r\n      message: $localize`:Label to hint user that confirmations cannot be undone, and they trigger an automatic mail to the customer:The customer will be notified and sent a receipt by e-mail. This operation cannot be undone. Are you sure you want to confirm this order?`\r\n    }).pipe(\r\n      filter(didConfirm => !!didConfirm),\r\n      switchMap(() => this.dataService.markAsConfirmed(sell as Sell))\r\n    );\r\n  }\r\n\r\n  markComplete(sell: Partial<Sell>) {\r\n    return this.sharedDialogService.requestConfirmation({\r\n      title: $localize`:Title of generic confirmation dialog:Confirmation required`,\r\n      message: $localize`:Label to hint user that completions cannot be undone:The sell will remain read-only. This operation cannot be undone. Are you sure you want to mark this order as completed?`\r\n    }).pipe(\r\n      filter(didConfirm => !!didConfirm),\r\n      switchMap(() => this.dataService.markAsCompleted(sell as Sell))\r\n    );\r\n  }\r\n\r\n\r\n  fetch(sell: Partial<Sell>) {\r\n    return this.dataService.fetchExisting(sell);\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, Inject, OnDestroy } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { finalize, switchMap, tap } from 'rxjs/operators';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { SELL_STATUS_NAMES_MAP } from 'src/text/sell-status-names';\r\nimport { ManagementSalesService } from '../../routes/sales/management-sales.service';\r\nimport { ManagementSellReviewDialogData } from './ManagementSellReviewDialogData';\r\n\r\n@Component({\r\n  selector: 'app-management-sell-review-dialog',\r\n  templateUrl: './management-sell-review-dialog.component.html',\r\n  styleUrls: ['./management-sell-review-dialog.component.css']\r\n})\r\nexport class ManagementSellReviewDialogComponent\r\n  implements OnDestroy {\r\n\r\n  private busyStatusSource = new BehaviorSubject(false);\r\n  private operationSub: Subscription;\r\n\r\n  isBusy$ = this.busyStatusSource.asObservable().pipe();\r\n  detailsTableColumns = ['product', 'price', 'quantity'];\r\n\r\n  get dialogTitle() { return $localize`:Title of dialog used to view details of one sell:Details of sell #${ this.data.sell.buyOrder }:buyOrder:`; }\r\n  get isNotPaid() { return this.data.sell?.status !== SELL_STATUS_NAMES_MAP.get(3); }\r\n  get isNotConfirmed() { return this.data.sell?.status !== SELL_STATUS_NAMES_MAP.get(4); }\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: ManagementSellReviewDialogData,\r\n    private salesService: ManagementSalesService,\r\n    private snackBarService: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.busyStatusSource.complete();\r\n    this.operationSub?.unsubscribe();\r\n  }\r\n\r\n  onClickReject(): void {\r\n    this.operationSub?.unsubscribe();\r\n    this.busyStatusSource.next(true);\r\n    this.operationSub = this.updateSellDataAfter(\r\n      this.salesService.markRejected(this.data.sell),\r\n      $localize`:Message of success after rejecting an order:Sell was rejected`\r\n    ).pipe(\r\n      finalize(() => this.busyStatusSource.next(false))\r\n    ).subscribe();\r\n  }\r\n\r\n  onClickConfirm(): void {\r\n    this.operationSub?.unsubscribe();\r\n    this.busyStatusSource.next(true);\r\n    this.operationSub = this.updateSellDataAfter(\r\n      this.salesService.markConfirmed(this.data.sell),\r\n      $localize`:Message of success after confirming an order:Sell was confirmed`\r\n    ).pipe(\r\n      finalize(() => this.busyStatusSource.next(false))\r\n    ).subscribe();\r\n  }\r\n\r\n  onClickComplete(): void {\r\n    this.operationSub?.unsubscribe();\r\n    this.busyStatusSource.next(true);\r\n    this.operationSub = this.updateSellDataAfter(\r\n      this.salesService.markComplete(this.data.sell),\r\n      $localize`:Message of success after completing an order:Congratulations! Sell is complete`\r\n    ).pipe(\r\n      switchMap(() => this.salesService.reloadItems()),\r\n      finalize(() => this.busyStatusSource.next(false))\r\n    ).subscribe();\r\n  }\r\n\r\n  private updateSellDataAfter(observable: Observable<any>, successMessage: string) {\r\n    return observable.pipe(\r\n      switchMap(() => this.salesService.fetch(this.data.sell)),\r\n      tap(\r\n        sell => {\r\n          this.data.sell = sell;\r\n          this.snackBarService.open(successMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        err => this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL)\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<h1>{{ dialogTitle }}</h1>\r\n<app-sell-information [sell]=\"data.sell\"></app-sell-information>\r\n<mat-divider></mat-divider>\r\n<app-sell-details-table [editable]=\"false\"\r\n  [sellDetails]=\"data.sell.details\"\r\n  [tableColumns]=\"detailsTableColumns\">\r\n</app-sell-details-table>\r\n<div class=\"actions\">\r\n  <button type=\"button\" class=\"reject\"\r\n    mat-button mat-raised-button\r\n    color=\"warn\"\r\n    [disabled]=\"isNotPaid || (isBusy$ | async)\"\r\n    (click)=\"onClickReject()\">\r\n    <mat-icon>block</mat-icon>\r\n    <span i18n=\"Label for action button to trigger rejection of an order\">Reject</span>\r\n  </button>\r\n  <button type=\"button\" class=\"confirm\"\r\n    mat-button mat-raised-button\r\n    [disabled]=\"isNotPaid || (isBusy$ | async)\"\r\n    (click)=\"onClickConfirm()\">\r\n    <mat-icon>done</mat-icon>\r\n    <span i18n=\"Label for action to trigger confirmation/marking an order as reviewed\">Confirm</span>\r\n  </button>\r\n  <button type=\"button\" class=\"complete\"\r\n    mat-button mat-raised-button\r\n    color=\"accent\"\r\n    [disabled]=\"isNotConfirmed || (isBusy$ | async)\"\r\n    (click)=\"onClickComplete()\">\r\n    <mat-icon>done_all</mat-icon>\r\n    <span i18n=\"Label for action to trigger marking an order as completed\">Complete</span>\r\n  </button>\r\n</div>\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"buyOrder\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for buy order of sell\">Buy order no.</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          {{ row.item.buyOrder }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"date\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for date and time of sell\">Date and time</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          {{ row.item.date | date:'short' }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"customer\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"customer|Name of table header for name of customer\">Customer</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          {{ row.item.customer.person.firstName }} {{ row.item.customer.person.lastName }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"status\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"transaction status|Name of table header for status of sell\">Status</th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          {{ row.item.status }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let row\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            aria-label=\"View details\"\r\n            i18n-aria-label=\"view details|Label for action button to view and manage details of a complex item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickView(row)\">\r\n            <mat-icon class=\"material-icons-outlined\">info</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(row.item)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\">\r\n      </tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { finalize, map, onErrorResumeNext, switchMap, tap } from 'rxjs/operators';\r\nimport { Sell } from 'src/models/entities/Sell';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { ManagementSellReviewDialogComponent } from '../../dialogs/sell-review/management-sell-review-dialog.component';\r\nimport { ManagementSellReviewDialogData } from '../../dialogs/sell-review/ManagementSellReviewDialogData';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementSalesService } from './management-sales.service';\r\n\r\nexport interface SalesTableRow {\r\n  item: Partial<Sell>;\r\n  focused: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-management-sales',\r\n  templateUrl: './management-sales.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-sales.component.css'\r\n  ]\r\n})\r\nexport class ManagementSalesComponent\r\n  extends TransactionalDataManagerComponentDirective<Sell>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = ['buyOrder', 'date', 'customer', 'status', 'actions'];\r\n  items$: Observable<SalesTableRow[]>;\r\n\r\n  constructor(\r\n    protected service: ManagementSalesService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.items$ = this.service.items$.pipe(\r\n      map(items => items.map(item => (\r\n        {\r\n          item,\r\n          focused: false\r\n        }\r\n      )))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  onClickDelete(s: Sell) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([s]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const message = $localize`:Message of success after deleting a sell with buy order {{ buyOrder }} on date {{ date }}:Sell N°${s.buyOrder}:buyOrder: (${s.date}:date:) deleted`;\r\n          this.snackBarService.open(message, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  onClickView(row: SalesTableRow): void {\r\n    if (!row.focused) {\r\n      row.focused = true;\r\n      this.actionSubscription?.unsubscribe();\r\n      this.actionSubscription = this.service.fetch(row.item).pipe(\r\n        switchMap(sell => {\r\n          const dialogData: ManagementSellReviewDialogData = { sell };\r\n          return this.dialogService.open(\r\n            ManagementSellReviewDialogComponent,\r\n            {\r\n              width: '50rem',\r\n              data: dialogData\r\n            }\r\n          ).afterClosed();\r\n        }),\r\n        onErrorResumeNext(),\r\n        finalize(() => { row.focused = false; })\r\n      ).subscribe();\r\n    }\r\n  }\r\n\r\n  protected createDialogProperties(item: Sell): EntityFormDialogConfig<Sell> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'sell',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '80rem'\r\n    };\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { Salesperson } from 'src/models/entities/Salesperson';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementSalespeopleService\r\n  extends TransactionalDataManagerServiceDirective<Salesperson> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataSalespeople) public dataService: ITransactionalEntityDataApiService<Salesperson>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"person full name|Name of table header for full name of person\">Name</th>\r\n        <td mat-cell *matCellDef=\"let salesperson\">\r\n          {{ salesperson.person.firstName }} {{ salesperson.person.lastName }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"idNumber\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"person id number|Name of table header for id number of person\">Id number</th>\r\n        <td mat-cell *matCellDef=\"let salesperson\">\r\n          {{ salesperson.person.idNumber }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let salesperson\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"Edit\"\r\n            i18n-aria-label=\"edit|Label for action button to edit information of an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickEdit(salesperson)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(salesperson)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { Salesperson } from 'src/models/entities/Salesperson';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementSalespeopleService } from './management-salespeople.service';\r\n\r\n@Component({\r\n  selector: 'app-management-salespeople',\r\n  templateUrl: './management-salespeople.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-salespeople.component.css'\r\n  ]\r\n})\r\nexport class ManagementSalespeopleComponent\r\n  extends TransactionalDataManagerComponentDirective<Salesperson>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'name', 'idNumber', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementSalespeopleService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  onClickDelete(e: Salesperson) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([e]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const successMessage = $localize`:Message of success after deleting a salesperson with first name {{ firstName }} and last name {{ lastName }}:Salesperson ${e.person.firstName}:firstName: ${e.person.lastName}:lastName: deleted`;\r\n          this.snackBarService.open(successMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: Salesperson): EntityFormDialogConfig<Salesperson> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'person',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { Shipper } from 'src/models/entities/Shipper';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementShippersService\r\n  extends TransactionalDataManagerServiceDirective<Shipper> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataShippers) public dataService: ITransactionalEntityDataApiService<Shipper>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"shipper name|Name of table header for name of shipper\">Name</th>\r\n        <td mat-cell *matCellDef=\"let shipper\">\r\n          {{ shipper.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let shipper\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"Edit\"\r\n            i18n-aria-label=\"edit|Label for action button to edit information of an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickEdit(shipper)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(shipper)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { Shipper } from 'src/models/entities/Shipper';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementShippersService } from './management-shippers.service';\r\n\r\n@Component({\r\n  selector: 'app-management-shippers',\r\n  templateUrl: './management-shippers.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-shippers.component.css'\r\n  ]\r\n})\r\nexport class ManagementShippersComponent\r\n  extends TransactionalDataManagerComponentDirective<Shipper>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'name', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementShippersService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  onClickDelete(shipper: Shipper) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.service.removeItems([shipper]).pipe(\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const successMessage = $localize`:Message of success after deleting a shipper with name {{ name }}:Shipper '${shipper.name}:name:' deleted`;\r\n          this.snackBarService.open(successMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: Shipper): EntityFormDialogConfig<Shipper> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'shipper',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n\r\n}\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { API_INJECTION_TOKENS } from 'src/app/api/api-injection-tokens';\r\nimport { ITransactionalEntityDataApiService } from 'src/app/api/transactional-entity.data-api.iservice';\r\nimport { SharedDialogService } from 'src/app/shared/dialogs/shared-dialog.service';\r\nimport { User } from 'src/models/entities/User';\r\nimport { TransactionalDataManagerServiceDirective } from '../../directives/transactional-data-manager/transactional-data-manager.service.directive';\r\n\r\n@Injectable()\r\nexport class ManagementUsersService\r\n  extends TransactionalDataManagerServiceDirective<User> {\r\n\r\n  constructor(\r\n    sharedDialogService: SharedDialogService,\r\n    @Inject(API_INJECTION_TOKENS.dataUsers) public dataService: ITransactionalEntityDataApiService<User>\r\n  ) {\r\n    super(sharedDialogService);\r\n  }\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<app-centered-mat-spinner *ngIf=\"loading$ | async\">\r\n</app-centered-mat-spinner>\r\n<div class=\"data-manager\" [hidden]=\"loading$ | async\">\r\n  <div class=\"table-wrapper\">\r\n\r\n    <table mat-table [dataSource]=\"items$\" matSort (matSortChange)=\"onSortChange($event)\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for user name\">User name</th>\r\n        <td mat-cell *matCellDef=\"let user\">\r\n          {{ user.name }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"role\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header\r\n          i18n=\"Name of table header for user role name\">Role</th>\r\n        <td mat-cell *matCellDef=\"let user\">\r\n          {{ user.role }}\r\n        </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef> </th>\r\n        <td mat-cell *matCellDef=\"let user\">\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canUpdate$ | async\"\r\n            color=\"primary\"\r\n            aria-label=\"Edit\"\r\n            i18n-aria-label=\"edit|Label for action button to edit information of an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickEdit(user)\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-button mat-icon-button type=\"button\"\r\n            *ngIf=\"canDelete$ | async\"\r\n            color=\"warn\"\r\n            aria-label=\"Delete\"\r\n            i18n-aria-label=\"delete|Label for action button to delete an item\"\r\n            [disabled]=\"busy$ | async\"\r\n            (click)=\"onClickDelete(user)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: tableColumns;\"></tr>\r\n    </table>\r\n\r\n  </div>\r\n  <div>\r\n\r\n    <app-management-data-actions-button-bar\r\n      [actions]=\"actions$ | async\"\r\n      (create)=\"onClickCreate()\">\r\n    </app-management-data-actions-button-bar>\r\n    <mat-paginator\r\n      (page)=\"onPage($event)\"\r\n      [showFirstLastButtons]=\"true\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"totalCount$ | async\">\r\n    </mat-paginator>\r\n\r\n  </div>\r\n</div>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ManagementRoutingAccessResolver } from './management-routing.access-resolver';\r\nimport { ManagementRoutingGuard } from './management-routing.guard';\r\nimport { ManagementComponent } from './management.component';\r\nimport { ManagementChildRoute } from './ManagementChildRoute';\r\nimport { ManagementCustomersComponent } from './routes/customers/management-customers.component';\r\nimport { ManagementDashboardComponent } from './routes/dashboard/management-dashboard.component';\r\nimport { ManagementImagesComponent } from './routes/images/management-images.component';\r\nimport { ManagementProductCategoriesComponent } from './routes/product-categories/management-product-categories.component';\r\nimport { ManagementProductListsComponent } from './routes/product-lists/management-product-lists.component';\r\nimport { ManagementProductsComponent } from './routes/products/management-products.component';\r\nimport { ManagementSalesComponent } from './routes/sales/management-sales.component';\r\nimport { ManagementSalespeopleComponent } from './routes/salespeople/management-salespeople.component';\r\nimport { ManagementShippersComponent } from './routes/shippers/management-shippers.component';\r\nimport { ManagementUsersComponent } from './routes/users/management-users.component';\r\n\r\nexport const MANAGEMENT_CHILD_ROUTES: ManagementChildRoute[] = [\r\n  {\r\n    path: 'dashboard', component: ManagementDashboardComponent,\r\n    data: {\r\n      matIcon: 'home',\r\n      title: $localize`:Title of page for management dashboard:Dashboard`\r\n    }\r\n  },\r\n  {\r\n    path: 'sales', component: ManagementSalesComponent,\r\n    data: {\r\n      matIcon: 'loyalty',\r\n      title: $localize`:Title of page for management of sales:Sales`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'product_lists', component: ManagementProductListsComponent,\r\n    data: {\r\n      matIcon: 'view_list',\r\n      title: $localize`:Title of page for management of product lists:Lists`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'products', component: ManagementProductsComponent,\r\n    data: {\r\n      matIcon: 'inventory',\r\n      title: $localize`:Title of page for management of products:Products`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'product_categories', component: ManagementProductCategoriesComponent,\r\n    data: {\r\n      matIcon: 'category',\r\n      title: $localize`:Title of page for management of product categories:Categories`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'customers', component: ManagementCustomersComponent,\r\n    data: {\r\n      matIcon: 'face',\r\n      title: $localize`:Title of page for management of customers:Customers`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'salespeople', component: ManagementSalespeopleComponent,\r\n    data: {\r\n      matIcon: 'work_outline',\r\n      title: $localize`:Title of page for management of salespeople:Salespeople`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'users', component: ManagementUsersComponent,\r\n    data: {\r\n      matIcon: 'person',\r\n      title: $localize`:Title of page for management of users:Users`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'images', component: ManagementImagesComponent,\r\n    data: {\r\n      matIcon: 'image',\r\n      title: $localize`:Title of page for management of images:Images`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n  {\r\n    path: 'shippers', component: ManagementShippersComponent,\r\n    data: {\r\n      matIcon: 'local_shipping',\r\n      title: $localize`:Title of page for management of shippers:Shippers`\r\n    },\r\n    resolve: { access: ManagementRoutingAccessResolver }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild([\r\n      {\r\n        path: '', component: ManagementComponent,\r\n        children: [\r\n          ...MANAGEMENT_CHILD_ROUTES,\r\n          {\r\n            path: '**', pathMatch: 'prefix', redirectTo: 'dashboard'\r\n          }\r\n        ],\r\n        canActivate: [ManagementRoutingGuard],\r\n        canActivateChild: [ManagementRoutingGuard]\r\n      }\r\n    ])\r\n  ]\r\n})\r\nexport class ManagementRoutingModule { }\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { User } from 'src/models/entities/User';\r\nimport { COMMON_DISMISS_BUTTON_LABEL, COMMON_ERROR_MESSAGE } from 'src/text/messages';\r\nimport { EntityFormDialogConfig } from '../../dialogs/entity-form/EntityFormDialogConfig';\r\nimport { TransactionalDataManagerComponentDirective } from '../../directives/transactional-data-manager/transactional-data-manager.component.directive';\r\nimport { ManagementUsersService } from './management-users.service';\r\n\r\n@Component({\r\n  selector: 'app-management-users',\r\n  templateUrl: './management-users.component.html',\r\n  styleUrls: [\r\n    '../data-manager.styles.css',\r\n    './management-users.component.css'\r\n  ]\r\n})\r\nexport class ManagementUsersComponent\r\n  extends TransactionalDataManagerComponentDirective<User>\r\n  implements OnInit, OnDestroy {\r\n\r\n  private actionSubscription: Subscription;\r\n\r\n  tableColumns = [ 'name', 'role', 'actions' ];\r\n\r\n  constructor(\r\n    protected service: ManagementUsersService,\r\n    protected dialogService: MatDialog,\r\n    protected route: ActivatedRoute,\r\n    private snackBarService: MatSnackBar\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.actionSubscription?.unsubscribe();\r\n  }\r\n\r\n  onClickDelete(usr: User) {\r\n    this.actionSubscription?.unsubscribe();\r\n    this.actionSubscription = this.service.removeItems([usr]).pipe(\r\n      map(results => results[0]),\r\n      switchMap(() => this.service.reloadItems()),\r\n      tap(\r\n        () => {\r\n          const successMessage = $localize`:Message of success after deleting an user with name {{ username }}:User ${usr.name}:username: deleted`;\r\n          this.snackBarService.open(successMessage, COMMON_DISMISS_BUTTON_LABEL);\r\n        },\r\n        () => {\r\n          this.snackBarService.open(COMMON_ERROR_MESSAGE, COMMON_DISMISS_BUTTON_LABEL);\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  protected createDialogProperties(item: User): EntityFormDialogConfig<User> {\r\n    return {\r\n      data: {\r\n        isNewItem: !item,\r\n        item,\r\n        entityType: 'user',\r\n        apiService: this.service.dataService\r\n      },\r\n      width: '40rem'\r\n    };\r\n  }\r\n\r\n}\r\n","<!--\r\n  Copyright (c) 2022 The Trebol eCommerce Project\r\n\r\n  This software is released under the MIT License.\r\n  https://opensource.org/licenses/MIT\r\n-->\r\n\r\n<mat-nav-list>\r\n  <a mat-list-item *ngFor=\"let module of (modules$ | async)\"\r\n    [routerLink]=\"['/management', module.path]\"\r\n    [class.active]=\"module.active\">\r\n    <mat-icon>{{ module.icon }}</mat-icon>\r\n    {{ module.text }}\r\n  </a>\r\n</mat-nav-list>\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { concat, Observable } from 'rxjs';\r\nimport { filter, map, switchMap, take, tap } from 'rxjs/operators';\r\nimport { SessionService } from 'src/app/session.service';\r\nimport { MANAGEMENT_CHILD_ROUTES } from '../../management-routing.module';\r\nimport { ManagementRoutingService } from '../../management-routing.service';\r\nimport { SidenavModuleItem } from './SidenavModuleItem';\r\n\r\n@Component({\r\n  selector: 'app-management-sidenav',\r\n  templateUrl: './management-sidenav.component.html',\r\n  styleUrls: ['./management-sidenav.component.css']\r\n})\r\nexport class ManagementSidenavComponent\r\n  implements OnInit {\r\n\r\n  modules$: Observable<SidenavModuleItem[]>;\r\n\r\n  constructor(\r\n    private routingService: ManagementRoutingService,\r\n    private sessionService: SessionService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.modules$ = concat(\r\n      this.fetchAuthorizedModules(),\r\n      this.reflectChangesOnActiveRoute()\r\n    );\r\n  }\r\n\r\n  private fetchAuthorizedModules() {\r\n    return this.sessionService.authorizedAccess$.pipe(\r\n      take(1),\r\n      map(access => MANAGEMENT_CHILD_ROUTES\r\n        .filter(r => (access?.routes.includes(r.path) || r.path === 'dashboard'))\r\n        .map(r => ({\r\n          path: r.path,\r\n          text: r.data.title,\r\n          icon: r.data.matIcon,\r\n          active: false\r\n        }))\r\n      )\r\n    );\r\n  }\r\n\r\n  private reflectChangesOnActiveRoute() {\r\n    return this.watchNavigatedRoutePath().pipe(\r\n      switchMap(latestRoutePath => this.modules$.pipe(\r\n        take(1),\r\n        tap(arr => {\r\n          arr.forEach(m => { m.active = false; });\r\n          arr.find(someModule => (someModule.path === latestRoutePath)).active = true;\r\n        })\r\n      ))\r\n    );\r\n  }\r\n\r\n  private watchNavigatedRoutePath() {\r\n    return this.routingService.currentRouteSnapshot$.pipe(\r\n      map(routeSnapshot => routeSnapshot?.url[0]?.path),\r\n      filter(routePath => !!routePath)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Subscriber } from '../Subscriber';\nexport function mapTo(value) {\n    return (source) => source.lift(new MapToOperator(value));\n}\nclass MapToOperator {\n    constructor(value) {\n        this.value = value;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    }\n}\nclass MapToSubscriber extends Subscriber {\n    constructor(destination, value) {\n        super(destination);\n        this.value = value;\n    }\n    _next(x) {\n        this.destination.next(this.value);\n    }\n}\n","import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDrawerContent, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatDrawerContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatDrawerContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange =\n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                    if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                        element.focus();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        var _a;\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        (_a = this._anchor) === null || _a === void 0 ? void 0 : _a.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n}\nMatDrawer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDrawer, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", directives: [{ type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDrawerContainer, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DRAWER_CONTAINER]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDrawerContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDrawerContainer, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatDrawerContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], components: [{ type: MatDrawerContent, selector: \"mat-drawer-content\" }], directives: [{ type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i4.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSidenavContent, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: MatSidenavContent,\n        },\n    ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatSidenavContainer)]\n                    }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }];\n    } });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n}\nMatSidenav.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenav.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSidenav, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", directives: [{ type: i1.CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSidenavContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSidenavContainer, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n        {\n            provide: MAT_DRAWER_CONTAINER,\n            useExisting: MatSidenavContainer,\n        },\n    ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], components: [{ type: MatSidenavContent, selector: \"mat-sidenav-content\" }], directives: [{ type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSidenavModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavModule, declarations: [MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent], imports: [CommonModule, MatCommonModule, CdkScrollableModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatDrawer,\n        MatDrawerContainer,\n        MatDrawerContent,\n        MatSidenav,\n        MatSidenavContainer,\n        MatSidenavContent] });\nMatSidenavModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavModule, imports: [[CommonModule, MatCommonModule, CdkScrollableModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkScrollableModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    declarations: [\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatSidenavModule\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES\r\n})\r\nexport class ManagementMaterialModule { }\r\n","/*\r\n * Copyright (c) 2022 The Trebol eCommerce Project\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSnackBarConfig, MAT_SNACK_BAR_DEFAULT_OPTIONS } from '@angular/material/snack-bar';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { ManagementDataActionsButtonBarComponent } from './components/data-actions-button-bar/management-data-actions-button-bar.component';\r\nimport { ManagementFooterComponent } from './components/footer/management-footer.component';\r\nimport { ManagementHeaderComponent } from './components/header/management-header.component';\r\nimport { ManagementHeaderMenuComponent } from './components/header/menu/management-header-menu.component';\r\nimport { ManagementHeaderSidenavButtonComponent } from './components/header/sidenav-button/management-header-sidenav-button.component';\r\nimport { ManagementSidenavComponent } from './components/sidenav/management-sidenav.component';\r\nimport { ManagementSidenavService } from './components/sidenav/management-sidenav.service';\r\nimport { EntityFormDialogComponent } from './dialogs/entity-form/entity-form-dialog.component';\r\nimport { ImagesArrayDialogComponent } from './dialogs/images-array/images-array-dialog.component';\r\nimport { ProductListContentsDialogComponent } from './dialogs/product-list-contents/product-list-contents-dialog.component';\r\nimport { ProductsArrayDialogComponent } from './dialogs/products-array/products-array-dialog.component';\r\nimport { ManagementSellReviewDialogComponent } from './dialogs/sell-review/management-sell-review-dialog.component';\r\nimport { ImageFormComponent } from './forms/image/image-form.component';\r\nimport { ProductCategoryFormComponent } from './forms/product-category/product-category-form.component';\r\nimport { ProductListFormComponent } from './forms/product-list/product-list-form.component';\r\nimport { ProductFormComponent } from './forms/product/product-form.component';\r\nimport { SalespersonFormComponent } from './forms/salesperson/salesperson-form.component';\r\nimport { ShipperFormComponent } from './forms/shipper/shipper-form.component';\r\nimport { UserFormComponent } from './forms/user/user-form.component';\r\nimport { ManagementMaterialModule } from './management-material.module';\r\nimport { ManagementRoutingGuard } from './management-routing.guard';\r\nimport { ManagementRoutingModule } from './management-routing.module';\r\nimport { ManagementRoutingService } from './management-routing.service';\r\nimport { ManagementComponent } from './management.component';\r\nimport { ManagementCustomersComponent } from './routes/customers/management-customers.component';\r\nimport { ManagementCustomersService } from './routes/customers/management-customers.service';\r\nimport { ManagementDashboardComponent } from './routes/dashboard/management-dashboard.component';\r\nimport { ManagementImagesComponent } from './routes/images/management-images.component';\r\nimport { ManagementImagesService } from './routes/images/management-images.service';\r\nimport { ManagementProductCategoriesComponent } from './routes/product-categories/management-product-categories.component';\r\nimport { ManagementProductCategoriesService } from './routes/product-categories/management-product-categories.service';\r\nimport { ManagementProductListsComponent } from './routes/product-lists/management-product-lists.component';\r\nimport { ManagementProductListsService } from './routes/product-lists/management-product-lists.service';\r\nimport { ManagementProductsComponent } from './routes/products/management-products.component';\r\nimport { ManagementProductsService } from './routes/products/management-products.service';\r\nimport { ManagementSalesComponent } from './routes/sales/management-sales.component';\r\nimport { ManagementSalesService } from './routes/sales/management-sales.service';\r\nimport { ManagementSalespeopleComponent } from './routes/salespeople/management-salespeople.component';\r\nimport { ManagementSalespeopleService } from './routes/salespeople/management-salespeople.service';\r\nimport { ManagementShippersComponent } from './routes/shippers/management-shippers.component';\r\nimport { ManagementShippersService } from './routes/shippers/management-shippers.service';\r\nimport { ManagementUsersComponent } from './routes/users/management-users.component';\r\nimport { ManagementUsersService } from './routes/users/management-users.service';\r\n\r\nconst SNACKBAR_DEFAULTS: MatSnackBarConfig = {\r\n  duration: 5000\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ManagementDataActionsButtonBarComponent,\r\n    ManagementFooterComponent,\r\n    ManagementHeaderComponent,\r\n    ManagementHeaderMenuComponent,\r\n    ManagementHeaderSidenavButtonComponent,\r\n    ManagementSidenavComponent,\r\n    EntityFormDialogComponent,\r\n    ImagesArrayDialogComponent,\r\n    ProductListContentsDialogComponent,\r\n    ProductsArrayDialogComponent,\r\n    ManagementSellReviewDialogComponent,\r\n    ImageFormComponent,\r\n    ProductCategoryFormComponent,\r\n    ProductListFormComponent,\r\n    ProductFormComponent,\r\n    SalespersonFormComponent,\r\n    ShipperFormComponent,\r\n    UserFormComponent,\r\n    ManagementComponent,\r\n    ManagementCustomersComponent,\r\n    ManagementDashboardComponent,\r\n    ManagementImagesComponent,\r\n    ManagementProductCategoriesComponent,\r\n    ManagementProductListsComponent,\r\n    ManagementProductsComponent,\r\n    ManagementSalesComponent,\r\n    ManagementSalespeopleComponent,\r\n    ManagementShippersComponent,\r\n    ManagementUsersComponent\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    ManagementMaterialModule,\r\n    ManagementRoutingModule\r\n  ],\r\n  providers: [\r\n    { provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: SNACKBAR_DEFAULTS },\r\n    ManagementRoutingGuard,\r\n    ManagementRoutingService,\r\n    ManagementSidenavService,\r\n    ManagementCustomersService,\r\n    ManagementImagesService,\r\n    ManagementProductCategoriesService,\r\n    ManagementProductListsService,\r\n    ManagementProductsService,\r\n    ManagementSalesService,\r\n    ManagementSalespeopleService,\r\n    ManagementShippersService,\r\n    ManagementUsersService\r\n  ]\r\n})\r\nexport class ManagementModule { }\r\n"],"sourceRoot":"webpack:///","file":"src_app_management_management_module_ts.c05c3340a9cc40f5.js"}